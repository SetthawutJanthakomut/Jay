// ===== POSTPONE RFI INSPECTION =====
// ใช้งาน: เลือนตรวจ RFI พร้อมอัปเดต Calendar และส่งอีเมลแจ้ง
// ✅ เวอร์ชันสมบูรณ์: ส่งอีเมลหา Requester + ทีมเก่า + ทีมใหม่

const SURVEY_SPREADSHEET_ID = '1rWMUNNDbbLbHljs2GsU6fzrJDjHsutS7nMvElGUNTQk';
const CALENDAR_ID = 'primary';

/**
 * ฟังก์ชันหลัก: เลือนตรวจ RFI Inspection
 * 
 * @param {string} rfiNumber - RFI Number (เช่น "RFI #123")
 * @param {string} Description - คำอธิบาย RFI
 * @param {string} newDate - วันที่ใหม่ (YYYY-MM-DD)
 * @param {string} newStartTime - เวลาเริ่มใหม่ (HH:MM)
 * @param {string} newEndTime - เวลาสิ้นสุดใหม่ (HH:MM)
 * @param {string} postponeReason - เหตุผลที่เลือน
 * @param {string} requesterEmail - อีเมลผู้ขอ
 * @param {string} guestEmails - อีเมล Guests (คั่นด้วย ,)
 * @param {string} newLocation - สถานที่ใหม่
 * @param {string} Assigned_Inspector - ทีมงานที่ตรวจ
 * @param {boolean} sendEmail - ส่งอีเมลหรือไม่
 * @param {number} searchDays - จำนวนวันที่ค้นหา Calendar
 * @returns {Object} ผลลัพธ์การเลือนตรวจ
 */
function postponeRFIInspection(
  rfiNumber, 
  Description, 
  newDate, 
  newStartTime, 
  newEndTime, 
  postponeReason = '', 
  requesterEmail = '',
  guestEmails = '',
  newLocation = '', 
  Assigned_Inspector = '',
  sendEmail = true, 
  searchDays = 60
) {
  Logger.log(`📅 [POSTPONE] Starting RFI postponement for: ${rfiNumber}`);
  Logger.log(`👥 New Team: ${Assigned_Inspector}`);
  
  const validation = validatePostponeInputs(rfiNumber, Description, newDate, newStartTime, newEndTime);
  if (!validation.valid) {
    Logger.log(`❌ Validation failed: ${validation.error}`);
    return {
      success: false,
      error: validation.error,
      rfiNumber: rfiNumber,
      rfiDescription: Description,
      eventsFound: 0,
      eventsUpdated: 0,
      emailsSent: false
    };
  }

  const cleanRfiNumber = rfiNumber.trim();
  const cleanDescription = Description ? Description.trim() : '';
  
  let result = {
    success: false,
    rfiNumber: cleanRfiNumber,
    rfiDescription: cleanDescription,
    rfiEventsFound: 0,
    rfiEventsUpdated: 0,
    emailsSent: false,
    participants: [],
    updatedRFIEvents: [],
    error: null,
    message: '',
    originalDate: null,
    originalTeam: null,  // ⭐ เพิ่ม: เก็บทีมเก่า
    newDate: newDate,
    newStartTime: newStartTime,
    newEndTime: newEndTime
  };

  try {
    // Step 1: ค้นหา Calendar Events
    Logger.log("🔍 Step 1: Searching Primary Calendar Events...");
    const rfiSearchResult = searchCalendarEventsByRFIAndDescription(cleanRfiNumber, cleanDescription, CALENDAR_ID, searchDays);
    
    if (rfiSearchResult.success && rfiSearchResult.events.length > 0) {
      result.rfiEventsFound = rfiSearchResult.events.length;
      result.originalDate = rfiSearchResult.events[0].startTime.toDateString();
      
      // ⭐ ดึงทีมเก่าจาก Calendar Event title
      const originalTitle = rfiSearchResult.events[0].title || '';
      const originalTeam = extractInspectorFromTitle(originalTitle);
      result.originalTeam = originalTeam;
      
      Logger.log(`✅ Found ${result.rfiEventsFound} RFI calendar events`);
      Logger.log(`👥 Original Team: ${originalTeam || 'N/A'}`);
    } else {
      result.error = `No calendar events found for RFI: ${cleanRfiNumber} / ${cleanDescription}`;
      result.message = result.error;
      Logger.log(⚠️ ${result.error}`);
      return result;
    }

    // Step 2: สร้างวันที่และเวลาใหม่
    Logger.log("⏰ Step 2: Creating new date/time...");
    const newDateTime = createNewDateTime(newDate, newStartTime, newEndTime);
    
    if (!newDateTime.valid) {
      result.error = newDateTime.error;
      result.message = result.error;
      return result;
    }

    // Step 3: อัปเดต Primary Calendar Events
    Logger.log("📝 Step 3: Updating Primary Calendar Events...");
    
    for (let i = 0; i < rfiSearchResult.events.length; i++) {
      const eventInfo = rfiSearchResult.events[i];
      
      try {
        // ⭐ ส่ง requesterEmail ไปด้วย
        const updateSuccess = updateCalendarEventV2(
          eventInfo,
          CALENDAR_ID,
          newDateTime.startTime,
          newDateTime.endTime,
          postponeReason,
          newLocation,
          Assigned_Inspector,
          requesterEmail  // ⭐ เพิ่ม parameter
        );
        
        if (updateSuccess.success) {
          result.rfiEventsUpdated++;
          result.updatedRFIEvents.push({
            eventId: eventInfo.eventId,
            title: updateSuccess.newTitle,
            calendarType: 'RFI'
          });
          Logger.log(`✅ Event updated: "${eventInfo.title}"`);
        }
        
      } catch (updateError) {
        Logger.log(`❌ Error updating event: ${updateError.toString()}`);
      }
    }

    // Step 4: ส่งอีเมลแจ้งทั้งทีมเก่าและทีมใหม่
    if (sendEmail && result.rfiEventsUpdated > 0) {
      Logger.log("📧 Step 4: Sending notification to Requester + OLD Team + NEW Team...");
      
      const scheduleInfo = {
        originalDate: result.originalDate || 'N/A',
        originalTime: rfiSearchResult.events[0] ? 
          `${formatTime(rfiSearchResult.events[0].startTime)} - ${formatTime(rfiSearchResult.events[0].endTime)}` : 'N/A',
        originalLocation: rfiSearchResult.events[0] ? (rfiSearchResult.events[0].location || '') : '',
        originalInspector: result.originalTeam || '',
        
        newDate: formatDateThai(newDate),
        newTime: `${newStartTime} - ${newEndTime}`,
        newLocation: newLocation || '',
        newInspector: Assigned_Inspector || ''
      };
      
      Logger.log('📊 Schedule Info:', JSON.stringify(scheduleInfo));
      
      // ⭐ ส่งทีมเก่าไปด้วย
      const emailResult = sendPostponementNotification(
        cleanRfiNumber,
        cleanDescription,
        postponeReason,
        result.updatedRFIEvents,
        requesterEmail,
        scheduleInfo,
        result.originalTeam  // ⭐ ส่งทีมเก่า
      );
      
      result.emailsSent = emailResult.success;
      Logger.log(`📧 Email: ${emailResult.success ? 'SENT' : 'FAILED'}`);
      Logger.log(`📧 Total recipients: ${emailResult.totalRecipients || 0} (Requester + OLD + NEW Team)`);
      
      if (emailResult.recipientsList && emailResult.recipientsList.length > 0) {
        Logger.log(`📧 Recipients: ${emailResult.recipientsList.join(', ')}`);
      }
    }

    // กำหนดผลลัพธ์
    result.success = result.rfiEventsUpdated > 0;
    
    if (result.success) {
      result.message = `เลือนตรวจ ${result.rfiEventsUpdated} event(s) ไปวันที่ ${newDate} ${newStartTime}-${newEndTime}`;
    } else {
      result.message = `ไม่สามารถเลือนตรวจ RFI ${cleanRfiNumber} ได้`;
    }

  } catch (error) {
    result.error = error.toString();
    result.message = `เกิดข้อผิดพลาดในการเลือนตรวจ RFI ${cleanRfiNumber}: ${result.error}`;
    Logger.log(`❌ Unexpected error: ${result.error}`);
  }

  // แสดงสรุปผล
  Logger.log("\n" + "=".repeat(50));
  Logger.log("📅 RFI POSTPONEMENT SUMMARY:");
  Logger.log(`🆔 RFI Number: ${result.rfiNumber}`);
  Logger.log(`📅 New Date: ${result.newDate} ${result.newStartTime}-${result.newEndTime}`);
  Logger.log(`👥 OLD Team: ${result.originalTeam || 'N/A'} → ⚠️ REPLACED`);
  Logger.log(`👥 NEW Team: ${Assigned_Inspector || 'N/A'} → ✅ ASSIGNED`);
  Logger.log(`📅 Events Updated: ${result.rfiEventsUpdated}/${result.rfiEventsFound}`);
  Logger.log(`👥 Guest List: Updated (Requester + NEW Team only)`);
  Logger.log(`📧 Emails Sent: ${result.emailsSent ? 'YES (Requester + OLD + NEW)' : 'NO'}`);
  Logger.log(`✅ Overall Success: ${result.success ? 'YES' : 'NO'}`);

  return result;
}

/**
 * ✅ Validate Postpone Inputs
 */
function validatePostponeInputs(rfiNumber, description, newDate, newStartTime, newEndTime) {
  try {
    Logger.log('🔍 Validating postpone inputs...');
    
    const errors = [];
    
    if (!rfiNumber || String(rfiNumber).trim() === '') {
      errors.push('RFI Number is required');
    }
    
    if (!newDate || String(newDate).trim() === '') {
      errors.push('New Date is required');
    } else {
      const dateObj = new Date(newDate + 'T00:00:00');
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      if (isNaN(dateObj.getTime())) {
        errors.push('Invalid date format (must be YYYY-MM-DD)');
      } else if (dateObj < today) {
        errors.push('New Date must be today or in the future');
      }
    }
    
    if (!newStartTime || String(newStartTime).trim() === '') {
      errors.push('New Start Time is required');
    } else {
      const timePattern = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
      if (!timePattern.test(newStartTime)) {
        errors.push('Invalid Start Time format (must be HH:MM)');
      }
    }
    
    if (!newEndTime || String(newEndTime).trim() === '') {
      errors.push('New End Time is required');
    } else {
      const timePattern = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
      if (!timePattern.test(newEndTime)) {
        errors.push('Invalid End Time format (must be HH:MM)');
      }
      
      if (newStartTime) {
        const startMinutes = timeToMinutes(newStartTime);
        const endMinutes = timeToMinutes(newEndTime);
        
        if (endMinutes <= startMinutes) {
          errors.push('End Time must be after Start Time');
        }
      }
    }
    
    if (errors.length > 0) {
      Logger.log('❌ Validation failed:');
      errors.forEach(err => Logger.log(`   - ${err}`));
      
      return {
        valid: false,
        error: errors.join('; ')
      };
    }
    
    Logger.log('✅ Validation passed');
    return {
      valid: true,
      error: null
    };
    
  } catch (error) {
    Logger.log(`❌ Validation error: ${error.toString()}`);
    return {
      valid: false,
      error: `Validation error: ${error.toString()}`
    };
  }
}

// ===== HELPER FUNCTIONS =====

/**
 * ค้นหา Calendar Events ตาม RFI Number และ Description
 */
function searchCalendarEventsByRFIAndDescription(rfiNumber, description, calendarId, searchDays = 60) {
  Logger.log(`🔍 Searching calendar "${calendarId}" for RFI Number: ${rfiNumber}`);
  
  try {
    const calendar = CalendarApp.getCalendarById(calendarId);
    if (!calendar) {
      throw new Error(`Cannot access calendar: ${calendarId}`);
    }

    const startDate = new Date();
    startDate.setDate(startDate.getDate() - searchDays);
    
    const endDate = new Date();
    endDate.setDate(endDate.getDate() + searchDays);
    
    const allEvents = calendar.getEvents(startDate, endDate);
    Logger.log(`📊 Total events in range: ${allEvents.length}`);
    
    if (allEvents.length === 0) {
      return { success: false, message: 'No events found in date range', events: [] };
    }

    const matchingEvents = [];
    
    const rfiSearchPatterns = [
      `RFI #${rfiNumber}`,
      `RFI-${rfiNumber}`,
      `#${rfiNumber}`,
      rfiNumber
    ];
    
    allEvents.forEach((event, index) => {
      try {
        const title = event.getTitle() || '';
        const eventDescription = event.getDescription() || '';
        const searchableText = (title + ' ' + eventDescription).toLowerCase();
        
        const rfiMatch = rfiSearchPatterns.some(pattern => 
          searchableText.includes(pattern.toLowerCase())
        );
        
        if (rfiMatch) {
          Logger.log(`✅ Found matching event: "${title}"`);
          
          matchingEvents.push({
            event: event,
            eventId: event.getId(),
            title: title,
            description: eventDescription,
            startTime: event.getStartTime(),
            endTime: event.getEndTime(),
            location: event.getLocation() || '',
            created: event.getDateCreated(),
            lastUpdated: event.getLastUpdated()
          });
        }
        
      } catch (eventError) {
        Logger.log(`⚠️ Error processing event ${index + 1}: ${eventError.toString()}`);
      }
    });
    
    matchingEvents.sort((a, b) => b.created - a.created);
    
    return {
      success: matchingEvents.length > 0,
      message: `Found ${matchingEvents.length} events for RFI: ${rfiNumber}`,
      events: matchingEvents
    };
    
  } catch (error) {
    Logger.log(`❌ Error searching calendar events: ${error.toString()}`);
    return { success: false, error: error.toString(), events: [] };
  }
}

/**
 * ⭐ อัปเดต Calendar Event พร้อมอัปเดต Guest List
 */
function updateCalendarEventV2(eventInfo, calendarId, newStartTime, newEndTime, postponeReason, newLocation, assignedInspector, requesterEmail) {
  Logger.log(`📝 Updating event in "${calendarId}": ${eventInfo.eventId}`);
  
  try {
    const calendar = CalendarApp.getCalendarById(calendarId);
    if (!calendar) {
      return { success: false, error: `Cannot access calendar: ${calendarId}` };
    }
    
    const event = calendar.getEventById(eventInfo.eventId);
    
    if (!event) {
      return { success: false, error: `Event not found: ${eventInfo.eventId}` };
    }

    const originalStartTime = event.getStartTime();
    const originalEndTime = event.getEndTime();
    const originalLocation = event.getLocation();
    const originalDescription = event.getDescription() || '';
    
    // อัปเดตเวลา
    event.setTime(newStartTime, newEndTime);
    Logger.log(`✅ Updated time: ${newStartTime} - ${newEndTime}`);
    
    // อัปเดต Location
    const finalLocation = newLocation && newLocation.trim() !== '' ? newLocation.trim() : originalLocation;
    if (finalLocation) {
      event.setLocation(finalLocation);
      Logger.log(`📍 Updated location: ${finalLocation}`);
    }
    
    // อัปเดต Title
    const currentTitle = event.getTitle();
    let newTitle = currentTitle;
    
    if (!currentTitle.includes('📅 POSTPONED')) {
      newTitle = `📅 POSTPONED - ${currentTitle}`;
      event.setTitle(newTitle);
      Logger.log(`🏷️ Updated title: ${newTitle}`);
    }
    
    // อัปเดตสี
    const teamMatch = currentTitle.match(/\[([^\]]+)\]$/);
    const currentTeam = teamMatch ? teamMatch[1] : null;
    
    if (assignedInspector && String(assignedInspector).trim() !== '') {
      const teams = String(assignedInspector).trim().split(',').map(t => t.trim());
      const teamColors = getTeamColors(assignedInspector);
      
      if (currentTeam && teams.includes(currentTeam) && teamColors[currentTeam]) {
        event.setColor(teamColors[currentTeam]);
        Logger.log(`🎨 Updated color for team: ${currentTeam}`);
      } else if (teams.length > 0 && teamColors[teams[0]]) {
        event.setColor(teamColors[teams[0]]);
        Logger.log(`🎨 Set color for team: ${teams[0]}`);
      }
      
      // ⭐⭐⭐ อัปเดต Guest List ⭐⭐⭐
      Logger.log('👥 Updating Guest list...');
      
      // 1. ดึง Guest list ปัจจุบัน
      const currentGuests = event.getGuestList(true);
      Logger.log(`Current guests: ${currentGuests.length}`);
      
      // 2. ลบ Guest ทั้งหมด (ยกเว้น Requester)
      const requesterEmailClean = requesterEmail ? String(requesterEmail).trim().toLowerCase() : '';
      
      currentGuests.forEach(function(guest) {
        try {
          const guestEmail = guest.getEmail().toLowerCase();
          
          if (guestEmail !== requesterEmailClean) {
            event.removeGuest(guestEmail);
            Logger.log(`🗑️ Removed guest: ${guestEmail}`);
          }
        } catch (e) {
          Logger.log(`⚠️ Could not remove guest: ${e.toString()}`);
        }
      });
      
      // 3. เพิ่ม Requester (ถ้ายังไม่มี)
      if (requesterEmailClean && requesterEmailClean.includes('@')) {
        try {
          event.addGuest(requesterEmailClean);
          Logger.log(`✅ Added Requester: ${requesterEmailClean}`);
        } catch (e) {
          Logger.log(`⚠️ Could not add Requester: ${e.toString()}`);
        }
      }
      
      // 4. เพิ่ม Team members ใหม่
      const teamEmails = getTeamEmailsByTeamNames(assignedInspector);
      Logger.log(`Team members to add: ${teamEmails.length}`);
      
      teamEmails.forEach(function(teamMember) {
        try {
          const teamEmail = String(teamMember.email).trim().toLowerCase();
          
          if (teamEmail !== requesterEmailClean) {
            event.addGuest(teamEmail);
            Logger.log(`✅ Added team member: ${teamMember.name} (${teamEmail})`);
          }
        } catch (e) {
          Logger.log(`⚠️ Could not add team member: ${e.toString()}`);
        }
      });
      
      Logger.log('✅ Guest list updated successfully');
      // ⭐⭐⭐ จบส่วนอัปเดต Guest List ⭐⭐⭐
    }
    
    // สร้าง Postponement Record
    const postponementRecord = `
┌─────────────────────────────────────
📅 เลื่อนการตรวจงาน (INSPECTION POSTPONED)
└─────────────────────────────────────┘

⏰ กำหนดการเดิม:
   📅 ${originalStartTime.toLocaleDateString('th-TH', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
   })}
   🕐 ${originalStartTime.toLocaleTimeString('th-TH', { 
      hour: '2-digit', 
      minute: '2-digit' 
   })} - ${originalEndTime.toLocaleTimeString('th-TH', { 
      hour: '2-digit', 
      minute: '2-digit' 
   })}
   📍 ${originalLocation || 'ไม่ระบุสถานที่'}

🔄 กำหนดการใหม่:
   📅 ${newStartTime.toLocaleDateString('th-TH', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
   })}
   🕐 ${newStartTime.toLocaleTimeString('th-TH', { 
      hour: '2-digit', 
      minute: '2-digit' 
   })} - ${newEndTime.toLocaleTimeString('th-TH', { 
      hour: '2-digit', 
      minute: '2-digit' 
   })}
   📍 ${finalLocation || 'ไม่ระบุสถานที่'}

${assignedInspector && String(assignedInspector).trim() !== '' ? `👥 ทีมงานตรวจ: ${assignedInspector}\n` : ''}
${postponeReason ? `💬 เหตุผล:\n   ${postponeReason}\n` : ''}
📌 เลื่อนเมื่อ: ${new Date().toLocaleString('th-TH')}
🤖 อัปเดตโดย: RFI System

┌─────────────────────────────────────
`;
    
    const newDescription = postponementRecord + '\n' + originalDescription;
    event.setDescription(newDescription);
    
    Logger.log(`✅ Event updated successfully in ${calendarId}`);
    
    return {
      success: true,
      newTitle: newTitle,
      newLocation: finalLocation,
      guestsUpdated: true
    };
    
  } catch (error) {
    Logger.log(`❌ Error updating event: ${error.toString()}`);
    return {
      success: false,
      error: error.toString()
    };
  }
}

/**
 * ⭐ ส่งอีเมลแจ้งการเลือนตรวจ (ภาษาไทย) - เช็คว่าเปลี่ยนทีมหรือไม่
 */
function sendPostponementNotification(rfiNumber, Description, postponeReason, updatedEvents, requesterEmail, scheduleInfo, originalTeamNames) {
  Logger.log('\n' + '='.repeat(50));
  Logger.log('📧 SENDING POSTPONEMENT NOTIFICATION (TH)');
  Logger.log('='.repeat(50));
  
  Logger.log(`📧 Requester: ${requesterEmail || 'NOT PROVIDED'}`);
  Logger.log(`👥 OLD Team: ${originalTeamNames || 'NOT PROVIDED'}`);
  Logger.log(`👥 NEW Team: ${scheduleInfo?.newInspector || 'NOT PROVIDED'}`);
  
  try {
    const quota = checkEmailQuota();
    Logger.log(`📊 Email quota remaining: ${quota}`);
    
    if (quota <= 0) {
      Logger.log('❌ Email quota exceeded');
      return { success: false, message: "Email quota exceeded" };
    }

    // ⭐ เช็คว่าเปลี่ยนทีมหรือไม่
    const oldTeamClean = (originalTeamNames || '').trim();
    const newTeamClean = (scheduleInfo?.newInspector || '').trim();
    const isTeamChanged = oldTeamClean !== newTeamClean && oldTeamClean !== '';
    
    Logger.log(`\n🔍 Team changed: ${isTeamChanged}`);
    if (isTeamChanged) {
      Logger.log(`   OLD: "${oldTeamClean}"`);
      Logger.log(`   NEW: "${newTeamClean}"`);
    } else {
      Logger.log(`   Same team: "${newTeamClean}"`);
    }

    // รวมผู้รับอีเมล
    const allRecipients = new Set();
    const oldTeamEmails = [];
    const newTeamEmails = [];
    
    // 1. เพิ่ม Requester
    if (requesterEmail && String(requesterEmail).trim() !== '' && String(requesterEmail).includes('@')) {
      const cleanEmail = String(requesterEmail).trim();
      allRecipients.add(cleanEmail);
      Logger.log(`✅ Added Requester: ${cleanEmail}`);
    }
    
    // 2. ⭐ เพิ่มทีมเก่า (เฉพาะตอนที่มีการเปลี่ยนทีม)
    if (isTeamChanged && oldTeamClean !== '') {
      Logger.log(`\n👥 Processing OLD Team (will be notified): ${oldTeamClean}`);
      
      const oldTeamResult = getTeamEmailsByTeamNames(oldTeamClean);
      
      if (oldTeamResult && oldTeamResult.length > 0) {
        oldTeamResult.forEach((teamMember, index) => {
          const teamEmail = teamMember.email;
          if (teamEmail && teamEmail.includes('@')) {
            allRecipients.add(teamEmail);
            oldTeamEmails.push(teamEmail);
            Logger.log(`✅ Added OLD Team ${index + 1}: ${teamMember.name} -> ${teamEmail}`);
          }
        });
      }
    } else if (!isTeamChanged) {
      Logger.log(`\n👥 Team unchanged - OLD team will NOT receive separate notification`);
    }
    
    // 3. เพิ่มทีมใหม่ (หรือทีมเดิม ถ้าไม่ได้เปลี่ยน)
    if (scheduleInfo && scheduleInfo.newInspector) {
      Logger.log(`\n👥 Processing ${isTeamChanged ? 'NEW' : 'Current'} Team: ${scheduleInfo.newInspector}`);
      
      const newTeamResult = getTeamEmailsByTeamNames(scheduleInfo.newInspector);
      
      if (newTeamResult && newTeamResult.length > 0) {
        newTeamResult.forEach((teamMember, index) => {
          const teamEmail = teamMember.email;
          if (teamEmail && teamEmail.includes('@')) {
            allRecipients.add(teamEmail);
            newTeamEmails.push(teamEmail);
            Logger.log(`✅ Added ${isTeamChanged ? 'NEW' : 'Current'} Team ${index + 1}: ${teamMember.name} -> ${teamEmail}`);
          }
        });
      }
    }
    
    const finalRecipients = Array.from(allRecipients);
    
    Logger.log(`\n📊 FINAL: ${finalRecipients.length} recipients`);
    
    if (finalRecipients.length === 0) {
      Logger.log('❌ No recipients');
      return { 
        success: false, 
        message: "No recipients",
        totalRecipients: 0
      };
    }

    const subject = isTeamChanged 
      ? `📅 เลื่อนตรวจงาน + เปลี่ยนทีม - RFI #${rfiNumber}`
      : `📅 เลื่อนตรวจงาน - RFI #${rfiNumber}`;
    
    // สร้างรายการ Events
    let eventsList = '<ul style="margin: 10px 0;">';
    updatedEvents.forEach(evt => {
      eventsList += `<li style="margin: 5px 0;"><strong>${evt.title}</strong></li>`;
    });
    eventsList += '</ul>';
    
    // ตารางเปรียบเทียบ
    let scheduleComparisonHtml = '';
    if (scheduleInfo) {
      scheduleComparisonHtml = `
<h3>📅 การเปลี่ยนแปลง:</h3>
<table style="margin: 15px 0; width: 100%;">
<thead>
<tr style="background-color: #f8f9fa;">
  <th style="padding: 12px; text-align: left; border: 1px solid #ddd;">รายการ</th>
  <th style="padding: 12px; text-align: left; border: 1px solid #ddd;">เดิม</th>
  <th style="padding: 12px; text-align: left; border: 1px solid #ddd;">ใหม่</th>
</tr>
</thead>
<tbody>
<tr>
  <td style="padding: 10px; border: 1px solid #ddd;"><strong>📅 วันที่</strong></td>
  <td style="padding: 10px; border: 1px solid #ddd;">${scheduleInfo.originalDate}</td>
  <td style="padding: 10px; border: 1px solid #ddd; background-color: #e7f3ff;"><strong>${scheduleInfo.newDate}</strong></td>
</tr>
<tr>
  <td style="padding: 10px; border: 1px solid #ddd;"><strong>🕐 เวลา</strong></td>
  <td style="padding: 10px; border: 1px solid #ddd;">${scheduleInfo.originalTime}</td>
  <td style="padding: 10px; border: 1px solid #ddd; background-color: #e7f3ff;"><strong>${scheduleInfo.newTime}</strong></td>
</tr>
${scheduleInfo.originalLocation || scheduleInfo.newLocation ? `
<tr>
  <td style="padding: 10px; border: 1px solid #ddd;"><strong>📍 สถานที่</strong></td>
  <td style="padding: 10px; border: 1px solid #ddd;">${scheduleInfo.originalLocation || '-'}</td>
  <td style="padding: 10px; border: 1px solid #ddd; background-color: #e7f3ff;"><strong>${scheduleInfo.newLocation || '-'}</strong></td>
</tr>
` : ''}
${scheduleInfo.originalInspector || scheduleInfo.newInspector ? `
<tr>
  <td style="padding: 10px; border: 1px solid #ddd;"><strong>👥 ทีมงาน</strong></td>
  <td style="padding: 10px; border: 1px solid #ddd;">${scheduleInfo.originalInspector || '-'}</td>
  <td style="padding: 10px; border: 1px solid #ddd; background-color: #e7f3ff;"><strong>${scheduleInfo.newInspector || '-'}</strong></td>
</tr>
` : ''}
</tbody>
</table>`;
    }
    
    // เหตุผล
    let reasonHtml = '';
    if (postponeReason && String(postponeReason).trim() !== '') {
      reasonHtml = `
<div style="background-color: #fffacd; border-left: 4px solid #ffc107; padding: 15px; margin: 15px 0; border-radius: 5px;">
  <strong style="color: #856404;">💬 เหตุผลในการเลือน:</strong>
  <p style="margin: 8px 0 0 0; color: #333;">${postponeReason}</p>
</div>`;
    }
    
    // รายชื่อผู้รับ (แยกสี)
    let recipientListHtml = '';
    if (finalRecipients.length > 0) {
      recipientListHtml = `
<h3>👥 รายชื่อผู้รับอีเมล:</h3>
<table style="margin: 10px 0;">
<tr style="background-color: #f2f2f5;">
  <th style="padding: 10px; text-align: left; border: 1px solid #ddd;">อีเมล</th>
  <th style="padding: 10px; text-align: left; border: 1px solid #ddd;">บทบาท</th>
</tr>`;
      
      finalRecipients.forEach(email => {
        let role = 'ผู้เกี่ยวข้อง';
        let bgColor = '';
        
        if (email === requesterEmail) {
          role = '<strong>ผู้ขอตรวจงาน</strong>';
          bgColor = 'background-color: #d1ecf1;';
        } else if (oldTeamEmails.includes(email)) {
          role = '<span style="color: #856404;">⚠️ ทีมเก่า (ถูกเปลี่ยน)</span>';
          bgColor = 'background-color: #fff3cd;';
        } else if (newTeamEmails.includes(email)) {
          role = '<span style="color: #155724;">✅ ทีมใหม่ (รับมอบหมาย)</span>';
          bgColor = 'background-color: #d4edda;';
        }
        
        recipientListHtml += `<tr style="${bgColor}"><td style="padding: 8px; border: 1px solid #ddd;">${email}</td><td style="padding: 8px; border: 1px solid #ddd;">${role}</td></tr>`;
      });
      
      recipientListHtml += `</table>`;
    }
    
    const htmlMessage = `<!DOCTYPE html>
<html>
<head><meta charset="UTF-8"><style>
body { font-family: 'Sarabun', Arial, sans-serif; margin: 20px; line-height: 1.6; }
h2 { color: #ff6b35; margin-bottom: 10px; }
h3 { color: #333; margin-top: 25px; margin-bottom: 12px; }
table { border-collapse: collapse; width: 100%; margin: 10px 0; }
td, th { border: 1px solid #ddd; padding: 10px; text-align: left; }
th { background-color: #f2f2f5; font-weight: 600; }
.info-box { background-color: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin: 15px 0; border-radius: 5px; }
.note { background-color: #e7f3ff; border-left: 4px solid #1877f2; padding: 15px; margin: 15px 0; border-radius: 5px; }
.warning-box { background-color: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin: 15px 0; border-radius: 5px; }
.success-box { background-color: #d4edda; border-left: 4px solid #28a745; padding: 15px; margin: 15px 0; border-radius: 5px; }
ul { padding-left: 20px; }
li { margin: 5px 0; }
</style></head>
<body>
<h2>📅 ${isTeamChanged ? 'แจ้งเลื่อนตรวจงาน RFI และเปลี่ยนทีมงาน' : 'แจ้งเลื่อนตรวจงาน RFI'}</h2>

<div class="info-box">
  <strong>⚠️ ประกาศสำคัญ:</strong> ${isTeamChanged 
    ? 'การตรวจงานได้ถูกเลื่อนไปวันใหม่ พร้อมเปลี่ยนทีมงานที่รับผิดชอบ'
    : 'การตรวจงานได้ถูกเลื่อนไปยังวันที่และเวลาใหม่'}
</div>

${isTeamChanged && oldTeamEmails.length > 0 ? `
<div class="warning-box">
  <strong>📢 สำหรับทีมเก่า (${scheduleInfo.originalInspector || 'ทีมเดิม'}):</strong><br>
  ⚠️ ท่านได้ถูก<strong>เปลี่ยนแปลง</strong>และ<strong>ไม่ต้อง</strong>รับผิดชอบงานตรวจนี้อีกต่อไป<br>
  ℹ️ อีเมลนี้เป็นการแจ้งเพื่อทราบเท่านั้น - ไม่ต้องดำเนินการใดๆ
</div>
` : ''}

${isTeamChanged && newTeamEmails.length > 0 ? `
<div class="success-box">
  <strong>📢 สำหรับทีมใหม่ (${scheduleInfo.newInspector || 'ทีมใหม่'}):</strong><br>
  ✅ ท่านได้รับ<strong>มอบหมาย</strong>ให้ดำเนินการตรวจงานนี้<br>
  📅 กรุณาตรวจสอบปฏิทินและเตรียมความพร้อมตามกำหนดการใหม่ด้านล่าง
</div>
` : ''}

${!isTeamChanged && newTeamEmails.length > 0 ? `
<div class="note">
  <strong>📢 สำหรับทีมงาน (${scheduleInfo.newInspector || 'ทีมปัจจุบัน'}):</strong><br>
  📅 กรุณาตรวจสอบปฏิทินและเตรียมความพร้อมตามกำหนดการใหม่ด้านล่าง<br>
  ℹ️ ทีมงานยังคงเดิม - เปลี่ยนเฉพาะวันที่และเวลา
</div>
` : ''}

<h3>รายละเอียด RFI:</h3>
<table>
<tr><th style="width: 30%;">RFI Number</th><td><strong>${rfiNumber}</strong></td></tr>
<tr><th>รายละเอียด</th><td>${Description}</td></tr>
</table>

${scheduleComparisonHtml}

${reasonHtml}

<h3>📅 Calendar Events ที่อัปเดต:</h3>
${eventsList}

${recipientListHtml}

<div class="note">
  <strong>📌 หมายเหตุสำคัญ:</strong> 
  <ul style="margin: 10px 0; padding-left: 20px;">
    ${isTeamChanged ? `
    <li>อีเมลนี้ส่งถึง <strong>ทุกฝ่ายที่เกี่ยวข้อง</strong> (ผู้ขอ + ทีมเก่า + ทีมใหม่)</li>
    <li><strong style="color: #856404;">ทีมเก่า:</strong> ท่านไม่ต้องรับผิดชอบอีกต่อไป - เพื่อทราบเท่านั้น</li>
    <li><strong style="color: #155724;">ทีมใหม่:</strong> ท่านได้รับมอบหมายแล้ว - กรุณาตรวจสอบปฏิทิน</li>
    ` : `
    <li>อีเมลนี้ส่งถึง <strong>ผู้ขอและทีมงาน</strong></li>
    <li><strong>ทีมงาน:</strong> ยังคงเดิม - เปลี่ยนเฉพาะวันที่และเวลา</li>
    `}
    <li>Calendar events ถูกอัปเดตอัตโนมัติแล้ว</li>
    <li>หากมีข้อสงสัย กรุณาติดต่อผู้ขอหรือทีม QC</li>
  </ul>
</div>

<hr style="margin: 30px 0; border: none; border-top: 1px solid #ddd;">
<p style="color: #666; font-size: 12px; margin: 5px 0;">
📨 <strong>ผู้รับ:</strong> ${finalRecipients.length} คน ${isTeamChanged ? '(ผู้ขอ + ทีมเก่า + ทีมใหม่)' : '(ผู้ขอ + ทีมงาน)'}<br>
🤖 <strong>ส่งโดย:</strong> ระบบ RFI - ${isTeamChanged ? 'แจ้งเลื่อนตรวจและเปลี่ยนทีม' : 'แจ้งเลื่อนตรวจ'}<br>
🕐 <strong>ส่งเมื่อ:</strong> ${new Date().toLocaleString('th-TH')}
</p>
</body>
</html>`;
    
    const recipientList = finalRecipients.join(',');
    
    Logger.log(`\n📤 Sending email...`);
    Logger.log(`📧 To: ${recipientList}`);
    Logger.log(`📧 Subject: ${subject}`);
    
    const sent = safeSendEmail({
      to: recipientList,
      subject: subject,
      htmlBody: htmlMessage,
      name: 'ระบบ RFI - แจ้งเลื่อนตรวจ'
    });
    
    if (sent) {
      Logger.log(`✅ EMAIL SENT to ${finalRecipients.length} recipients`);
    } else {
      Logger.log(`❌ EMAIL FAILED`);
    }
    
    return {
      success: sent,
      totalSent: sent ? finalRecipients.length : 0,
      totalRecipients: finalRecipients.length,
      recipientsList: finalRecipients
    };
    
  } catch (error) {
    Logger.log(`❌ EMAIL ERROR: ${error.toString()}`);
    return { 
      success: false, 
      error: error.toString(),
      totalRecipients: 0
    };
  }
}

function createNewDateTime(dateStr, startTimeStr, endTimeStr) {
  try {
    const startDate = new Date(dateStr + 'T00:00:00+07:00');
    const [startHours, startMinutes] = startTimeStr.split(':').map(Number);
    startDate.setHours(startHours, startMinutes, 0, 0);
    
    const endDate = new Date(dateStr + 'T00:00:00+07:00');
    const [endHours, endMinutes] = endTimeStr.split(':').map(Number);
    endDate.setHours(endHours, endMinutes, 0, 0);
    
    return {
      valid: true,
      startTime: startDate,
      endTime: endDate
    };
    
  } catch (error) {
    return {
      valid: false,
      error: `Invalid date/time format: ${error.toString()}`
    };
  }
}

// ===== UTILITY FUNCTIONS =====

function timeToMinutes(timeString) {
  if (!timeString) return 0;
  const parts = timeString.split(':');
  return parseInt(parts[0]) * 60 + parseInt(parts[1]);
}

function checkEmailQuota() {
  try {
    const remainingQuota = MailApp.getRemainingDailyQuota();
    console.log('Remaining email quota:', remainingQuota);
    return remainingQuota;
  } catch (error) {
    console.error('Error checking email quota:', error);
    return 0;
  }
}

function safeSendEmail(emailParams) {
  try {
    const quota = checkEmailQuota();
    if (quota <= 0) {
      console.log('Email quota exceeded, skipping email');
      return false;
    }
    
    MailApp.sendEmail(emailParams);
    return true;
  } catch (error) {
    console.error('Error sending email:', error);
    return false;
  }
}

/**
 * ดึงชื่อทีมจาก Title
 */
function extractInspectorFromTitle(title) {
  if (!title) return '';
  
  const match = title.match(/\[([^\]]+)\]/);
  if (match && match[1]) {
    return match[1];
  }
  
  return '';
}

/**
 * Format Date เป็นภาษาไทย
 */
function formatDateThai(dateString) {
  if (!dateString) return '';
  
  const months = [
    'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน',
    'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'
  ];
  
  const date = new Date(dateString + 'T00:00:00');
  const day = date.getDate();
  const month = months[date.getMonth()];
  const year = date.getFullYear() + 543;
  
  return `${day} ${month} ${year}`;
}

/**
 * Format Time (HH:MM)
 */
function formatTime(timeValue) {
  if (!timeValue) return '';
  
  if (typeof timeValue === 'string') {
    return timeValue;
  }
  
  if (timeValue instanceof Date) {
    const hours = String(timeValue.getHours()).padStart(2, '0');
    const minutes = String(timeValue.getMinutes()).padStart(2, '0');
    return `${hours}:${minutes}`;
  }
  
  return timeValue.toString();
}

// ===== COLOR FUNCTIONS (จาก Resources Sheet) =====

function getTeamColors(assignedInspector) {
  try {
    if (!assignedInspector || String(assignedInspector).trim() === '') {
      return {};
    }
    
    const teamString = String(assignedInspector).trim();
    const requestedTeams = teamString.split(',').map(t => t.trim()).filter(t => t.length > 0);
    
    if (requestedTeams.length === 0) {
      return {};
    }
    
    const sheet = SpreadsheetApp.openById(SURVEY_SPREADSHEET_ID).getSheetByName('Resources');
    
    if (!sheet) {
      return {};
    }
    
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      return {};
    }
    
    const teamData = sheet.getRange(2, 2, lastRow - 1, 1).getValues();
    const colorData = sheet.getRange(2, 8, lastRow - 1, 1).getValues();
    
    const teamColors = {};
    
    for (let i = 0; i < teamData.length; i++) {
      const teamName = String(teamData[i][0] || '').trim();
      const colorValue = String(colorData[i][0] || '').trim();
      
      if (requestedTeams.includes(teamName) && colorValue) {
        teamColors[teamName] = getCalendarColor(colorValue);
      }
    }
    
    requestedTeams.forEach(function(team) {
      if (!teamColors[team]) {
        teamColors[team] = CalendarApp.EventColor.BLUE;
      }
    });
    
    return teamColors;
    
  } catch (error) {
    console.error('Error loading team colors:', error);
    return {};
  }
}

function getCalendarColor(colorHex) {
  const colorNameMap = {
    'PALE_BLUE': CalendarApp.EventColor.PALE_BLUE,
    'PALE_GREEN': CalendarApp.EventColor.PALE_GREEN,
    'MAUVE': CalendarApp.EventColor.MAUVE,
    'PALE_RED': CalendarApp.EventColor.PALE_RED,
    'YELLOW': CalendarApp.EventColor.YELLOW,
    'ORANGE': CalendarApp.EventColor.ORANGE,
    'CYAN': CalendarApp.EventColor.CYAN,
    'GRAY': CalendarApp.EventColor.GRAY,
    'BLUE': CalendarApp.EventColor.BLUE,
    'GREEN': CalendarApp.EventColor.GREEN,
    'RED': CalendarApp.EventColor.RED
  };
  
  const colorUpper = String(colorHex).toUpperCase();
  if (colorNameMap[colorUpper]) {
    return colorNameMap[colorUpper];
  }
  
  if (colorHex && colorHex.toString().startsWith('#')) {
    return hexToCalendarColor(colorHex);
  }
  
  return CalendarApp.EventColor.BLUE;
}

function hexToCalendarColor(hexColor) {
  const inputRGB = hexToRGB(hexColor);
  if (!inputRGB) {
    return CalendarApp.EventColor.BLUE;
  }
  
  const calendarColors = [
    { name: 'PALE_BLUE', color: CalendarApp.EventColor.PALE_BLUE, rgb: {r: 161, g: 194, b: 250} },
    { name: 'PALE_GREEN', color: CalendarApp.EventColor.PALE_GREEN, rgb: {r: 183, g: 225, b: 205} },
    { name: 'MAUVE', color: CalendarApp.EventColor.MAUVE, rgb: {r: 162, g: 137, b: 209} },
    { name: 'PALE_RED', color: CalendarApp.EventColor.PALE_RED, rgb: {r: 244, g: 164, b: 164} },
    { name: 'YELLOW', color: CalendarApp.EventColor.YELLOW, rgb: {r: 251, g: 233, b: 131} },
    { name: 'ORANGE', color: CalendarApp.EventColor.ORANGE, rgb: {r: 255, g: 183, b: 134} },
    { name: 'CYAN', color: CalendarApp.EventColor.CYAN, rgb: {r: 137, g: 218, b: 235} },
    { name: 'GRAY', color: CalendarApp.EventColor.GRAY, rgb: {r: 158, g: 158, b: 158} },
    { name: 'BLUE', color: CalendarApp.EventColor.BLUE, rgb: {r: 66, g: 133, b: 244} },
    { name: 'GREEN', color: CalendarApp.EventColor.GREEN, rgb: {r: 51, g: 182, b: 121} },
    { name: 'RED', color: CalendarApp.EventColor.RED, rgb: {r: 234, g: 67, b: 53} }
  ];
  
  let closestColor = calendarColors[0];
  let minDistance = colorDistance(inputRGB, calendarColors[0].rgb);
  
  for (let i = 1; i < calendarColors.length; i++) {
    const distance = colorDistance(inputRGB, calendarColors[i].rgb);
    if (distance < minDistance) {
      minDistance = distance;
      closestColor = calendarColors[i];
    }
  }
  
  return closestColor.color;
}

function hexToRGB(hex) {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16)
  } : null;
}

function colorDistance(rgb1, rgb2) {
  return Math.sqrt(
    Math.pow(rgb1.r - rgb2.r, 2) +
    Math.pow(rgb1.g - rgb2.g, 2) +
    Math.pow(rgb1.b - rgb2.b, 2)
  );
}

// ===== TEST FUNCTIONS =====

/**
 * 🧪 ทดสอบการเลื่อนตรวจ + เปลี่ยนทีม (ส่งอีเมลหาทั้งทีมเก่าและทีมใหม่)
 */
function testPostponeWithTeamChange() {
  Logger.log('🧪 TEST: Postpone with Team Change');
  Logger.log('='.repeat(50));
  
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  const tomorrowStr = tomorrow.toISOString().split('T')[0];
  
  const testData = {
    rfiNumber: '10-RFI-0022',
    description: 'test',
    newDate: tomorrowStr,
    newStartTime: '14:00',
    newEndTime: '16:00',
    postponeReason: '🧪 ทดสอบระบบ - แจ้งทีมเก่าว่าถูกเปลี่ยน',
    requesterEmail: 'setthawut.se11@gmail.com',
    newLocation: 'สถานที่ทดสอบใหม่',
    newTeam: 'Survey Team B, Lab Team B',  // ⭐ ทีมใหม่
    sendEmail: true,
    searchDays: 30
  };
  
  Logger.log(`📅 Date: ${testData.newDate}`);
  Logger.log(`🕐 Time: ${testData.newStartTime} - ${testData.newEndTime}`);
  Logger.log(`👥 NEW Team: ${testData.newTeam}`);
  Logger.log('');
  
  const result = postponeRFIInspection(
    testData.rfiNumber,
    testData.description,
    testData.newDate,
    testData.newStartTime,
    testData.newEndTime,
    testData.postponeReason,
    testData.requesterEmail,
    '',
    testData.newLocation,
    testData.newTeam,
    testData.sendEmail,
    testData.searchDays
  );
  
  Logger.log('\n' + '='.repeat(50));
  Logger.log('📊 TEST RESULT:');
  Logger.log('='.repeat(50));
  Logger.log(`✅ Success: ${result.success}`);
  Logger.log(`📅 Events: ${result.rfiEventsUpdated}/${result.rfiEventsFound}`);
  Logger.log(`👥 OLD Team: ${result.originalTeam || 'N/A'} → ⚠️ แจ้งแล้ว`);
  Logger.log(`👥 NEW Team: ${testData.newTeam} → ✅ แจ้งแล้ว`);
  Logger.log(`📧 Email Sent: ${result.emailsSent}`);
  Logger.log(`💬 Message: ${result.message}`);
  
  if (result.error) {
    Logger.log(`\n❌ Error: ${result.error}`);
  }
  
  Logger.log('\n📧 Expected Email Recipients:');
  Logger.log('  1. 👤 Requester');
  Logger.log('  2. 👥 OLD Team → ⚠️ แจ้งว่าถูกเปลี่ยน');
  Logger.log('  3. 👥 NEW Team → ✅ แจ้งการมอบหมาย');
  Logger.log('='.repeat(50));
}

/**
 * 🧪 ทดสอบส่วนต่างๆ แยกกัน
 */
function testExtractTeamFromTitle() {
  const testTitles = [
    'RFI #10-RFI-0022 [Survey Team A]',
    'RFI #10-RFI-0023 [Lab Team B, Inspector Team A]',
    'RFI #10-RFI-0024'
  ];
  
  Logger.log('🧪 TEST: Extract Team from Title');
  testTitles.forEach(title => {
    const team = extractInspectorFromTitle(title);
    Logger.log(`"${title}" → Team: "${team}"`);
  });
}
