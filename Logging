// ===== Logging & Error Tracking System =====
// File: Logging.gs
// Description: System ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Performance, Errors ‡πÅ‡∏•‡∏∞ Team Assignments

/**
 * ‚öôÔ∏è Config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Logging System
 */
var LOGGING_CONFIG = {
  enabled: true,                    // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î logging
  errorTracking: true,              // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î error tracking
  performanceTracking: true,        // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î performance tracking
  maxLogAge: 30,                    // ‡πÄ‡∏Å‡πá‡∏ö log ‡πÑ‡∏ß‡πâ 30 ‡∏ß‡∏±‡∏ô
  maxErrorAge: 90,                  // ‡πÄ‡∏Å‡πá‡∏ö error ‡πÑ‡∏ß‡πâ 90 ‡∏ß‡∏±‡∏ô
  logSlowQueries: true,             // log queries ‡∏ó‡∏µ‡πà‡∏ä‡πâ‡∏≤
  slowQueryThreshold: 500           // ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 500ms
};

/**
 * üìù Log ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
 */
function logFunctionCall(functionName, params, duration, result) {
  try {
    const config = getLoggingConfig();  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å LOGGING_CONFIG
    
    if (!config.enabled) return;
    
    // ... rest of code ...
    
    // Log ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ slow queries ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
    if (config.logSlowQueries && duration < config.slowQueryThreshold) {
      return;
    }
    
    // ... rest of code ...
    
    cleanupOldLogs(sheet, config.maxLogAge);
    
  } catch (error) {
    console.error('Failed to log function call:', error);
  }
}

/**
 * üêõ Log errors
 */
function logError(functionName, error, context) {
  try {
    const config = getLoggingConfig();  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å LOGGING_CONFIG
    
    if (!config.errorTracking) return;
    
    // ... rest of code ...
    
    cleanupOldLogs(sheet, config.maxErrorAge);
    
    // ... rest of code ...
    
  } catch (logError) {
    console.error('Failed to log error:', logError);
  }
}

/**
 * üìä Log ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡∏°
 */
function logTeamAssignment(rfiId, teamNames, date, startTime, endTime, category) {
  try {
    const config = getLoggingConfig();  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å LOGGING_CONFIG
    
    if (!config.enabled) return;
    
    // ... rest of code ...
    
    cleanupOldLogs(sheet, config.maxLogAge);
    
  } catch (error) {
    console.error('Failed to log team assignment:', error);
  }
}

/**
 * üéØ Wrapper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö track performance
 */
function trackPerformance(functionName, params, callback) {
  const startTime = new Date().getTime();
  let result = null;
  let error = null;
  
  try {
    result = callback();
    return result;
  } catch (err) {
    error = err;
    logError(functionName, err, params);
    throw err;
  } finally {
    const endTime = new Date().getTime();
    const duration = endTime - startTime;
    
    const config = getLoggingConfig();  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å LOGGING_CONFIG
    
    if (!error && config.performanceTracking) {
      logFunctionCall(functionName, params, duration, result);
    }
  }
}

/**
 * üêõ Log errors
 */
function logError(functionName, error, context) {
  try {
    if (!LOGGING_CONFIG.errorTracking) return;
    
    const sheet = getOrCreateSheet('Error_Log', [
      'Timestamp',
      'Function',
      'Error Message',
      'Error Stack',
      'User',
      'Context',
      'Severity'
    ]);
    
    const user = Session.getActiveUser().getEmail();
    const errorMessage = error.toString();
    const errorStack = error.stack || '';
    const severity = determineSeverity(error);
    
    sheet.appendRow([
      new Date(),
      functionName,
      errorMessage,
      errorStack.substring(0, 500),
      user,
      JSON.stringify(context).substring(0, 200),
      severity
    ]);
    
    // Auto cleanup old errors
    cleanupOldLogs(sheet, LOGGING_CONFIG.maxErrorAge);
    
    // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤ error ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    if (severity === 'Critical') {
      notifyAdminAboutError(functionName, errorMessage);
    }
    
  } catch (logError) {
    console.error('Failed to log error:', logError);
  }
}



/**
 * üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏î‡∏∂‡∏á Sheet (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà)
 */
function getOrCreateSheet(sheetName, headers) {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = spreadsheet.getSheetByName(sheetName);
  
  if (!sheet) {
    sheet = spreadsheet.insertSheet(sheetName);
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ headers
    if (headers && headers.length > 0) {
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      
      const headerRange = sheet.getRange(1, 1, 1, headers.length);
      headerRange.setFontWeight('bold');
      headerRange.setBackground('#1877f2');
      headerRange.setFontColor('#ffffff');
      headerRange.setHorizontalAlignment('center');
      
      sheet.setFrozenRows(1);
      
      // Auto resize columns
      for (let i = 1; i <= headers.length; i++) {
        sheet.autoResizeColumn(i);
      }
    }
  }
  
  return sheet;
}

/**
 * üßπ ‡∏•‡∏ö logs ‡πÄ‡∏Å‡πà‡∏≤
 */
function cleanupOldLogs(sheet, maxAgeDays) {
  try {
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) return; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    
    const data = sheet.getRange(2, 1, lastRow - 1, 1).getValues();
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - maxAgeDays);
    
    let rowsToDelete = [];
    
    for (let i = 0; i < data.length; i++) {
      const timestamp = new Date(data[i][0]);
      if (timestamp < cutoffDate) {
        rowsToDelete.push(i + 2); // +2 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ header + index 0
      }
    }
    
    // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô
    rowsToDelete.reverse();
    rowsToDelete.forEach(function(rowIndex) {
      sheet.deleteRow(rowIndex);
    });
    
    if (rowsToDelete.length > 0) {
      console.log('Cleaned up ' + rowsToDelete.length + ' old logs from ' + sheet.getName());
    }
    
  } catch (error) {
    console.error('Failed to cleanup old logs:', error);
  }
}

/**
 * ‚ö†Ô∏è ‡∏Å‡∏≥‡∏´‡∏ô‡∏î severity ‡∏Ç‡∏≠‡∏á error
 */
function determineSeverity(error) {
  const errorStr = error.toString().toLowerCase();
  
  if (errorStr.includes('permission') || 
      errorStr.includes('quota') || 
      errorStr.includes('limit exceeded')) {
    return 'Critical';
  }
  
  if (errorStr.includes('not found') || 
      errorStr.includes('invalid')) {
    return 'Warning';
  }
  
  return 'Info';
}

/**
 * üìß ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Admin ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î Critical Error
 */
function notifyAdminAboutError(functionName, errorMessage) {
  try {
    const adminEmails = getAdminEmails();
    if (adminEmails.length === 0) return;
    
    const subject = 'üö® Critical Error in RFI System';
    const body = 
      'Critical error occurred in RFI System:\n\n' +
      'Function: ' + functionName + '\n' +
      'Error: ' + errorMessage + '\n' +
      'Time: ' + new Date().toLocaleString('th-TH') + '\n\n' +
      'Please check the Error_Log sheet for details.';
    
    const quota = MailApp.getRemainingDailyQuota();
    if (quota > 0) {
      MailApp.sendEmail({
        to: adminEmails.join(','),
        subject: subject,
        body: body
      });
    }
    
  } catch (error) {
    console.error('Failed to notify admin:', error);
  }
}

/**
 * ‚úÖ UPDATED: getAdminEmails() ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ fallback
 */
function getAdminEmails() {
  try {
    const userSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('User');
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Sheet User ‚Üí ‡πÉ‡∏ä‡πâ email ‡∏à‡∏≤‡∏Å Config
    if (!userSheet) {
      console.log('No User sheet found, using fallback admin emails');
      return getFallbackAdminEmails();
    }
    
    const lastRow = userSheet.getLastRow();
    if (lastRow <= 1) {
      console.log('No users found, using fallback admin emails');
      return getFallbackAdminEmails();
    }
    
    const data = userSheet.getRange(2, 2, lastRow - 1, 4).getValues();
    const adminEmails = [];
    
    data.forEach(function(row) {
      const email = String(row[0] || '').trim();
      const role = String(row[2] || '').trim();
      const status = String(row[3] || '').trim();
      
      if (role === 'Admin' && status === 'Activated' && email) {
        adminEmails.push(email);
      }
    });
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Admin ‚Üí ‡πÉ‡∏ä‡πâ fallback
    if (adminEmails.length === 0) {
      console.log('No active admins found, using fallback admin emails');
      return getFallbackAdminEmails();
    }
    
    return adminEmails;
    
  } catch (error) {
    console.error('Error getting admin emails:', error);
    return getFallbackAdminEmails();
  }
}

/**
 * üîß Fallback Admin Emails (‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ Sheet User)
 */
function getFallbackAdminEmails() {
  // ‚ö†Ô∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô email ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
  return [
    'setthawut.itd@gmail.com'
    
  ];
}

/**
 * üßπ ‡∏•‡πâ‡∏≤‡∏á Logs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
function clearAllLogs() {
  const ui = SpreadsheetApp.getUi();
  const response = ui.alert(
    '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Logs',
    '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö Logs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n' +
    '‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ',
    ui.ButtonSet.YES_NO
  );
  
  if (response !== ui.Button.YES) {
    return;
  }
  
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const logSheets = ['Performance_Log', 'Error_Log', 'Team_Assignment_Log'];
  
  logSheets.forEach(function(sheetName) {
    const sheet = ss.getSheetByName(sheetName);
    if (sheet && sheet.getLastRow() > 1) {
      sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).clearContent();
      console.log('Cleared ' + sheetName);
    }
  });
  
  ui.alert(
    '‡∏•‡∏ö Logs ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
    '‡∏•‡∏ö Logs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
    ui.ButtonSet.OK
  );
}

/**
 * ‚öôÔ∏è ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Logging (‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà)
 */
function toggleLogging() {
  const config = getLoggingConfig();
  const newState = !config.enabled;
  
  setLoggingConfig('logging_enabled', newState);
  
  const ui = SpreadsheetApp.getUi();
  ui.alert(
    'Logging ' + (newState ? 'Enabled' : 'Disabled'),
    'Logging is now ' + (newState ? 'ON ‚úÖ' : 'OFF ‚ùå') + '\n\n' +
    '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏°‡πâ‡∏õ‡∏¥‡∏î Spreadsheet',
    ui.ButtonSet.OK
  );
}

/**
 * ‚öôÔ∏è ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Error Tracking
 */
function toggleErrorTracking() {
  const config = getLoggingConfig();
  const newState = !config.errorTracking;
  
  setLoggingConfig('error_tracking', newState);
  
  const ui = SpreadsheetApp.getUi();
  ui.alert(
    'Error Tracking ' + (newState ? 'Enabled' : 'Disabled'),
    'Error Tracking is now ' + (newState ? 'ON ‚úÖ' : 'OFF ‚ùå'),
    ui.ButtonSet.OK
  );
}

/**
 * ‚öôÔ∏è ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Performance Tracking
 */
function togglePerformanceTracking() {
  const config = getLoggingConfig();
  const newState = !config.performanceTracking;
  
  setLoggingConfig('performance_tracking', newState);
  
  const ui = SpreadsheetApp.getUi();
  ui.alert(
    'Performance Tracking ' + (newState ? 'Enabled' : 'Disabled'),
    'Performance Tracking is now ' + (newState ? 'ON ‚úÖ' : 'OFF ‚ùå'),
    ui.ButtonSet.OK
  );
}

/**
 * üìä ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 */
function viewLoggingSettings() {
  const config = getLoggingConfig();
  
  const message = 
    '‚öôÔ∏è Logging Settings\n\n' +
    'Logging: ' + (config.enabled ? '‚úÖ ON' : '‚ùå OFF') + '\n' +
    'Error Tracking: ' + (config.errorTracking ? '‚úÖ ON' : '‚ùå OFF') + '\n' +
    'Performance Tracking: ' + (config.performanceTracking ? '‚úÖ ON' : '‚ùå OFF') + '\n' +
    'Log Slow Queries: ' + (config.logSlowQueries ? '‚úÖ ON' : '‚ùå OFF') + '\n\n' +
    'Max Log Age: ' + config.maxLogAge + ' days\n' +
    'Max Error Age: ' + config.maxErrorAge + ' days\n' +
    'Slow Query Threshold: ' + config.slowQueryThreshold + ' ms';
  
  SpreadsheetApp.getUi().alert('Logging Settings', message, SpreadsheetApp.getUi().ButtonSet.OK);
}

/**
 * ‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Slow Query Threshold
 */
function setSlowQueryThreshold() {
  const ui = SpreadsheetApp.getUi();
  const config = getLoggingConfig();
  
  const response = ui.prompt(
    'Set Slow Query Threshold',
    'Enter threshold in milliseconds (current: ' + config.slowQueryThreshold + 'ms):',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (response.getSelectedButton() === ui.Button.OK) {
    const value = parseInt(response.getResponseText());
    
    if (isNaN(value) || value < 0) {
      ui.alert('Error', 'Please enter a valid number', ui.ButtonSet.OK);
      return;
    }
    
    setLoggingConfig('slow_query_threshold', value);
    ui.alert('Success', 'Slow Query Threshold set to ' + value + 'ms', ui.ButtonSet.OK);
  }
}

/**
 * üìù ‡∏î‡∏π Performance Logs
 */
function viewPerformanceLogs() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Performance_Log');
  if (sheet) {
    SpreadsheetApp.setActiveSheet(sheet);
  } else {
    SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö Performance Logs');
  }
}

/**
 * üêõ ‡∏î‡∏π Error Logs
 */
function viewErrorLogs() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Error_Log');
  if (sheet) {
    SpreadsheetApp.setActiveSheet(sheet);
  } else {
    SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö Error Logs');
  }
}

/**
 * üë• ‡∏î‡∏π Team Assignment Logs
 */
function viewTeamLogs() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Team_Assignment_Log');
  if (sheet) {
    SpreadsheetApp.setActiveSheet(sheet);
  } else {
    SpreadsheetApp.getUi().alert('‡πÑ‡∏°‡πà‡∏û‡∏ö Team Assignment Logs');
  }
}

// ===== Logging Configuration =====
// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global ‡πÄ‡∏õ‡πá‡∏ô function

/**
 * ‚öôÔ∏è ‡∏î‡∏∂‡∏á Logging Config (‡∏à‡∏≤‡∏Å PropertiesService)
 */
function getLoggingConfig() {
  const props = PropertiesService.getScriptProperties();
  
  return {
    enabled: props.getProperty('logging_enabled') !== 'false',  // default: true
    errorTracking: props.getProperty('error_tracking') !== 'false',
    performanceTracking: props.getProperty('performance_tracking') !== 'false',
    maxLogAge: parseInt(props.getProperty('max_log_age') || '30'),
    maxErrorAge: parseInt(props.getProperty('max_error_age') || '90'),
    logSlowQueries: props.getProperty('log_slow_queries') !== 'false',
    slowQueryThreshold: parseInt(props.getProperty('slow_query_threshold') || '500')
  };
}

/**
 * üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Logging Config
 */
function setLoggingConfig(key, value) {
  const props = PropertiesService.getScriptProperties();
  props.setProperty(key, String(value));
}

/**
 * üîÑ Reset Logging Config ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
 */
function resetLoggingConfig() {
  const props = PropertiesService.getScriptProperties();
  props.setProperty('logging_enabled', 'true');
  props.setProperty('error_tracking', 'true');
  props.setProperty('performance_tracking', 'true');
  props.setProperty('max_log_age', '30');
  props.setProperty('max_error_age', '90');
  props.setProperty('log_slow_queries', 'true');
  props.setProperty('slow_query_threshold', '500');
  
  console.log('‚úÖ Logging config reset to defaults');
}


// ===== Test Functions for Logging System =====
// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå Logging.gs

/**
 * üß™ Test Logging System ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
function testLoggingSystem() {
  console.log('========== Test Logging System ==========');
  
  const ui = SpreadsheetApp.getUi();
  const response = ui.alert(
    'Test Logging System',
    '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Logging ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n' +
    '‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á:\n' +
    '‚úì Performance Logs (3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)\n' +
    '‚úì Error Logs (3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)\n' +
    '‚úì Team Assignment Logs (2 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)',
    ui.ButtonSet.YES_NO
  );
  
  if (response !== ui.Button.YES) {
    return;
  }
  
  const results = {
    performanceLogs: 0,
    errorLogs: 0,
    teamLogs: 0,
    errors: []
  };
  
  try {
    // 1. Test Performance Logging
    console.log('\n1. Testing Performance Logging...');
    results.performanceLogs = testPerformanceLogging();
    
    // 2. Test Error Logging
    console.log('\n2. Testing Error Logging...');
    results.errorLogs = testErrorLogging();
    
    // 3. Test Team Assignment Logging
    console.log('\n3. Testing Team Assignment Logging...');
    results.teamLogs = testTeamAssignmentLogging();
    
    // 4. Test Cleanup
    console.log('\n4. Testing Log Cleanup...');
    testLogCleanup();
    
    // 5. Test Config
    console.log('\n5. Testing Config Management...');
    testConfigManagement();
    
    console.log('\n========== Test Complete ==========');
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const message = 
      '‚úÖ Test Logging System ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô\n\n' +
      'Performance Logs ‡∏™‡∏£‡πâ‡∏≤‡∏á: ' + results.performanceLogs + ' ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n' +
      'Error Logs ‡∏™‡∏£‡πâ‡∏≤‡∏á: ' + results.errorLogs + ' ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n' +
      'Team Logs ‡∏™‡∏£‡πâ‡∏≤‡∏á: ' + results.teamLogs + ' ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n' +
      '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Sheets:\n' +
      '- Performance_Log\n' +
      '- Error_Log\n' +
      '- Team_Assignment_Log';
    
    ui.alert('Test Complete', message, ui.ButtonSet.OK);
    
    // ‡πÄ‡∏õ‡∏¥‡∏î Performance_Log
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Performance_Log');
    if (sheet) {
      SpreadsheetApp.setActiveSheet(sheet);
    }
    
  } catch (error) {
    console.error('Test failed:', error);
    ui.alert('Test Failed', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n' + error.toString(), ui.ButtonSet.OK);
  }
}

/**
 * üß™ Test 1: Performance Logging
 */
function testPerformanceLogging() {
  console.log('Testing Performance Logging...');
  
  let count = 0;
  
  // Test 1: Fast query
  logFunctionCall('testFastQuery', {test: 'data'}, 150, {success: true, message: 'Fast query test'});
  count++;
  console.log('‚úÖ Test fast query logged');
  
  // Test 2: Slow query
  logFunctionCall('testSlowQuery', {test: 'data'}, 850, {success: true, message: 'Slow query test'});
  count++;
  console.log('‚úÖ Test slow query logged');
  
  // Test 3: Failed query
  logFunctionCall('testFailedQuery', {test: 'data'}, 300, {success: false, message: 'Query failed'});
  count++;
  console.log('‚úÖ Test failed query logged');
  
  // Test 4: ‡πÉ‡∏ä‡πâ trackPerformance wrapper
  const result = trackPerformance('testTrackPerformance', {param1: 'value1'}, function() {
    Utilities.sleep(100); // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    return {success: true, message: 'Wrapper test'};
  });
  count++;
  console.log('‚úÖ Test trackPerformance wrapper logged');
  
  console.log('Total performance logs created: ' + count);
  return count;
}

/**
 * üß™ Test 2: Error Logging
 */
function testErrorLogging() {
  console.log('Testing Error Logging...');
  
  let count = 0;
  
  // Test 1: Info error
  const infoError = new Error('This is an info error for testing');
  logError('testInfoError', infoError, {context: 'test', severity: 'info'});
  count++;
  console.log('‚úÖ Test info error logged');
  
  // Test 2: Warning error
  const warningError = new Error('Test not found error');
  logError('testWarningError', warningError, {context: 'test', type: 'validation'});
  count++;
  console.log('‚úÖ Test warning error logged');
  
  // Test 3: Critical error (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á)
  const criticalError = new Error('Test permission denied error');
  
  // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
  const originalNotify = this.notifyAdminAboutError;
  this.notifyAdminAboutError = function() {
    console.log('üìß Email notification skipped (test mode)');
  };
  
  logError('testCriticalError', criticalError, {context: 'test', type: 'critical'});
  count++;
  console.log('‚úÖ Test critical error logged');
  
  // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°
  this.notifyAdminAboutError = originalNotify;
  
  console.log('Total error logs created: ' + count);
  return count;
}

/**
 * üß™ Test 3: Team Assignment Logging
 */
function testTeamAssignmentLogging() {
  console.log('Testing Team Assignment Logging...');
  
  let count = 0;
  
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  const testDate = tomorrow.toISOString().split('T')[0];
  
  // Test 1: Single team
  logTeamAssignment(
    'TEST-RFI-001',
    'Survey Team A',
    testDate,
    '09:00',
    '11:00',
    'Survey Work'
  );
  count++;
  console.log('‚úÖ Test single team assignment logged');
  
  // Test 2: Multiple teams
  logTeamAssignment(
    'TEST-RFI-002',
    'Survey Team A,Lab Team B',
    testDate,
    '14:00',
    '16:00',
    'Survey,Lab'
  );
  count++;
  console.log('‚úÖ Test multiple team assignment logged');
  
  console.log('Total team assignment logs created: ' + count);
  return count;
}

/**
 * üß™ Test 4: Log Cleanup
 */
function testLogCleanup() {
  console.log('Testing Log Cleanup...');
  
  const perfSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Performance_Log');
  
  if (!perfSheet || perfSheet.getLastRow() <= 1) {
    console.log('‚ö†Ô∏è No performance logs to cleanup');
    return;
  }
  
  const beforeRows = perfSheet.getLastRow() - 1; // ‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö header
  console.log('Rows before cleanup: ' + beforeRows);
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° log ‡πÄ‡∏Å‡πà‡∏≤‡∏°‡∏≤‡∏Å (100 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô)
  const oldDate = new Date();
  oldDate.setDate(oldDate.getDate() - 100);
  
  perfSheet.appendRow([
    oldDate,
    'testOldFunction',
    250,
    'Success',
    Session.getActiveUser().getEmail(),
    '{}',
    'Old test log'
  ]);
  
  console.log('Added 1 old log (100 days ago)');
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö cleanup (‡∏à‡∏∞‡∏•‡∏ö log ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ maxLogAge ‡∏ß‡∏±‡∏ô)
  const config = getLoggingConfig();
  cleanupOldLogs(perfSheet, config.maxLogAge);
  
  const afterRows = perfSheet.getLastRow() - 1;
  console.log('Rows after cleanup: ' + afterRows);
  
  if (afterRows < beforeRows + 1) {
    console.log('‚úÖ Old log cleaned up successfully');
  } else {
    console.log('‚ÑπÔ∏è No logs were old enough to clean up');
  }
}

/**
 * üß™ Test 5: Config Management
 */
function testConfigManagement() {
  console.log('Testing Config Management...');
  
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
  const originalConfig = getLoggingConfig();
  console.log('Original config:', JSON.stringify(originalConfig));
  
  // Test: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤
  setLoggingConfig('logging_enabled', false);
  const config1 = getLoggingConfig();
  console.log('After disable:', config1.enabled);
  
  if (!config1.enabled) {
    console.log('‚úÖ Config change successful');
  }
  
  // Test: Reset
  resetLoggingConfig();
  const config2 = getLoggingConfig();
  console.log('After reset:', config2.enabled);
  
  if (config2.enabled) {
    console.log('‚úÖ Config reset successful');
  }
  
  // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
  Object.keys(originalConfig).forEach(function(key) {
    const propKey = key.replace(/([A-Z])/g, '_$1').toLowerCase();
    setLoggingConfig(propKey, originalConfig[key]);
  });
  
  console.log('‚úÖ Config restored to original values');
}

/**
 * üß™ Test ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• Admin (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
 */
function testAdminEmailNotification() {
  console.log('========== Test Admin Email Notification ==========');
  
  const ui = SpreadsheetApp.getUi();
  const response = ui.alert(
    'Test Admin Email',
    '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á Admin ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n' +
    '‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á!',
    ui.ButtonSet.YES_NO
  );
  
  if (response !== ui.Button.YES) {
    console.log('Test cancelled');
    return;
  }
  
  try {
    // ‡∏î‡∏∂‡∏á admin emails
    const adminEmails = getAdminEmails();
    console.log('Admin emails found:', adminEmails);
    
    if (adminEmails.length === 0) {
      ui.alert(
        '‡πÑ‡∏°‡πà‡∏û‡∏ö Admin',
        '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏• Admin ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n\n' +
        '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:\n' +
        '1. Sheet "User" ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà\n' +
        '2. ‡∏°‡∏µ User ‡∏ó‡∏µ‡πà Role = "Admin" ‡πÅ‡∏•‡∏∞ Status = "Activated"\n' +
        '3. ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Fallback Emails ‡πÉ‡∏ô getFallbackAdminEmails()',
        ui.ButtonSet.OK
      );
      return;
    }
    
    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    notifyAdminAboutError('testAdminEmailNotification', 'This is a test critical error');
    
    console.log('‚úÖ Test email sent to:', adminEmails.join(', '));
    
    ui.alert(
      'Test Email Sent',
      '‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà:\n' + adminEmails.join('\n') + '\n\n' +
      '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Admin',
      ui.ButtonSet.OK
    );
    
  } catch (error) {
    console.error('Test failed:', error);
    ui.alert(
      'Test Failed',
      '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏î‡πâ:\n' + error.toString(),
      ui.ButtonSet.OK
    );
  }
}

/**
 * üß™ Test Logging ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
 */
function testLoggingWhenDisabled() {
  console.log('========== Test Logging When Disabled ==========');
  
  const ui = SpreadsheetApp.getUi();
  
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
  const originalConfig = getLoggingConfig();
  
  try {
    // ‡∏õ‡∏¥‡∏î logging
    setLoggingConfig('logging_enabled', false);
    console.log('Logging disabled');
    
    // ‡∏•‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log (‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)
    const perfSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Performance_Log');
    const beforeRows = perfSheet ? perfSheet.getLastRow() : 0;
    
    logFunctionCall('testWhenDisabled', {test: 'data'}, 200, {success: true});
    
    const afterRows = perfSheet ? perfSheet.getLastRow() : 0;
    
    if (beforeRows === afterRows) {
      console.log('‚úÖ Logging correctly disabled - no new logs added');
      ui.alert(
        'Test Passed',
        'Logging ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡πÑ‡∏°‡πà‡∏°‡∏µ logs ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
        ui.ButtonSet.OK
      );
    } else {
      console.log('‚ùå Logging still active - logs were added');
      ui.alert(
        'Test Failed',
        'Logging ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß',
        ui.ButtonSet.OK
      );
    }
    
  } finally {
    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
    setLoggingConfig('logging_enabled', originalConfig.enabled);
    console.log('Logging restored to:', originalConfig.enabled);
  }
}

/**
 * üß™ Test Slow Query Detection
 */
function testSlowQueryDetection() {
  console.log('========== Test Slow Query Detection ==========');
  
  const config = getLoggingConfig();
  const threshold = config.slowQueryThreshold;
  
  console.log('Current slow query threshold:', threshold + 'ms');
  
  // Test 1: Fast query (‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£ log ‡∏ñ‡πâ‡∏≤ logSlowQueries = true)
  const perfSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Performance_Log');
  const beforeRows = perfSheet ? perfSheet.getLastRow() : 0;
  
  logFunctionCall('testFastQuery', {}, threshold - 100, {success: true});
  
  const afterRows1 = perfSheet ? perfSheet.getLastRow() : 0;
  
  if (config.logSlowQueries && afterRows1 === beforeRows) {
    console.log('‚úÖ Fast query not logged (correct behavior)');
  } else if (!config.logSlowQueries && afterRows1 > beforeRows) {
    console.log('‚úÖ Fast query logged (logSlowQueries disabled)');
  }
  
  // Test 2: Slow query (‡∏Ñ‡∏ß‡∏£ log ‡πÄ‡∏™‡∏°‡∏≠)
  logFunctionCall('testSlowQuery', {}, threshold + 100, {success: true});
  
  const afterRows2 = perfSheet ? perfSheet.getLastRow() : 0;
  
  if (afterRows2 > afterRows1) {
    console.log('‚úÖ Slow query logged (correct behavior)');
  }
  
  const ui = SpreadsheetApp.getUi();
  ui.alert(
    'Test Complete',
    'Slow Query Detection Test ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô\n\n' +
    'Threshold: ' + threshold + 'ms\n' +
    'logSlowQueries: ' + config.logSlowQueries + '\n\n' +
    '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Performance_Log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå',
    ui.ButtonSet.OK
  );
}

/**
 * üß™ Test ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (Comprehensive Test)
 */
function runComprehensiveLoggingTest() {
  console.log('========== Comprehensive Logging Test ==========');
  
  const ui = SpreadsheetApp.getUi();
  const response = ui.alert(
    'Comprehensive Test',
    '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Logging ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?\n\n' +
    '‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏ß‡∏°:\n' +
    '1. Performance Logging\n' +
    '2. Error Logging\n' +
    '3. Team Assignment Logging\n' +
    '4. Config Management\n' +
    '5. Cleanup System\n' +
    '6. Slow Query Detection\n\n' +
    '‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 5-10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
    ui.ButtonSet.YES_NO
  );
  
  if (response !== ui.Button.YES) {
    return;
  }
  
  const startTime = new Date().getTime();
  const results = [];
  
  try {
    // Test 1
    console.log('\nüìù Test 1/6: Performance Logging...');
    const perfCount = testPerformanceLogging();
    results.push('‚úÖ Performance Logs: ' + perfCount + ' created');
    
    // Test 2
    console.log('\nüêõ Test 2/6: Error Logging...');
    const errorCount = testErrorLogging();
    results.push('‚úÖ Error Logs: ' + errorCount + ' created');
    
    // Test 3
    console.log('\nüë• Test 3/6: Team Assignment Logging...');
    const teamCount = testTeamAssignmentLogging();
    results.push('‚úÖ Team Logs: ' + teamCount + ' created');
    
    // Test 4
    console.log('\n‚öôÔ∏è Test 4/6: Config Management...');
    testConfigManagement();
    results.push('‚úÖ Config Management: Passed');
    
    // Test 5
    console.log('\nüßπ Test 5/6: Cleanup System...');
    testLogCleanup();
    results.push('‚úÖ Cleanup System: Passed');
    
    // Test 6
    console.log('\nüêå Test 6/6: Slow Query Detection...');
    const config = getLoggingConfig();
    logFunctionCall('testFast', {}, 100, {success: true});
    logFunctionCall('testSlow', {}, 900, {success: true});
    results.push('‚úÖ Slow Query Detection: Passed');
    
    const endTime = new Date().getTime();
    const duration = ((endTime - startTime) / 1000).toFixed(2);
    
    console.log('\n========== Test Complete ==========');
    console.log('Duration:', duration + 's');
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const message = 
      'üéâ Comprehensive Test ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!\n\n' +
      results.join('\n') + '\n\n' +
      '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: ' + duration + ' ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n\n' +
      '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Sheets:\n' +
      '- Performance_Log\n' +
      '- Error_Log\n' +
      '- Team_Assignment_Log';
    
    ui.alert('Test Complete ‚úÖ', message, ui.ButtonSet.OK);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard
    const createDashboard = ui.alert(
      'Create Dashboard?',
      '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      ui.ButtonSet.YES_NO
    );
    
    if (createDashboard === ui.Button.YES) {
      createPerformanceDashboard();
    }
    
  } catch (error) {
    console.error('Test failed:', error);
    
    const endTime = new Date().getTime();
    const duration = ((endTime - startTime) / 1000).toFixed(2);
    
    ui.alert(
      'Test Failed ‚ùå',
      '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n' + error.toString() + '\n\n' +
      'Results so far:\n' + results.join('\n') + '\n\n' +
      'Duration: ' + duration + 's',
      ui.ButtonSet.OK
    );
  }
}

/**
 * üß™ ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Logging ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 */
function viewLoggingStatus() {
  const config = getLoggingConfig();
  
  const perfSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Performance_Log');
  const errorSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Error_Log');
  const teamSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Team_Assignment_Log');
  
  const perfCount = perfSheet ? perfSheet.getLastRow() - 1 : 0;
  const errorCount = errorSheet ? errorSheet.getLastRow() - 1 : 0;
  const teamCount = teamSheet ? teamSheet.getLastRow() - 1 : 0;
  
  const adminEmails = getAdminEmails();
  
  const message = 
    'üìä Logging System Status\n\n' +
    '‚öôÔ∏è Configuration:\n' +
    'Logging: ' + (config.enabled ? '‚úÖ ON' : '‚ùå OFF') + '\n' +
    'Error Tracking: ' + (config.errorTracking ? '‚úÖ ON' : '‚ùå OFF') + '\n' +
    'Performance Tracking: ' + (config.performanceTracking ? '‚úÖ ON' : '‚ùå OFF') + '\n' +
    'Log Slow Queries: ' + (config.logSlowQueries ? '‚úÖ ON' : '‚ùå OFF') + '\n' +
    'Slow Query Threshold: ' + config.slowQueryThreshold + ' ms\n\n' +
    'üìù Log Counts:\n' +
    'Performance Logs: ' + perfCount + '\n' +
    'Error Logs: ' + errorCount + '\n' +
    'Team Assignment Logs: ' + teamCount + '\n\n' +
    'üë§ Admin Emails:\n' +
    (adminEmails.length > 0 ? adminEmails.join('\n') : 'None configured') + '\n\n' +
    'üóëÔ∏è Cleanup:\n' +
    'Max Log Age: ' + config.maxLogAge + ' days\n' +
    'Max Error Age: ' + config.maxErrorAge + ' days';
  
  SpreadsheetApp.getUi().alert('Logging Status', message, SpreadsheetApp.getUi().ButtonSet.OK);
}
