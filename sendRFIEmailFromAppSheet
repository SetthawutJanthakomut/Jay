// Version 2 - Fixed - 17/10/2025 10:30
// ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß) =====
function sendRFIEmailFromAppSheet(params) {
  const { 
    email, 
    rfiNumber, 
    description, 
    status, 
    remarks, 
    requestDate,
    documentType = '',
    surveyReport = '',
    surveyReportNumber = '',
    surveyReportRemarks = '',
    labReport = '',
    labReportNumber = '',
    labReportRemarks = '',
    qcReport = '',
    qcReportNumber = '',
    qcReportRemarks = ''
  } = params;
  
  if (!email || !rfiNumber || !description || !status) {
    Logger.log("‚ùå Missing required field(s)");
    return { success: false, error: 'Missing required fields' };
  }
  
  try {
    const quota = checkEmailQuota();
    Logger.log(`üìä Current email quota: ${quota}`);
    
    if (quota <= 0) {
      Logger.log('‚ùå Email quota exceeded');
      return { success: false, error: 'Email quota exceeded' };
    }
    
    let statusColor = getStatusColor(status);
    let statusIcon = getStatusIcon(status);
    const subject = `RFI #${rfiNumber} - ${description}`;
    
    Logger.log("=== RFI Email Info ===");
    Logger.log("üìß To: " + email);
    Logger.log("üî¢ RFI: " + rfiNumber);
    Logger.log("üìù Description: " + description);
    Logger.log("üìä Status: " + status);
    Logger.log("üìÅ Document Type: " + documentType);
    Logger.log("‚úâÔ∏è Subject: " + subject);
    
    const htmlMessage = createRFIEmailHTML(
      rfiNumber, 
      description, 
      status, 
      remarks, 
      requestDate, 
      statusColor, 
      statusIcon,
      documentType,
      surveyReport,
      surveyReportNumber,
      surveyReportRemarks,
      labReport,
      labReportNumber,
      labReportRemarks,
      qcReport,
      qcReportNumber,
      qcReportRemarks
    );
    
    const emailOptions = {
      to: email,
      subject: subject,
      htmlBody: htmlMessage,
      name: 'RFI System - Notification'
    };
    
    const sent = safeSendEmail(emailOptions);
    
    if (!sent) {
      Logger.log('‚ùå Failed to send email');
      return { success: false, error: 'Failed to send email' };
    }
    
    Logger.log("=====================");
    Logger.log(`‚úÖ RFI Email sent successfully to: ${email}`);
    return { success: true, message: 'Email sent successfully' };
    
  } catch (error) {
    Logger.log(`‚ùå Error: ${error.toString()}`);
    Logger.log(`‚ùå Stack: ${error.stack}`);
    return { success: false, error: error.toString() };
  }
}

// ===== ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß) =====
function sendRFIEmailToMultipleRecipients(emailList, rfiNumber, description, status, remarks, requestDate, documentType = '', surveyReport = '', surveyReportNumber = '', surveyReportRemarks = '', labReport = '', labReportNumber = '', labReportRemarks = '', qcReport = '', qcReportNumber = '', qcReportRemarks = '') {
  Logger.log('========== sendRFIEmailToMultipleRecipients START ==========');
  
  let emails = [];
  
  if (typeof emailList === 'string') {
    emails = emailList.split(/[,;]/).map(e => e.trim()).filter(e => e.length > 0 && e.includes('@'));
  } else if (Array.isArray(emailList)) {
    emails = emailList.filter(e => e && e.includes('@'));
  } else {
    Logger.log("‚ùå Invalid email format");
    return { success: false, error: 'Invalid email format' };
  }
  
  if (emails.length === 0) {
    Logger.log("‚ùå No valid email addresses found");
    return { success: false, error: 'No valid email addresses' };
  }
  
  // ‚ö†Ô∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏Å‡∏£‡∏≠‡∏á invalid/test emails
  const validEmails = emails.filter(email => {
    const emailLower = email.toLowerCase();
    
    // ‡∏Å‡∏£‡∏≠‡∏á test emails
    if (emailLower.includes('@company.com') && !emailLower.includes('@gmail.com')) {
      Logger.log('‚ö†Ô∏è Filtered test email:', email);
      return false;
    }
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      Logger.log('‚ö†Ô∏è Invalid email format:', email);
      return false;
    }
    
    return true;
  });
  
  if (validEmails.length === 0) {
    Logger.log('‚ùå No valid real emails after filtering');
    return { success: false, error: 'No valid real emails' };
  }
  
  Logger.log(`üìß Valid emails: ${validEmails.length}/${emails.length}`);
  Logger.log('Recipients:', validEmails.join(', '));
  
  // ‚ö†Ô∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  const MAX_RECIPIENTS = 10;
  
  if (validEmails.length > MAX_RECIPIENTS) {
    Logger.log(`‚ö†Ô∏è Too many recipients (${validEmails.length}), splitting into batches...`);
    return sendBatchEmails(validEmails, rfiNumber, description, status, remarks, requestDate, documentType, surveyReport, surveyReportNumber, surveyReportRemarks, labReport, labReportNumber, labReportRemarks, qcReport, qcReportNumber, qcReportRemarks);
  }
  
  try {
    const quota = checkEmailQuota();
    Logger.log(`üìä Current email quota: ${quota}`);
    
    if (quota <= 0) {
      Logger.log('‚ùå Email quota exceeded');
      return { success: false, error: 'Email quota exceeded' };
    }
    
    const statusColor = getStatusColor(status);
    const statusIcon = getStatusIcon(status);
    const subject = `RFI #${rfiNumber} - ${description}`;
    
    const htmlMessage = createRFIEmailHTML(
      rfiNumber, 
      description, 
      status, 
      remarks, 
      requestDate, 
      statusColor, 
      statusIcon,
      documentType,
      surveyReport,
      surveyReportNumber,
      surveyReportRemarks,
      labReport,
      labReportNumber,
      labReportRemarks,
      qcReport,
      qcReportNumber,
      qcReportRemarks
    );
    
    const recipientList = validEmails.join(',');
    
    const emailOptions = {
      to: recipientList,
      subject: subject,
      htmlBody: htmlMessage,
      name: 'RFI System - Notification'
    };
    
    Logger.log('üöÄ Sending email...');
    const sent = safeSendEmail(emailOptions);
    
    if (!sent) {
      Logger.log('‚ùå Failed to send batch email');
      return { success: false, failed: validEmails.length, error: 'Failed to send' };
    }
    
    Logger.log(`‚úÖ Batch email sent successfully to ${validEmails.length} recipients`);
    Logger.log(`üìä Email quota used: 1 (saved ${validEmails.length - 1} quota)`);
    Logger.log('========== sendRFIEmailToMultipleRecipients END ==========');
    
    return { success: true, count: validEmails.length, failed: 0 };
    
  } catch (error) {
    Logger.log(`‚ùå Error: ${error.toString()}`);
    Logger.log(`‚ùå Stack: ${error.stack}`);
    return { success: false, failed: validEmails.length, error: error.toString() };
  }
}

// ‚≠ê ‡πÉ‡∏´‡∏°‡πà: ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö batch (‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏á)
// Mode 1: ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô group (‡πÄ‡∏£‡πá‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏°‡∏•‡∏õ‡∏•‡∏≠‡∏° 1 ‡∏ï‡∏±‡∏ß ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡∏±‡πâ‡∏á batch ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)
// Mode 2: ‡∏™‡πà‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏ô (‡∏ä‡πâ‡∏≤ ‡πÅ‡∏ï‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ - ‡πÄ‡∏°‡∏•‡∏õ‡∏•‡∏≠‡∏°‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô)
function sendBatchEmails(emailList, rfiNumber, description, status, remarks, requestDate, documentType, surveyReport, surveyReportNumber, surveyReportRemarks, labReport, labReportNumber, labReportRemarks, qcReport, qcReportNumber, qcReportRemarks) {
  Logger.log('========== Batch Email Sending ==========');
  
  // ‚öôÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å MODE:
  // false = ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô group (‡πÄ‡∏£‡πá‡∏ß, ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î quota) ‚≠ê ‡πÉ‡∏ä‡πâ Mode ‡∏ô‡∏µ‡πâ
  // true = ‡∏™‡πà‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏ô (‡∏ä‡πâ‡∏≤, ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥, ‡πÉ‡∏ä‡πâ quota ‡∏°‡∏≤‡∏Å)
  const SEND_INDIVIDUALLY = false; // ‚≠ê Mode 1: ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô Group (‡πÄ‡∏£‡πá‡∏ß)
  
  if (SEND_INDIVIDUALLY) {
    Logger.log('üìß Mode: Send Individually (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á)');
    return sendEmailsIndividually(
      emailList,
      rfiNumber,
      description,
      status,
      remarks,
      requestDate,
      documentType,
      surveyReport,
      surveyReportNumber,
      surveyReportRemarks,
      labReport,
      labReportNumber,
      labReportRemarks,
      qcReport,
      qcReportNumber,
      qcReportRemarks
    );
  } else {
    Logger.log('üìß Mode: Send as Groups (‡πÄ‡∏£‡πá‡∏ß)');
    return sendEmailsAsGroups(
      emailList,
      rfiNumber,
      description,
      status,
      remarks,
      requestDate,
      documentType,
      surveyReport,
      surveyReportNumber,
      surveyReportRemarks,
      labReport,
      labReportNumber,
      labReportRemarks,
      qcReport,
      qcReportNumber,
      qcReportRemarks
    );
  }
}

// üì® Mode 1: ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô Group (‡πÄ‡∏£‡πá‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏°‡∏•‡∏õ‡∏•‡∏≠‡∏°‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ó‡∏±‡πâ‡∏á batch)
function sendEmailsAsGroups(emailList, rfiNumber, description, status, remarks, requestDate, documentType, surveyReport, surveyReportNumber, surveyReportRemarks, labReport, labReportNumber, labReportRemarks, qcReport, qcReportNumber, qcReportRemarks) {
  const MAX_RECIPIENTS = 10;
  let successCount = 0;
  let failCount = 0;
  
  for (let i = 0; i < emailList.length; i += MAX_RECIPIENTS) {
    const batch = emailList.slice(i, i + MAX_RECIPIENTS);
    Logger.log(`\nüì® Batch ${Math.floor(i / MAX_RECIPIENTS) + 1}: ${batch.length} recipients`);
    
    const batchEmailList = batch.join(',');
    
    const result = sendRFIEmailToMultipleRecipients(
      batchEmailList,
      rfiNumber,
      description,
      status,
      remarks,
      requestDate,
      documentType,
      surveyReport,
      surveyReportNumber,
      surveyReportRemarks,
      labReport,
      labReportNumber,
      labReportRemarks,
      qcReport,
      qcReportNumber,
      qcReportRemarks
    );
    
    if (result.success) {
      successCount += batch.length;
      Logger.log('‚úÖ Batch sent successfully');
    } else {
      failCount += batch.length;
      Logger.log('‚ùå Batch failed:', result.error);
    }
    
    // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á batch
    if (i + MAX_RECIPIENTS < emailList.length) {
      Logger.log('‚è≥ Waiting 2 seconds before next batch...');
      Utilities.sleep(2000);
    }
  }
  
  Logger.log(`\n========== Batch Summary ==========`);
  Logger.log(`‚úÖ Success: ${successCount}`);
  Logger.log(`‚ùå Failed: ${failCount}`);
  Logger.log(`Total: ${emailList.length}`);
  Logger.log('===================================');
  
  return {
    success: successCount > 0,
    successCount: successCount,
    failCount: failCount,
    total: emailList.length
  };
}

// üìß Mode 2: ‡∏™‡πà‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏ô (‡∏ä‡πâ‡∏≤ ‡πÅ‡∏ï‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ - ‡πÄ‡∏°‡∏•‡∏õ‡∏•‡∏≠‡∏°‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô)
function sendEmailsIndividually(emailList, rfiNumber, description, status, remarks, requestDate, documentType, surveyReport, surveyReportNumber, surveyReportRemarks, labReport, labReportNumber, labReportRemarks, qcReport, qcReportNumber, qcReportRemarks) {
  Logger.log('üìß Sending individually to ensure accuracy...');
  
  let successCount = 0;
  let failCount = 0;
  const failedEmails = [];
  
  for (let i = 0; i < emailList.length; i++) {
    const email = emailList[i];
    Logger.log(`\nüì® Sending ${i + 1}/${emailList.length} to: ${email}`);
    
    const result = sendRFIEmailFromAppSheet({
      email: email,
      rfiNumber: rfiNumber,
      description: description,
      status: status,
      remarks: remarks,
      requestDate: requestDate,
      documentType: documentType,
      surveyReport: surveyReport,
      surveyReportNumber: surveyReportNumber,
      surveyReportRemarks: surveyReportRemarks,
      labReport: labReport,
      labReportNumber: labReportNumber,
      labReportRemarks: labReportRemarks,
      qcReport: qcReport,
      qcReportNumber: qcReportNumber,
      qcReportRemarks: qcReportRemarks
    });
    
    if (result.success) {
      successCount++;
      Logger.log('‚úÖ Sent successfully');
    } else {
      failCount++;
      failedEmails.push(email);
      Logger.log('‚ùå Failed:', result.error);
    }
    
    // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡πà‡∏á (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô rate limit)
    if (i < emailList.length - 1) {
      Utilities.sleep(1000);
    }
  }
  
  Logger.log(`\n========== Individual Send Summary ==========`);
  Logger.log(`‚úÖ Success: ${successCount}/${emailList.length}`);
  Logger.log(`‚ùå Failed: ${failCount}/${emailList.length}`);
  if (failedEmails.length > 0) {
    Logger.log(`Failed emails: ${failedEmails.join(', ')}`);
  }
  Logger.log(`üìä Quota used: ${successCount} (1 per email)`);
  Logger.log('============================================');
  
  return {
    success: successCount > 0,
    successCount: successCount,
    failCount: failCount,
    failedEmails: failedEmails,
    total: emailList.length
  };
}

// ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Helper (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß) =====
function safeSendEmail(emailParams) {
  try {
    const quota = checkEmailQuota();
    if (quota <= 0) {
      Logger.log('‚ùå Email quota exceeded in safeSendEmail');
      return false;
    }
    
    Logger.log('üì§ Attempting to send email...');
    Logger.log('To:', emailParams.to);
    Logger.log('Subject:', emailParams.subject);
    Logger.log('HTML Body Size:', emailParams.htmlBody.length, 'characters');
    
    // ‚ö†Ô∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡∏ô‡∏≤‡∏î HTML
    if (emailParams.htmlBody.length > 100000) { // 100KB
      Logger.log('‚ö†Ô∏è WARNING: Email HTML is large (', emailParams.htmlBody.length, 'chars)');
      Logger.log('Consider reducing content size');
    }
    
    MailApp.sendEmail(emailParams);
    Logger.log('‚úÖ Email sent successfully via MailApp');
    return true;
    
  } catch (error) {
    Logger.log('‚ùå Error in safeSendEmail:', error.toString());
    Logger.log('Error stack:', error.stack);
    Logger.log('Email params:', JSON.stringify({
      to: emailParams.to,
      subject: emailParams.subject,
      htmlBodyLength: emailParams.htmlBody ? emailParams.htmlBody.length : 0
    }));
    return false;
  }
}

function checkEmailQuota() {
  try {
    const remainingQuota = MailApp.getRemainingDailyQuota();
    Logger.log('üìä Remaining email quota:', remainingQuota);
    return remainingQuota;
  } catch (error) {
    Logger.log('‚ùå Error checking email quota:', error.toString());
    return 0;
  }
}

// ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Status ‡πÅ‡∏•‡∏∞ Icon (‡πÄ‡∏î‡∏¥‡∏° - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ) =====
function getStatusColor(status) {
  const statusLower = status.toLowerCase();
  
  if (statusLower.includes('open rfi pending attachment')) return '#FF6B6B';
  if (statusLower.includes('pending qc review') || 
      statusLower.includes('revised attachment submitted ‚Äì pending qc review')) return '#FF9F43';
  if (statusLower.includes('pending survey review')) return '#FFA726';
  if (statusLower.includes('ready for consult review') ||
      statusLower.includes('qc approved ‚Äì waiting for consult review')) return '#3742fa';
  if (statusLower.includes('rfi approved ‚Äì proceed to site inspection')) return '#2ed573';
  if (statusLower.includes('awaiting final documents for rfi closure') ||
      statusLower.includes('consult approved ‚Äì awaiting signed documents')) return '#5352ed';
  if (statusLower.includes('waiting for revised attachment')) return '#ffa502';
  if (statusLower.includes('rejected by consult ‚Äì revise required') ||
      statusLower.includes('rejected by survey reviewer')) return '#ff4757';
  if (statusLower.includes('rfi closure documents attached')) return '#1dd1a1';
  if (statusLower.includes('inspection started')) return '#00d2d3';
  if (statusLower.includes('inspection postponed')) return '#ff9ff3';
  if (statusLower.includes('site inspection completed by inspector')) return '#7bed9f';
  if (statusLower.includes('cancel')) return '#747d8c';
  
  return '#57606f';
}

function getStatusIcon(status) {
  const statusLower = status.toLowerCase();
  
  if (statusLower.includes('open rfi pending attachment')) return 'üìã';
  if (statusLower.includes('pending qc review') || 
      statusLower.includes('revised attachment submitted ‚Äì pending qc review')) return 'üîç';
  if (statusLower.includes('pending survey review')) return 'üîé';
  if (statusLower.includes('ready for consult review') ||
      statusLower.includes('qc approved ‚Äì waiting for consult review')) return 'üë®‚Äçüíº';
  if (statusLower.includes('rfi approved ‚Äì proceed to site inspection')) return '‚úÖ';
  if (statusLower.includes('awaiting final documents for rfi closure') ||
      statusLower.includes('consult approved ‚Äì awaiting signed documents')) return 'üìù';
  if (statusLower.includes('waiting for revised attachment')) return 'üîÑ';
  if (statusLower.includes('rejected by consult ‚Äì revise required') ||
      statusLower.includes('rejected by survey reviewer')) return '‚ùå';
  if (statusLower.includes('rfi closure documents attached')) return 'üéâ';
  if (statusLower.includes('inspection started')) return 'üîç';
  if (statusLower.includes('inspection postponed')) return '‚è∞';
  if (statusLower.includes('site inspection completed by inspector')) return '‚úÖ';
  if (statusLower.includes('cancel')) return 'üö´';
  
  return 'üìÑ';
}

// ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á HTML (‡∏¢‡πà‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏á) =====
function createRFIEmailHTML(rfiNumber, description, status, remarks, requestDate, statusColor, statusIcon, documentType, surveyReport, surveyReportNumber, surveyReportRemarks, labReport, labReportNumber, labReportRemarks, qcReport, qcReportNumber, qcReportRemarks) {
  const currentDate = new Date().toLocaleDateString('th-TH', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
  
  let formattedRequestDate = '';
  if (requestDate) {
    try {
      const reqDate = new Date(requestDate);
      formattedRequestDate = reqDate.toLocaleDateString('th-TH', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch (error) {
      formattedRequestDate = requestDate;
    }
  }
  
  // ‚ö†Ô∏è ‡∏¢‡πà‡∏≠ HTML ‡∏•‡∏á - ‡∏•‡∏ö styles ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  let documentTypeHTML = '';
  if (documentType && documentType.trim() !== '') {
    const typeColor = documentType.toLowerCase().includes('close') ? '#2ed573' : '#3742fa';
    const typeIcon = documentType.toLowerCase().includes('close') ? 'üìÅ' : 'üìÇ';
    documentTypeHTML = `
      <div style="text-align:center;margin-bottom:15px;">
        <span style="background:${typeColor};color:#fff;padding:8px 20px;border-radius:20px;font-size:14px;font-weight:bold;">
          ${typeIcon} ${documentType}
        </span>
      </div>
    `;
  }
  
  const hasDocStatus = (surveyReport && surveyReport.trim() !== '') || 
                       (labReport && labReport.trim() !== '') || 
                       (qcReport && qcReport.trim() !== '');
  
  let documentStatusHTML = '';
  if (hasDocStatus) {
    documentStatusHTML = '<div style="margin-top:25px;padding-top:20px;border-top:2px solid #e0e0e0;">';
    documentStatusHTML += '<h3 style="color:#333;margin-bottom:15px;font-size:18px;">üìë ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</h3>';
    documentStatusHTML += '<div>';
    
    if (surveyReport && surveyReport.trim() !== '') {
      const surveyColor = surveyReport.toLowerCase().includes('approve') ? '#2ed573' : '#ff4757';
      documentStatusHTML += `
        <div style="background:#f8f9fa;padding:15px;border-radius:8px;border-left:4px solid ${surveyColor};margin-bottom:10px;">
          <div style="font-weight:bold;color:#555;font-size:14px;">üìä Survey Report</div>
          ${surveyReportNumber ? `<div style="font-size:13px;color:#666;">üìã ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: ${surveyReportNumber}</div>` : ''}
          <div style="color:#fff;background:${surveyColor};padding:6px 12px;border-radius:15px;font-size:13px;font-weight:bold;display:inline-block;margin-top:5px;">
            ${surveyReport}
          </div>
          ${surveyReportRemarks ? `<div style="margin-top:10px;padding:10px;background:#fff3cd;border-radius:5px;font-size:13px;">üí¨ ${surveyReportRemarks}</div>` : ''}
        </div>
      `;
    }
    
    if (labReport && labReport.trim() !== '') {
      const labColor = labReport.toLowerCase().includes('approve') ? '#2ed573' : '#ff4757';
      documentStatusHTML += `
        <div style="background:#f8f9fa;padding:15px;border-radius:8px;border-left:4px solid ${labColor};margin-bottom:10px;">
          <div style="font-weight:bold;color:#555;font-size:14px;">üß™ LAB Report</div>
          ${labReportNumber ? `<div style="font-size:13px;color:#666;">üìã ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: ${labReportNumber}</div>` : ''}
          <div style="color:#fff;background:${labColor};padding:6px 12px;border-radius:15px;font-size:13px;font-weight:bold;display:inline-block;margin-top:5px;">
            ${labReport}
          </div>
          ${labReportRemarks ? `<div style="margin-top:10px;padding:10px;background:#fff3cd;border-radius:5px;font-size:13px;">üí¨ ${labReportRemarks}</div>` : ''}
        </div>
      `;
    }
    
    if (qcReport && qcReport.trim() !== '') {
      const qcColor = qcReport.toLowerCase().includes('approve') ? '#2ed573' : '#ff4757';
      documentStatusHTML += `
        <div style="background:#f8f9fa;padding:15px;border-radius:8px;border-left:4px solid ${qcColor};margin-bottom:10px;">
          <div style="font-weight:bold;color:#555;font-size:14px;">‚úîÔ∏è QC Report</div>
          ${qcReportNumber ? `<div style="font-size:13px;color:#666;">üìã ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: ${qcReportNumber}</div>` : ''}
          <div style="color:#fff;background:${qcColor};padding:6px 12px;border-radius:15px;font-size:13px;font-weight:bold;display:inline-block;margin-top:5px;">
            ${qcReport}
          </div>
          ${qcReportRemarks ? `<div style="margin-top:10px;padding:10px;background:#fff3cd;border-radius:5px;font-size:13px;">üí¨ ${qcReportRemarks}</div>` : ''}
        </div>
      `;
    }
    
    documentStatusHTML += '</div></div>';
  }
  
  // ‚ö†Ô∏è ‡∏¢‡πà‡∏≠ HTML - ‡πÉ‡∏ä‡πâ inline styles ‡πÅ‡∏ó‡∏ô <style> tag
  return `<!DOCTYPE html>
<html>
<head><meta charset="UTF-8"><meta name="viewport" content="width=device-width,initial-scale=1.0"></head>
<body style="font-family:'Segoe UI',Arial,sans-serif;line-height:1.6;margin:0;padding:20px;background:#f4f4f4;">
  <div style="max-width:600px;margin:0 auto;background:#fff;border-radius:10px;box-shadow:0 4px 6px rgba(0,0,0,0.1);overflow:hidden;">
    <div style="background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);color:#fff;padding:30px 20px;text-align:center;">
      <h1 style="margin:0;font-size:28px;font-weight:300;">üìã RFI Notification</h1>
      <p style="margin:5px 0 0 0;opacity:0.9;">Request for Information</p>
    </div>
    <div style="padding:30px;">
      <div style="background:#f8f9ff;border-left:5px solid ${statusColor};padding:20px;margin:20px 0;border-radius:5px;">
        <div style="font-size:24px;font-weight:bold;color:#333;margin-bottom:10px;">
          ${statusIcon} RFI #${rfiNumber}
        </div>
        ${documentTypeHTML}
        <div style="background:${statusColor};color:#fff;padding:8px 16px;border-radius:20px;font-size:14px;font-weight:bold;margin:10px 0;display:inline-block;">
          Status: ${status}
        </div>
        <div style="height:2px;background:linear-gradient(90deg,transparent,${statusColor},transparent);margin:20px 0;"></div>
        <div style="margin:15px 0;padding:10px 0;">
          <span style="font-weight:bold;color:#555;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</span>
          <div style="background:#fff;padding:15px;border-radius:5px;border:1px solid #ddd;margin-top:10px;">
            ${description}
          </div>
        </div>
        ${remarks ? `<div style="margin:15px 0;padding:10px 0;">
          <span style="font-weight:bold;color:#555;">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</span>
          <div style="background:#fff3cd;border:1px solid #ffeaa7;padding:15px;border-radius:5px;margin-top:10px;">
            <strong>üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong><br>${remarks}
          </div>
        </div>` : ''}
        ${requestDate ? `<div style="margin:15px 0;padding:10px 0;">
          <span style="font-weight:bold;color:#555;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:</span>
          <span style="color:#333;">üìÖ ${formattedRequestDate}</span>
        </div>` : ''}
        <div style="margin:15px 0;padding:10px 0;">
          <span style="font-weight:bold;color:#555;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:</span>
          <span style="color:#333;">${currentDate}</span>
        </div>
        ${documentStatusHTML}
      </div>
      <p style="text-align:center;color:#666;margin-top:30px;">
        üí° <em>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° RFI ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</em>
      </p>
    </div>
    <div style="background:#f8f9fa;padding:20px;text-align:center;color:#666;font-size:12px;">
      <p>üè¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ RFI | ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ AppSheet</p>
      <p>‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ</p>
    </div>
  </div>
</body>
</html>`;
}

// ===== ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ =====
function getDocumentStatusIcon(status) {
  if (!status) return '';
  const statusLower = status.toLowerCase().trim();
  if (statusLower.includes('approve')) return '‚úÖ';
  if (statusLower.includes('reject')) return '‚ùå';
  return 'üìÑ';
}

function getDocumentStatusColor(status) {
  if (!status) return '';
  const statusLower = status.toLowerCase().trim();
  if (statusLower.includes('approve')) return '#2ed573';
  if (statusLower.includes('reject')) return '#ff4757';
  return '#57606f';
}

function hasAnyDocumentStatus(surveyReport, labReport, qcReport) {
  return (surveyReport && surveyReport.trim() !== '') || 
         (labReport && labReport.trim() !== '') || 
         (qcReport && qcReport.trim() !== '');
}

// ===== üß™ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö =====

// ‚≠ê Test 1: ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (‡∏ó‡∏î‡∏™‡∏≠‡∏ö HTML + ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)
function testSendRFIEmail() {
  Logger.log('========== Test 1: Send Single Email ==========');
  
  const testParams = {
    email: 'setthawut.itd@gmail.com', // ‚ö†Ô∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    rfiNumber: 'TEST-001',
    description: 'Test RFI Description',
    status: 'Pending QC Review',
    remarks: 'This is a test email',
    requestDate: '2025-10-18',
    documentType: 'Open RFI',
    surveyReport: 'Approved',
    surveyReportNumber: 'SR-001',
    surveyReportRemarks: 'All good'
  };
  
  Logger.log('üìß Sending test email to:', testParams.email);
  const result = sendRFIEmailFromAppSheet(testParams);
  
  Logger.log('\n========== Result ==========');
  Logger.log('Success:', result.success);
  Logger.log('Message:', result.message || result.error);
  Logger.log('============================');
}

// ‚≠ê Test 2: ‡∏™‡πà‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô (Mode 1 - Group)
function testBatchEmailMode1() {
  Logger.log('========== Test 2: Batch Email (Mode 1 - Group) ==========');
  
  // ‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
  const testEmails = [
    'setthawut.itd@gmail.com',
    'itd.developer.app@gmail.com',
    'reservations144@gmail.com'
    // ‚ùå ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏™‡πà: survey.a@company.com, lab.a@company.com
  ];
  
  Logger.log('üìß Recipients:', testEmails.length, 'emails');
  Logger.log('Emails:', testEmails.join(', '));
  
  const result = sendRFIEmailToMultipleRecipients(
    testEmails,
    'TEST-002',
    'Test Batch Email (Mode 1)',
    'Pending Review',
    'Testing Group Send Mode - ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô',
    '2025-10-18'
  );
  
  Logger.log('\n========== Result ==========');
  Logger.log('Success:', result.success);
  Logger.log('Success Count:', result.successCount || result.count);
  Logger.log('Failed Count:', result.failCount);
  Logger.log('============================');
}

// ‚≠ê Test 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏•‡πÄ‡∏¢‡∏≠‡∏∞ ‡πÜ (13 ‡∏Ñ‡∏ô)
function testLargeBatchMode1() {
  Logger.log('========== Test 3: Large Batch (13 emails) ==========');
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏•‡∏õ‡∏•‡∏≠‡∏° (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á!)
  const testEmails = [];
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á 3 ‡∏ï‡∏±‡∏ß
  testEmails.push('setthawut.itd@gmail.com');
  testEmails.push('itd.developer.app@gmail.com');
  testEmails.push('reservations144@gmail.com');
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á 10 ‡∏ï‡∏±‡∏ß (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°)
  for (let i = 4; i <= 13; i++) {
    // ‚ö†Ô∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏Ñ‡∏∏‡∏ì!
    testEmails.push('team' + i + '@yourdomain.com');
  }
  
  Logger.log('üìß Total Recipients:', testEmails.length);
  Logger.log('Expected Batches:', Math.ceil(testEmails.length / 10));
  Logger.log('Expected Quota:', Math.ceil(testEmails.length / 10), 'emails');
  
  Logger.log('\n‚ö†Ô∏è WARNING: ‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á ' + testEmails.length + ' ‡∏Ñ‡∏ô!');
  Logger.log('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ô‡∏ï‡πà‡∏≠...\n');
  
  // Uncomment ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á:
  /*
  const result = sendRFIEmailToMultipleRecipients(
    testEmails,
    'TEST-003',
    'Test Large Batch',
    'Testing',
    '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á 13 ‡∏Ñ‡∏ô (‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô 2 batches)',
    '2025-10-18'
  );
  
  Logger.log('\n========== Result ==========');
  Logger.log('Success:', result.success);
  Logger.log('Success Count:', result.successCount);
  Logger.log('Failed Count:', result.failCount);
  Logger.log('Total:', result.total);
  Logger.log('============================');
  */
}

// ‚≠ê Test 4: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Email Quota
function checkQuotaAndRecommend() {
  Logger.log('========== Email Quota Check ==========');
  
  const quota = checkEmailQuota();
  
  Logger.log('üìä Remaining Quota:', quota);
  
  if (quota === 0) {
    Logger.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πÑ‡∏î‡πâ! (Quota ‡∏´‡∏°‡∏î)');
    Logger.log('üí° ‡∏£‡∏≠‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠ Upgrade account');
  } else if (quota < 10) {
    Logger.log('‚ö†Ô∏è Quota ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢! (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 10)');
    Logger.log('üí° ‡∏Ñ‡∏ß‡∏£‡∏£‡∏≠‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô');
  } else if (quota < 50) {
    Logger.log('‚úÖ Quota ‡∏û‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
    Logger.log('üí° Mode 1 (Group) ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° - ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ ~' + (quota * 10) + ' ‡∏Ñ‡∏ô');
  } else {
    Logger.log('‚úÖ Quota ‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å!');
    Logger.log('üí° Mode 1 (Group) ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ - ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ ~' + (quota * 10) + ' ‡∏Ñ‡∏ô');
  }
  
  Logger.log('\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:');
  Logger.log('‚Ä¢ Mode 1 (Group): ‡πÉ‡∏ä‡πâ quota = Recipients / 10');
  Logger.log('‚Ä¢ ‡∏™‡πà‡∏á 100 ‡∏Ñ‡∏ô = ‡πÉ‡∏ä‡πâ quota 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
  Logger.log('‚Ä¢ ‡∏™‡πà‡∏á 13 ‡∏Ñ‡∏ô = ‡πÉ‡∏ä‡πâ quota 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
  Logger.log('=======================================');
}

// ‚≠ê Test 5: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Email Validation
function testEmailValidation() {
  Logger.log('========== Test Email Validation ==========');
  
  const testEmails = [
    'valid@gmail.com',              // ‚úÖ ‡∏ñ‡∏π‡∏Å
    'test.user@company.co.th',      // ‚úÖ ‡∏ñ‡∏π‡∏Å
    'survey.a@company.com',         // ‚ö†Ô∏è ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô test email = ‡∏ú‡∏¥‡∏î
    'invalid-email',                // ‚ùå ‡∏ú‡∏¥‡∏î
    'no-at-sign.com',               // ‚ùå ‡∏ú‡∏¥‡∏î
    '@nodomain.com',                // ‚ùå ‡∏ú‡∏¥‡∏î
    'spaces in@email.com',          // ‚ùå ‡∏ú‡∏¥‡∏î
    ''                               // ‚ùå ‡∏ú‡∏¥‡∏î (empty)
  ];
  
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  
  testEmails.forEach(function(email) {
    const isValid = emailRegex.test(email);
    const icon = isValid ? '‚úÖ' : '‚ùå';
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô test email ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isTestEmail = email.includes('@company.com') && 
                        !email.includes('@gmail.com');
    const warning = isTestEmail ? ' ‚ö†Ô∏è (Test Email)' : '';
    
    Logger.log(icon + ' "' + email + '"' + warning);
  });
  
  Logger.log('===========================================');
}
