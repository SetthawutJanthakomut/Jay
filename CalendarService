// version 1 18/10/2025 10:12
/**
 * ‚≠ê PROJECT B: Calendar Service
 * Deploy as Web App:
 * - Execute as: Me (developeritd75@gmail.com)
 * - Who has access: Anyone
 */

// ‚≠ê API Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Authentication (‡∏™‡∏£‡πâ‡∏≤‡∏á random key ‡∏¢‡∏≤‡∏ß‡πÜ)
const API_KEY = 'sk_live_abc123def456ghi789jkl012mno345pqr678stu901vwx234yz';

// ‚≠ê Calendar ID ‡∏Ç‡∏≠‡∏á developeritd75@gmail.com
const CALENDAR_ID = 'primary'; // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ ID ‡πÄ‡∏â‡∏û‡∏≤‡∏∞

/**
 * ‚≠ê doPost - ‡∏£‡∏±‡∏ö Request ‡∏à‡∏≤‡∏Å Project A
 */
function doPost(e) {
  try {
    Logger.log('========== Calendar Service Received Request ==========');
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Content-Type
    const contentType = e.postData.type;
    if (contentType !== 'application/json') {
      return createResponse(false, 'Invalid content type');
    }
    
    // 2. Parse JSON
    const requestData = JSON.parse(e.postData.contents);
    Logger.log('Request data:', JSON.stringify(requestData));
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key
    if (!requestData.apiKey || requestData.apiKey !== API_KEY) {
      Logger.log('‚ùå Invalid API Key');
      return createResponse(false, 'Unauthorized - Invalid API Key');
    }
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Action
    if (requestData.action !== 'createSurveyWorkEvent') {
      return createResponse(false, 'Invalid action');
    }
    
    // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á Calendar Event
    const result = createCalendarEvent(requestData.data);
    
    Logger.log('Result:', JSON.stringify(result));
    return createResponse(result.success, result.message, result.data);
    
  } catch (error) {
    Logger.log('‚ùå Error in doPost:', error.toString());
    return createResponse(false, 'Server error: ' + error.toString());
  }
}

/**
 * ‚≠ê ‡∏™‡∏£‡πâ‡∏≤‡∏á Calendar Event
 */
function createCalendarEvent(data) {
  try {
    Logger.log('Creating calendar event...');
    Logger.log('Data:', JSON.stringify(data));
    
    // Validate required fields
    const required = ['requestDate', 'startTime', 'endTime', 'description', 
                     'location', 'requesterName', 'requesterEmail', 
                     'assignedTeam', 'surveyNo'];
    
    for (let i = 0; i < required.length; i++) {
      if (!data[required[i]]) {
        return {
          success: false,
          message: 'Missing required field: ' + required[i]
        };
      }
    }
    
    // Get Calendar
    const calendar = CalendarApp.getCalendarById(CALENDAR_ID);
    
    if (!calendar) {
      return {
        success: false,
        message: 'Calendar not found'
      };
    }
    
    Logger.log('‚úÖ Calendar found:', calendar.getName());
    
    // Parse Date & Time
    const dateParts = data.requestDate.split('-');
    const year = parseInt(dateParts[0]);
    const month = parseInt(dateParts[1]) - 1;
    const day = parseInt(dateParts[2]);
    
    const startParts = data.startTime.split(':');
    const startHour = parseInt(startParts[0]);
    const startMin = parseInt(startParts[1]);
    
    const endParts = data.endTime.split(':');
    const endHour = parseInt(endParts[0]);
    const endMin = parseInt(endParts[1]);
    
    const startDateTime = new Date(year, month, day, startHour, startMin, 0);
    const endDateTime = new Date(year, month, day, endHour, endMin, 0);
    
    // Create Event Title
    const eventTitle = 'üó∫Ô∏è Survey Work: ' + data.surveyNo + ' - ' + data.assignedTeam;
    
    // Create Description
    const description = 
      '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n' +
      'üó∫Ô∏è SURVEY WORK REQUEST\n' +
      '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n' +
      'Survey NO: ' + data.surveyNo + '\n' +
      '‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô: ' + data.assignedTeam + '\n' +
      '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ' + data.description + '\n' +
      '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ' + data.location + '\n\n' +
      '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n' +
      '‡∏ú‡∏π‡πâ‡∏Ç‡∏≠: ' + data.requesterName + '\n' +
      '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏Ç‡∏≠: ' + data.requesterEmail + '\n' +
      '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n' +
      '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ' + formatDateThai(data.requestDate) + '\n' +
      '‡πÄ‡∏ß‡∏•‡∏≤: ' + data.startTime + ' - ' + data.endTime + ' ‡∏ô.\n\n' +
      '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: Survey Work\n' +
      '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: Survey Work Request Submitted\n\n' +
      '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n' +
      '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ Calendar Service\n' +
      '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: ' + new Date().toLocaleString('th-TH') + '\n' +
      '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê';
    
    // Guest List
    const guestList = [];
    
    if (data.requesterEmail) {
      guestList.push(data.requesterEmail);
    }
    
    if (data.teamEmails && Array.isArray(data.teamEmails)) {
      data.teamEmails.forEach(function(email) {
        if (email && guestList.indexOf(email) === -1) {
          guestList.push(email);
        }
      });
    }
    
    Logger.log('Guest list:', guestList.join(', '));
    
    // Create Event
    const event = calendar.createEvent(
      eventTitle,
      startDateTime,
      endDateTime,
      {
        description: description,
        location: data.location,
        guests: guestList.join(','),
        sendInvites: true
      }
    );
    
    // Set Color
    try {
      event.setColor(CalendarApp.EventColor.GREEN);
    } catch (e) {
      Logger.log('Could not set color:', e.message);
    }
    
    Logger.log('‚úÖ Event created:', event.getId());
    
    return {
      success: true,
      message: 'Calendar event created successfully',
      data: {
        eventId: event.getId(),
        eventTitle: eventTitle,
        guestsCount: guestList.length,
        calendarName: calendar.getName()
      }
    };
    
  } catch (error) {
    Logger.log('‚ùå Error creating event:', error.toString());
    
    return {
      success: false,
      message: 'Failed to create calendar event: ' + error.toString()
    };
  }
}

/**
 * ‚≠ê Helper: ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON Response
 */
function createResponse(success, message, data) {
  const response = {
    success: success,
    message: message || ''
  };
  
  if (data) {
    response.data = data;
  }
  
  return ContentService
    .createTextOutput(JSON.stringify(response))
    .setMimeType(ContentService.MimeType.JSON);
}

/**
 * ‚≠ê Helper: Format Date Thai
 */
function formatDateThai(dateString) {
  if (!dateString) return '';
  
  const months = [
    '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
    '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
  ];
  
  const date = new Date(dateString + 'T00:00:00');
  const day = date.getDate();
  const month = months[date.getMonth()];
  const year = date.getFullYear() + 543;
  
  return day + ' ' + month + ' ' + year;
}

/**
 * ‚≠ê Test Function
 */
function testCalendarService() {
  const testData = {
    apiKey: API_KEY,
    action: 'createSurveyWorkEvent',
    data: {
      requestDate: '2025-10-25',
      startTime: '14:00',
      endTime: '15:00',
      description: 'Test Survey Work',
      location: 'Test Location',
      requesterName: 'Test User',
      requesterEmail: 'test@example.com',
      assignedTeam: 'Survey Team A',
      surveyNo: 'SW-TEST-001',
      teamEmails: ['team1@example.com', 'team2@example.com']
    }
  };
  
  const mockRequest = {
    postData: {
      type: 'application/json',
      contents: JSON.stringify(testData)
    }
  };
  
  const result = doPost(mockRequest);
  Logger.log('Test Result:', result.getContent());
}


// ===== CalendarService.gs =====

/**
 * ‚≠ê ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) - SAFE VERSION
 */
function setupApiKey() {
  const apiKey = 'sk_live_' + Utilities.getUuid();
  
  const scriptProperties = PropertiesService.getScriptProperties();
  scriptProperties.setProperty('API_KEY', apiKey);
  
  Logger.log('');
  Logger.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  Logger.log('‚úÖ API Key Created Successfully!');
  Logger.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  Logger.log('');
  Logger.log('üìã API Key (copy this):');
  Logger.log('');
  Logger.log('    ' + apiKey);
  Logger.log('');
  Logger.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  Logger.log('‚ö†Ô∏è  IMPORTANT: Save this key! You cannot retrieve it again.');
  Logger.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  Logger.log('');
  
  return apiKey;
}

/**
 * ‚≠ê ‡∏î‡∏∂‡∏á API Key ‡∏à‡∏≤‡∏Å Properties
 */
function getApiKey() {
  const scriptProperties = PropertiesService.getScriptProperties();
  const apiKey = scriptProperties.getProperty('API_KEY');
  
  if (!apiKey) {
    throw new Error('API Key not configured. Run setupApiKey() first.');
  }
  
  return apiKey;
}

/**
 * ‚≠ê ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï doPost() ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ getApiKey()
 */
function doPost(e) {
  try {
    Logger.log('========== Calendar Service Received Request ==========');
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Content-Type
    const contentType = e.postData.type;
    if (contentType !== 'application/json') {
      return createResponse(false, 'Invalid content type');
    }
    
    // 2. Parse JSON
    const requestData = JSON.parse(e.postData.contents);
    Logger.log('Request data:', JSON.stringify(requestData));
    
    // 3. ‚≠ê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key (‡πÉ‡∏ä‡πâ getApiKey())
    const validApiKey = getApiKey();
    
    if (!requestData.apiKey || requestData.apiKey !== validApiKey) {
      Logger.log('‚ùå Invalid API Key');
      return createResponse(false, 'Unauthorized - Invalid API Key');
    }
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Action
    if (requestData.action !== 'createSurveyWorkEvent') {
      return createResponse(false, 'Invalid action');
    }
    
    // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á Calendar Event
    const result = createCalendarEvent(requestData.data);
    
    Logger.log('Result:', JSON.stringify(result));
    return createResponse(result.success, result.message, result.data);
    
  } catch (error) {
    Logger.log('‚ùå Error in doPost:', error.toString());
    return createResponse(false, 'Server error: ' + error.toString());
  }
}

/**
 * ‚≠ê ‡∏î‡∏π API Key ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
 */
function viewApiKey() {
  try {
    const apiKey = getApiKey();
    
    Logger.log('Current API Key:', apiKey);
    
    const ui = SpreadsheetApp.getUi();
    ui.alert(
      'Current API Key',
      apiKey,
      ui.ButtonSet.OK
    );
    
  } catch (error) {
    Logger.log('Error:', error);
    SpreadsheetApp.getUi().alert('Error: ' + error.toString());
  }
}

/**
 * ‚≠ê ‡∏™‡∏£‡πâ‡∏≤‡∏á API Key ‡πÉ‡∏´‡∏°‡πà (‡∏£‡∏∞‡∏ß‡∏±‡∏á! ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ API Key ‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)
 */
function regenerateApiKey() {
  const ui = SpreadsheetApp.getUi();
  const response = ui.alert(
    'Regenerate API Key?',
    'This will invalidate the old API Key!\n\n' +
    'You need to update Project A with the new key.\n\n' +
    'Continue?',
    ui.ButtonSet.YES_NO
  );
  
  if (response === ui.Button.YES) {
    return setupApiKey();
  } else {
    ui.alert('Cancelled');
  }
}

function logRequest(requestData, result) {
  try {
    const logSheet = getOrCreateLogSheet();
    
    const logRow = [
      new Date(),                                   // Timestamp
      requestData.data.surveyNo || '',              // Survey NO
      requestData.data.requesterEmail || '',        // Requester
      requestData.data.requestDate || '',           // Date
      requestData.data.startTime || '',             // Start Time
      requestData.data.endTime || '',               // End Time
      requestData.data.assignedTeam || '',          // Team
      result.success ? 'SUCCESS' : 'FAILED',        // Status
      result.message || '',                         // Message
      result.data && result.data.eventId ? result.data.eventId : '',  // Event ID
      requestData.data.teamEmails ? requestData.data.teamEmails.length : 0  // Guest Count
    ];
    
    logSheet.appendRow(logRow);
    
    Logger.log('üìù Request logged');
    
  } catch (error) {
    Logger.log('‚ö†Ô∏è Error logging request:', error);
    // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ logging ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°
  }
}

/**
 * ‚≠ê ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏î‡∏∂‡∏á Log Sheet
 */
function getOrCreateLogSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName('Calendar_Service_Logs');
  
  if (!sheet) {
    sheet = ss.insertSheet('Calendar_Service_Logs');
    
    // Headers
    const headers = [
      'Timestamp', 'Survey NO', 'Requester', 'Date', 
      'Start Time', 'End Time', 'Team', 'Status', 
      'Message', 'Event ID', 'Guests'
    ];
    
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    
    // Format Headers
    const headerRange = sheet.getRange(1, 1, 1, headers.length);
    headerRange.setFontWeight('bold');
    headerRange.setBackground('#16a34a');
    headerRange.setFontColor('#ffffff');
    headerRange.setHorizontalAlignment('center');
    
    // Set Column Widths
    sheet.setColumnWidth(1, 150);  // Timestamp
    sheet.setColumnWidth(2, 120);  // Survey NO
    sheet.setColumnWidth(3, 200);  // Requester
    sheet.setColumnWidth(4, 100);  // Date
    sheet.setColumnWidth(8, 100);  // Status
    sheet.setColumnWidth(10, 250); // Event ID
    
    sheet.setFrozenRows(1);
    
    Logger.log('‚úÖ Created Calendar_Service_Logs sheet');
  }
  
  return sheet;
}

/**
 * ‚≠ê ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï doPost() ‡πÉ‡∏´‡πâ‡∏°‡∏µ Logging
 */
function doPost(e) {
  let requestData = null;
  
  try {
    Logger.log('========== Calendar Service Received Request ==========');
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Content-Type
    const contentType = e.postData.type;
    if (contentType !== 'application/json') {
      return createResponse(false, 'Invalid content type');
    }
    
    // 2. Parse JSON
    requestData = JSON.parse(e.postData.contents);
    Logger.log('Request data:', JSON.stringify(requestData));
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key
    const validApiKey = getApiKey();
    
    if (!requestData.apiKey || requestData.apiKey !== validApiKey) {
      Logger.log('‚ùå Invalid API Key');
      
      // ‚≠ê Log unauthorized attempts
      if (requestData.data) {
        logRequest(requestData, {
          success: false,
          message: 'Unauthorized - Invalid API Key'
        });
      }
      
      return createResponse(false, 'Unauthorized - Invalid API Key');
    }
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Action
    if (requestData.action !== 'createSurveyWorkEvent') {
      return createResponse(false, 'Invalid action');
    }
    
    // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á Calendar Event
    const result = createCalendarEvent(requestData.data);
    
    // ‚≠ê 6. Log Request
    logRequest(requestData, result);
    
    Logger.log('Result:', JSON.stringify(result));
    return createResponse(result.success, result.message, result.data);
    
  } catch (error) {
    Logger.log('‚ùå Error in doPost:', error.toString());
    
    // ‚≠ê Log errors
    if (requestData && requestData.data) {
      logRequest(requestData, {
        success: false,
        message: 'Server error: ' + error.toString()
      });
    }
    
    return createResponse(false, 'Server error: ' + error.toString());
  }
}

/**
 * ‚≠ê ‡∏î‡∏π Log Stats
 */
function setupLogSpreadsheet() {
  const spreadsheetId = '1kco0Kb7E_2TyFjuYg4Bb8JUW98GkSbOD-VnwvQBzjoM';
  
  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Spreadsheet
    const ss = SpreadsheetApp.openById(spreadsheetId);
    Logger.log('‚úÖ Spreadsheet accessible:', ss.getName());
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ID
    const scriptProperties = PropertiesService.getScriptProperties();
    scriptProperties.setProperty('LOG_SPREADSHEET_ID', spreadsheetId);
    
    Logger.log('‚úÖ Spreadsheet ID saved');
    Logger.log('');
    Logger.log('Setup complete!');
    Logger.log('Spreadsheet:', ss.getName());
    Logger.log('URL:', ss.getUrl());
    
    return true;
    
  } catch (error) {
    Logger.log('‚ùå Error:', error);
    Logger.log('');
    Logger.log('Make sure:');
    Logger.log('1. Spreadsheet ID is correct');
    Logger.log('2. You have edit permission');
    
    return false;
  }
}

/**
 * ‚≠ê ‡∏î‡∏∂‡∏á Spreadsheet ‡∏à‡∏≤‡∏Å Properties
 */
function getLogSpreadsheet() {
  const scriptProperties = PropertiesService.getScriptProperties();
  const spreadsheetId = scriptProperties.getProperty('LOG_SPREADSHEET_ID');
  
  if (!spreadsheetId) {
    throw new Error('Log Spreadsheet not configured. Run setupLogSpreadsheet() first.');
  }
  
  return SpreadsheetApp.openById(spreadsheetId);
}

/**
 * ‚≠ê ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏î‡∏∂‡∏á Log Sheet
 */
function getOrCreateLogSheet() {
  const ss = getLogSpreadsheet();
  let sheet = ss.getSheetByName('Calendar_Service_Logs');
  
  if (!sheet) {
    sheet = ss.insertSheet('Calendar_Service_Logs');
    
    // Headers
    const headers = [
      'Timestamp', 'Survey NO', 'Requester', 'Date', 
      'Start Time', 'End Time', 'Team', 'Status', 
      'Message', 'Event ID', 'Guests'
    ];
    
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    
    // Format Headers
    const headerRange = sheet.getRange(1, 1, 1, headers.length);
    headerRange.setFontWeight('bold');
    headerRange.setBackground('#16a34a');
    headerRange.setFontColor('#ffffff');
    headerRange.setHorizontalAlignment('center');
    
    // Set Column Widths
    sheet.setColumnWidth(1, 150);  // Timestamp
    sheet.setColumnWidth(2, 120);  // Survey NO
    sheet.setColumnWidth(3, 200);  // Requester
    sheet.setColumnWidth(4, 100);  // Date
    sheet.setColumnWidth(5, 90);   // Start Time
    sheet.setColumnWidth(6, 90);   // End Time
    sheet.setColumnWidth(7, 150);  // Team
    sheet.setColumnWidth(8, 100);  // Status
    sheet.setColumnWidth(9, 250);  // Message
    sheet.setColumnWidth(10, 250); // Event ID
    sheet.setColumnWidth(11, 70);  // Guests
    
    sheet.setFrozenRows(1);
    
    Logger.log('‚úÖ Created Calendar_Service_Logs sheet');
  }
  
  return sheet;
}

/**
 * ‚≠ê ‡∏î‡∏π Log Stats (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï)
 */
function viewLogStats() {
  try {
    const ss = getLogSpreadsheet();
    const sheet = ss.getSheetByName('Calendar_Service_Logs');
    
    if (!sheet) {
      Logger.log('‚ÑπÔ∏è No logs yet - creating sheet...');
      getOrCreateLogSheet();
      
      Logger.log('‚úÖ Log sheet created!');
      Logger.log('No log entries yet.');
      return;
    }
    
    const lastRow = sheet.getLastRow();
    
    if (lastRow <= 1) {
      Logger.log('‚ÑπÔ∏è No log entries yet.');
      return;
    }
    
    const data = sheet.getRange(2, 1, lastRow - 1, 11).getValues();
    
    let successCount = 0;
    let failCount = 0;
    
    data.forEach(function(row) {
      if (row[7] === 'SUCCESS') {
        successCount++;
      } else {
        failCount++;
      }
    });
    
    const total = successCount + failCount;
    const successRate = total > 0 ? ((successCount / total) * 100).toFixed(1) : '0.0';
    
    Logger.log('');
    Logger.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    Logger.log('     Calendar Service Stats');
    Logger.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    Logger.log('Total Requests:', total);
    Logger.log('Success:', successCount);
    Logger.log('Failed:', failCount);
    Logger.log('Success Rate:', successRate + '%');
    Logger.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    Logger.log('');
    Logger.log('üìä View full logs:');
    Logger.log(ss.getUrl());
    
  } catch (error) {
    Logger.log('‚ùå Error:', error.toString());
    
    if (error.message.includes('not configured')) {
      Logger.log('');
      Logger.log('üí° Run setupLogSpreadsheet() first');
    }
  }
}
