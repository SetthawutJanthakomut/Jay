// ===== ENHANCED MULTI-RECIPIENT RFI SYSTEM =====

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô
function createRFIAppointmentMultiRecipient(emailList, rfiNumber, description, status, remarks, appointmentDate, startTime, endTime, location) {
  Logger.log("üöÄ Starting multi-recipient RFI appointment creation...");
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  if (!emailList || !rfiNumber || !description || !appointmentDate) {
    const error = "Missing required fields for multi-recipient appointment";
    Logger.log(`‚ùå ${error}`);
    return { success: false, error: error };
  }


  // ‡πÅ‡∏õ‡∏•‡∏á emailList ‡πÄ‡∏õ‡πá‡∏ô array ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string
  let recipients = [];
  if (typeof emailList === 'string') {
    recipients = emailList.split(/[,;\s]+/).filter(email => email.trim() !== '');
  } else if (Array.isArray(emailList)) {
    recipients = emailList.filter(email => email && email.trim() !== '');
  } else {
    Logger.log("‚ùå Invalid email list format");
    return { success: false, error: "Invalid email list format" };
  }

  if (recipients.length === 0) {
    Logger.log("‚ùå No valid email addresses found");
    return { success: false, error: "No valid email addresses" };
  }

  Logger.log(`üìß Processing ${recipients.length} recipients: ${recipients.join(', ')}`);

  let calendarEvent = null;
  let emailResults = [];
  let calendarError = null;

  // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Calendar permissions
  Logger.log("üîç Step 1: Checking calendar permissions...");
  if (!checkCalendarPermissions()) {
    calendarError = "Calendar permissions not granted";
    Logger.log(`‚ö†Ô∏è ${calendarError} - will proceed with email only`);
  }

  // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á Calendar Event ‡∏û‡∏£‡πâ‡∏≠‡∏° guests ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  if (!calendarError) {
    try {
      Logger.log("üîÑ Step 2: Creating calendar event with multiple guests...");
      
      const eventStartTime = createDateTime(appointmentDate, startTime || '09:00');
      const eventEndTime = createDateTime(appointmentDate, endTime || '10:00');
      
      if (eventStartTime && eventEndTime) {
        // ‡∏£‡∏ß‡∏° email ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô guest list
        const guestList = recipients.join(',');
        
        calendarEvent = createCalendarEventWithMultipleGuests(
          rfiNumber, 
          description, 
          eventStartTime, 
          eventEndTime, 
          location || 'Site Location',
          guestList,
          remarks
        );

        if (calendarEvent) {
          Logger.log("‚úÖ Calendar event with multiple guests created successfully");
          Logger.log(`üë• Guests added: ${recipients.join(', ')}`);
        } else {
          calendarError = "Calendar event creation returned null";
          Logger.log(`‚ö†Ô∏è ${calendarError}`);
        }
      } else {
        calendarError = "Invalid date/time format";
        Logger.log(`‚ö†Ô∏è ${calendarError}`);
      }

    } catch (error) {
      calendarError = error.toString();
      Logger.log(`‚ö†Ô∏è Calendar creation error: ${calendarError}`);
    }
  }

  // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
  Logger.log("üìß Step 3: Sending emails to all recipients...");
  
  let successCount = 0;
  let failCount = 0;

  recipients.forEach((email, index) => {
    try {
      Logger.log(`üìß Sending email ${index + 1}/${recipients.length} to: ${email}`);
      
      const emailSent = sendRFIAppointmentEmail(
        email.trim(), 
        rfiNumber, 
        description, 
        status || 'Appointment Scheduled', 
        remarks, 
        appointmentDate, 
        startTime || '09:00', 
        endTime || '10:00', 
        location || 'Site Location',
        calendarEvent
      );

      emailResults.push({
        email: email,
        success: emailSent,
        error: emailSent ? null : "Failed to send email"
      });

      if (emailSent) {
        successCount++;
        Logger.log(`‚úÖ Email sent successfully to: ${email}`);
      } else {
        failCount++;
        Logger.log(`‚ùå Failed to send email to: ${email}`);
      }

    } catch (error) {
      failCount++;
      const errorMsg = error.toString();
      Logger.log(`‚ùå Error sending email to ${email}: ${errorMsg}`);
      emailResults.push({
        email: email,
        success: false,
        error: errorMsg
      });
    }

    // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    if (index < recipients.length - 1) {
      Utilities.sleep(500);
    }
  });

  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  const result = {
    success: successCount > 0,
    totalRecipients: recipients.length,
    successCount: successCount,
    failCount: failCount,
    calendarCreated: calendarEvent !== null,
    calendarEvent: calendarEvent,
    calendarError: calendarError,
    emailResults: emailResults,
    recipients: recipients
  };

  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
  Logger.log("\n" + "=".repeat(50));
  Logger.log("üìä MULTI-RECIPIENT APPOINTMENT SUMMARY:");
  Logger.log(`üë• Total Recipients: ${result.totalRecipients}`);
  Logger.log(`‚úÖ Emails Sent Successfully: ${result.successCount}`);
  Logger.log(`‚ùå Email Failures: ${result.failCount}`);
  Logger.log(`üìÖ Calendar Event Created: ${result.calendarCreated ? 'YES' : 'NO'}`);
  
  if (result.calendarError) {
    Logger.log(`üìù Calendar Issue: ${result.calendarError}`);
  }

  if (result.successCount === result.totalRecipients && result.calendarCreated) {
    Logger.log("üéâ Complete Success: All emails sent and calendar event created!");
  } else if (result.successCount > 0) {
    Logger.log(`‚ö†Ô∏è Partial Success: ${result.successCount}/${result.totalRecipients} emails sent`);
  } else {
    Logger.log("‚ùå Complete Failure: No emails were sent successfully");
  }

  return result;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Calendar Event ‡∏û‡∏£‡πâ‡∏≠‡∏° multiple guests
function createCalendarEventWithMultipleGuests(rfiNumber, description, startTime, endTime, location, guestEmails, remarks) {
  try {
    Logger.log("üîÑ Creating calendar event with multiple guests...");
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö calendar access
    let calendar;
    try {
      calendar = CalendarApp.getDefaultCalendar();
      Logger.log(`‚úÖ Calendar accessed: ${calendar.getName()}`);
    } catch (permError) {
      Logger.log(`‚ùå Calendar permission error: ${permError.toString()}`);
      return null;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤
    if (!startTime || !endTime || startTime >= endTime) {
      Logger.log("‚ùå Invalid time parameters");
      return null;
    }

    Logger.log(`üìÖ Event Schedule:`);
    Logger.log(`   Start: ${startTime.toString()}`);
    Logger.log(`   End: ${endTime.toString()}`);
    Logger.log(`   Location: ${location}`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• event
    const eventTitle = `üîç RFI #${rfiNumber} - Site Inspection`;
    
    // ‡πÅ‡∏¢‡∏Å guest emails ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    const guestList = guestEmails.split(',').map(email => email.trim()).filter(email => email !== '');
    const guestCount = guestList.length;
    
    const eventDescription = `
üè¢ RFI SITE INSPECTION APPOINTMENT

üìã RFI Number: ${rfiNumber}
üìù Description: ${description}
${remarks ? `üí¨ Remarks: ${remarks}` : ''}

üë• Attendees (${guestCount}):
${guestList.map(email => `   ‚Ä¢ ${email}`).join('\n')}

‚è∞ Please arrive 15 minutes early
üì± Contact: [Your Contact Info]
üóùÔ∏è Bring safety equipment and required documents

Generated by AppSheet RFI System
Created at: ${new Date().toLocaleString('th-TH')}
    `.trim();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á event options
    const eventOptions = {
      description: eventDescription,
      location: location,
      guests: guestEmails,
      sendInvites: true // ‡∏™‡πà‡∏á invitation ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô guest list
    };

    Logger.log(`üë• Adding ${guestCount} guests to calendar event`);
    Logger.log(`üìß Guest list: ${guestList.join(', ')}`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á event
    const event = calendar.createEvent(
      eventTitle,
      startTime,
      endTime,
      eventOptions
    );

    if (event) {
      Logger.log(`‚úÖ Calendar event created successfully!`);
      Logger.log(`üÜî Event ID: ${event.getId()}`);
      Logger.log(`üìÖ Event Title: ${event.getTitle()}`);
      Logger.log(`üìç Location: ${event.getLocation()}`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö guest list ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏£‡∏¥‡∏á
      try {
        const actualGuests = event.getGuestList();
        const actualGuestEmails = actualGuests.map(guest => guest.getEmail());
        Logger.log(`üë• Confirmed guests in event: ${actualGuestEmails.join(', ')}`);
        
        // ‡πÅ‡∏™‡∏î‡∏á guest status
        actualGuests.forEach(guest => {
          Logger.log(`   ${guest.getEmail()} - Status: ${guest.getGuestStatus()}`);
        });
      } catch (guestError) {
        Logger.log(`‚ö†Ô∏è Could not retrieve guest details: ${guestError.toString()}`);
      }
      
      return event;
    } else {
      Logger.log("‚ùå Event creation returned null");
      return null;
    }

  } catch (error) {
    Logger.log(`‚ùå Error creating calendar event with guests: ${error.toString()}`);
    Logger.log(`üîç Error details: ${error.stack || 'No stack trace'}`);
    return null;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• RFI ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô (‡πÑ‡∏°‡πà‡∏°‡∏µ appointment)
function sendRFIEmailMultipleRecipients(emailList, rfiNumber, description, status, remarks, requestDate) {
  Logger.log("üìß Starting multi-recipient RFI email sending...");
  
  // ‡πÅ‡∏õ‡∏•‡∏á emailList ‡πÄ‡∏õ‡πá‡∏ô array
  let recipients = [];
  if (typeof emailList === 'string') {
    recipients = emailList.split(/[,;\s]+/).filter(email => email.trim() !== '');
  } else if (Array.isArray(emailList)) {
    recipients = emailList.filter(email => email && email.trim() !== '');
  }

  if (recipients.length === 0) {
    Logger.log("‚ùå No valid email addresses found");
    return { success: false, error: "No valid email addresses" };
  }

  Logger.log(`üìß Sending RFI notification to ${recipients.length} recipients`);

  let successCount = 0;
  let failCount = 0;
  let emailResults = [];

  recipients.forEach((email, index) => {
    try {
      Logger.log(`üìß Sending RFI email ${index + 1}/${recipients.length} to: ${email}`);
      
      const result = sendRFIEmailFromAppSheet(
        email.trim(), 
        rfiNumber, 
        description, 
        status, 
        remarks, 
        requestDate
      );

      emailResults.push({
        email: email,
        success: result,
        error: result ? null : "Failed to send RFI email"
      });

      if (result) {
        successCount++;
        Logger.log(`‚úÖ RFI email sent to: ${email}`);
      } else {
        failCount++;
        Logger.log(`‚ùå Failed to send RFI email to: ${email}`);
      }

    } catch (error) {
      failCount++;
      const errorMsg = error.toString();
      Logger.log(`‚ùå Error sending RFI email to ${email}: ${errorMsg}`);
      emailResults.push({
        email: email,
        success: false,
        error: errorMsg
      });
    }

    // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
    if (index < recipients.length - 1) {
      Utilities.sleep(500);
    }
  });

  const result = {
    success: successCount > 0,
    totalRecipients: recipients.length,
    successCount: successCount,
    failCount: failCount,
    emailResults: emailResults
  };

  Logger.log(`üìä RFI Email Summary: ${successCount}/${recipients.length} sent successfully`);
  return result;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô
function testMultiRecipientSystem() {
  Logger.log("üß™ Testing multi-recipient RFI system...");
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö RFI Email ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô
  Logger.log("\nüìß Testing multi-recipient RFI email...");
  const emailResult = sendRFIEmailMultipleRecipients(
    "test1@example.com, test2@example.com, test3@example.com",
    "RFI-2024-TEST-001",
    "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤",
    "Pending QC Review",
    "‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô",
    "2024-10-15"
  );
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Appointment ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô
  Logger.log("\nüìÖ Testing multi-recipient appointment...");
  const appointmentResult = createRFIAppointmentMultiRecipient(
    ["inspector1@example.com", "inspector2@example.com", "manager@example.com"],
    "RFI-2024-TEST-002",
    "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á",
    "RFI Approved ‚Äì Proceed to Site Inspection",
    "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° Calendar event",
    "2024-10-25",
    "10:00",
    "12:00",
    "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ Test ‡∏ä‡∏±‡πâ‡∏ô 1, ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°"
  );

  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  Logger.log("\n" + "=".repeat(50));
  Logger.log("üß™ MULTI-RECIPIENT SYSTEM TEST RESULTS:");
  Logger.log(`üìß RFI Email Test: ${emailResult.success ? 'PASS' : 'FAIL'} (${emailResult.successCount}/${emailResult.totalRecipients})`);
  Logger.log(`üìÖ Appointment Test: ${appointmentResult.success ? 'PASS' : 'FAIL'} (${appointmentResult.successCount}/${appointmentResult.totalRecipients})`);
  Logger.log(`üìÖ Calendar Event: ${appointmentResult.calendarCreated ? 'CREATED' : 'FAILED'}`);
  
  return {
    emailTest: emailResult,
    appointmentTest: appointmentResult
  };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô utility ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö parse email list
function parseEmailList(input) {
  if (!input) return [];
  
  if (typeof input === 'string') {
    // ‡πÅ‡∏¢‡∏Å email ‡πÇ‡∏î‡∏¢ comma, semicolon, ‡∏´‡∏£‡∏∑‡∏≠ newline
    return input.split(/[,;\n]+/)
                .map(email => email.trim())
                .filter(email => email !== '' && isValidEmail(email));
  } else if (Array.isArray(input)) {
    return input.filter(email => email && isValidEmail(email.trim()));
  }
  
  return [];
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö email
function isValidEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
function exampleMultiRecipientUsage() {
  Logger.log("üìã Example: Multi-recipient RFI usage");
  
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1: ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• RFI ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô
  const rfiEmailResult = sendRFIEmailMultipleRecipients(
    "qc@company.com,supervisor@company.com,manager@company.com",
    "RFI-2024-001",
    "‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö HVAC",
    "Open RFI Pending Attachment",
    "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
    "2024-10-15"
  );
  
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô
  const appointmentResult = createRFIAppointmentMultiRecipient(
    ["inspector@company.com", "contractor@company.com", "client@company.com"],
    "RFI-2024-002",
    "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡πå",
    "RFI Approved ‚Äì Proceed to Site Inspection",
    "‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏µ‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ß‡∏±‡∏î",
    "2024-10-20",
    "09:00",
    "11:30",
    "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ ABC ‡∏ä‡∏±‡πâ‡∏ô 5 ‡πÇ‡∏ã‡∏ô A"
  );
  
  return {
    rfiEmail: rfiEmailResult,
    appointment: appointmentResult
  };
}

// ===== HELPER FUNCTIONS (‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å) =====

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô core functions ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
function checkCalendarPermissions() {
  Logger.log("üîç Checking Calendar permissions...");
  try {
    const calendar = CalendarApp.getDefaultCalendar();
    Logger.log(`‚úÖ Calendar access OK: ${calendar.getName()}`);
    return true;
  } catch (error) {
    Logger.log(`‚ùå Calendar permission error: ${error.toString()}`);
    return false;
  }
}

function createDateTime(dateStr, timeStr) {
  try {
    const date = new Date(dateStr + 'T00:00:00+07:00');
    const [hours, minutes] = timeStr.split(':');
    date.setHours(parseInt(hours), parseInt(minutes), 0, 0);
    return date;
  } catch (error) {
    Logger.log(`Error creating DateTime: ${error.toString()}`);
    const date = new Date(dateStr);
    const [hours, minutes] = timeStr.split(':');
    date.setHours(parseInt(hours), parseInt(minutes), 0, 0);
    return date;
  }
}

function sendRFIEmailFromAppSheet(email, rfiNumber, description, status, remarks, requestDate) {
  if (!email || !rfiNumber || !description || !status) {
    Logger.log("Missing required field(s)");
    return false;
  }
  
  try {
    const subject = `RFI #${rfiNumber} - ${description}`;
    const htmlMessage = `<h3>RFI #${rfiNumber}</h3><p>${description}</p><p>Status: ${status}</p>`;
    
    MailApp.sendEmail({
      to: email,
      subject: subject,
      htmlBody: htmlMessage
    });
    
    return true;
  } catch (error) {
    Logger.log(`Error sending email: ${error.toString()}`);
    return false;
  }
}

function sendRFIAppointmentEmail(email, rfiNumber, description, status, remarks, appointmentDate, startTime, endTime, location, calendarEvent) {
  try {
    const subject = `üìÖ RFI Appointment - RFI #${rfiNumber}`;
    const htmlMessage = `
      <h3>üìÖ RFI Appointment</h3>
      <p><strong>RFI #:</strong> ${rfiNumber}</p>
      <p><strong>Description:</strong> ${description}</p>
      <p><strong>Date:</strong> ${appointmentDate}</p>
      <p><strong>Time:</strong> ${startTime} - ${endTime}</p>
      <p><strong>Location:</strong> ${location}</p>
      ${calendarEvent ? '<p>‚úÖ Calendar event has been created</p>' : ''}
    `;
    
    MailApp.sendEmail({
      to: email,
      subject: subject,
      htmlBody: htmlMessage
    });
    
    return true;
  } catch (error) {
    Logger.log(`Error sending appointment email: ${error.toString()}`);
    return false;
  }
}
