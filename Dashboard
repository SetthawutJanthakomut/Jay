// ===== Dashboard System =====
// File: Dashboard.gs
// Description: System ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Analytics ‡πÅ‡∏•‡∏∞ Statistics

/**
 * üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á Performance Dashboard
 */
function createPerformanceDashboard() {
  try {
    console.log('========== Creating Performance Dashboard ==========');
    
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // ‡∏•‡∏ö dashboard ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    let dashboardSheet = ss.getSheetByName('Dashboard');
    if (dashboardSheet) {
      ss.deleteSheet(dashboardSheet);
    }
    
    dashboardSheet = ss.insertSheet('Dashboard');
    
    // Header
    dashboardSheet.getRange(1, 1).setValue('üìä RFI System Dashboard');
    dashboardSheet.getRange(1, 1).setFontSize(18).setFontWeight('bold');
    dashboardSheet.getRange(2, 1).setValue('Generated: ' + new Date().toLocaleString('th-TH'));
    dashboardSheet.getRange(2, 1).setFontSize(10).setFontColor('#666666');
    
    let row = 4;
    
    // ===== 1. Performance Metrics =====
    row = addPerformanceMetrics(dashboardSheet, row);
    row += 2;
    
    // ===== 2. Team Usage Statistics =====
    row = addTeamUsageStats(dashboardSheet, row);
    row += 2;
    
    // ===== 3. Error Summary =====
    row = addErrorSummary(dashboardSheet, row);
    row += 2;
    
    // ===== 4. Recent Activity =====
    row = addRecentActivity(dashboardSheet, row);
    row += 2;
    
    // ===== 5. Top Slow Queries =====
    row = addSlowQueries(dashboardSheet, row);
    
    // Format columns
    dashboardSheet.setColumnWidth(1, 250);
    dashboardSheet.setColumnWidth(2, 150);
    dashboardSheet.setColumnWidth(3, 150);
    dashboardSheet.setColumnWidth(4, 200);
    
    console.log('‚úÖ Dashboard created successfully');
    
    SpreadsheetApp.getUi().alert(
      'Dashboard ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üìä',
      '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏î‡∏π‡∏ó‡∏µ‡πà Sheet "Dashboard"\n\n' +
      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á:\n' +
      '‚úì Performance Metrics\n' +
      '‚úì Team Usage Statistics\n' +
      '‚úì Error Summary\n' +
      '‚úì Recent Activity\n' +
      '‚úì Slow Queries',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    
    SpreadsheetApp.setActiveSheet(dashboardSheet);
    
  } catch (error) {
    console.error('Error creating dashboard:', error);
    logError('createPerformanceDashboard', error, {});
    
    SpreadsheetApp.getUi().alert(
      '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
      '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard ‡πÑ‡∏î‡πâ\n\n' +
      'Error: ' + error.toString(),
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
}

/**
 * ‚ö° Performance Metrics Section
 */
function addPerformanceMetrics(sheet, startRow) {
  sheet.getRange(startRow, 1).setValue('‚ö° Performance Metrics (Last 7 Days)')
    .setFontWeight('bold').setFontSize(14);
  startRow++;
  
  const perfSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Performance_Log');
  
  if (!perfSheet || perfSheet.getLastRow() <= 1) {
    sheet.getRange(startRow, 1).setValue('No performance data available');
    return startRow + 1;
  }
  
  const data = perfSheet.getRange(2, 1, perfSheet.getLastRow() - 1, 3).getValues();
  
  // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const sevenDaysAgo = new Date();
  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
  
  const recentData = data.filter(function(row) {
    return new Date(row[0]) >= sevenDaysAgo;
  });
  
  if (recentData.length === 0) {
    sheet.getRange(startRow, 1).setValue('No recent performance data');
    return startRow + 1;
  }
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì metrics
  let totalCalls = recentData.length;
  let totalDuration = 0;
  let slowQueries = 0;
  
  const config = getLoggingConfig();  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
  
  recentData.forEach(function(row) {
    const duration = parseFloat(row[2]);
    totalDuration += duration;
    if (duration > config.slowQueryThreshold) {  // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å config
      slowQueries++;
    }
  });
  
  const avgDuration = (totalDuration / totalCalls).toFixed(2);
  
  // Header
  sheet.getRange(startRow, 1, 1, 2).setValues([['Metric', 'Value']]);
  sheet.getRange(startRow, 1, 1, 2).setFontWeight('bold')
    .setBackground('#1877f2').setFontColor('white');
  startRow++;
  
  // Data
  const metrics = [
    ['Total Function Calls', totalCalls],
    ['Average Duration', avgDuration + ' ms'],
    ['Slow Queries (>' + config.slowQueryThreshold + 'ms)', slowQueries],  // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å config
    ['Slow Query Rate', ((slowQueries / totalCalls) * 100).toFixed(1) + '%']
  ];
  
  sheet.getRange(startRow, 1, metrics.length, 2).setValues(metrics);
  
  return startRow + metrics.length;
}

/**
 * üë• Team Usage Statistics
 */
function addTeamUsageStats(sheet, startRow) {
  sheet.getRange(startRow, 1).setValue('üë• Team Usage Statistics (Last 30 Days)')
    .setFontWeight('bold').setFontSize(14);
  startRow++;
  
  const teamSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Team_Assignment_Log');
  
  if (!teamSheet || teamSheet.getLastRow() <= 1) {
    sheet.getRange(startRow, 1).setValue('No team assignment data available');
    return startRow + 1;
  }
  
  const data = teamSheet.getRange(2, 1, teamSheet.getLastRow() - 1, 3).getValues();
  
  // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 30 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const thirtyDaysAgo = new Date();
  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
  
  const recentData = data.filter(function(row) {
    return new Date(row[0]) >= thirtyDaysAgo;
  });
  
  if (recentData.length === 0) {
    sheet.getRange(startRow, 1).setValue('No recent team assignment data');
    return startRow + 1;
  }
  
  // ‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏µ‡∏°
  const teamCount = {};
  
  recentData.forEach(function(row) {
    const teams = String(row[2] || '').split(',');
    teams.forEach(function(team) {
      team = team.trim();
      if (team) {
        teamCount[team] = (teamCount[team] || 0) + 1;
      }
    });
  });
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å ‚Üí ‡∏ô‡πâ‡∏≠‡∏¢
  const sortedTeams = Object.keys(teamCount).sort(function(a, b) {
    return teamCount[b] - teamCount[a];
  });
  
  // Header
  sheet.getRange(startRow, 1, 1, 2).setValues([['Team', 'Assignments']]);
  sheet.getRange(startRow, 1, 1, 2).setFontWeight('bold')
    .setBackground('#16a34a').setFontColor('white');
  startRow++;
  
  // Data (Top 10 teams)
  const topTeams = sortedTeams.slice(0, 10);
  const teamData = topTeams.map(function(team) {
    return [team, teamCount[team]];
  });
  
  sheet.getRange(startRow, 1, teamData.length, 2).setValues(teamData);
  
  return startRow + teamData.length;
}

/**
 * üêõ Error Summary
 */
function addErrorSummary(sheet, startRow) {
  sheet.getRange(startRow, 1).setValue('üêõ Error Summary (Last 7 Days)')
    .setFontWeight('bold').setFontSize(14);
  startRow++;
  
  const errorSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Error_Log');
  
  if (!errorSheet || errorSheet.getLastRow() <= 1) {
    sheet.getRange(startRow, 1).setValue('‚úÖ No errors recorded');
    sheet.getRange(startRow, 1).setBackground('#d1fae5');
    return startRow + 1;
  }
  
  const data = errorSheet.getRange(2, 1, errorSheet.getLastRow() - 1, 7).getValues();
  
  // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const sevenDaysAgo = new Date();
  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
  
  const recentErrors = data.filter(function(row) {
    return new Date(row[0]) >= sevenDaysAgo;
  });
  
  if (recentErrors.length === 0) {
    sheet.getRange(startRow, 1).setValue('‚úÖ No recent errors');
    sheet.getRange(startRow, 1).setBackground('#d1fae5');
    return startRow + 1;
  }
  
  // ‡∏ô‡∏±‡∏ö‡∏ï‡∏≤‡∏° severity
  const severityCount = {
    'Critical': 0,
    'Warning': 0,
    'Info': 0
  };
  
  recentErrors.forEach(function(row) {
    const severity = row[6] || 'Info';
    severityCount[severity] = (severityCount[severity] || 0) + 1;
  });
  
  // Header
  sheet.getRange(startRow, 1, 1, 2).setValues([['Severity', 'Count']]);
  sheet.getRange(startRow, 1, 1, 2).setFontWeight('bold')
    .setBackground('#dc2626').setFontColor('white');
  startRow++;
  
  // Data
  const errorData = [
    ['üö® Critical', severityCount['Critical']],
    ['‚ö†Ô∏è Warning', severityCount['Warning']],
    ['‚ÑπÔ∏è Info', severityCount['Info']],
    ['üìä Total', recentErrors.length]
  ];
  
  sheet.getRange(startRow, 1, errorData.length, 2).setValues(errorData);
  
  // Highlight critical
  if (severityCount['Critical'] > 0) {
    sheet.getRange(startRow, 1, 1, 2).setBackground('#fee2e2');
  }
  
  return startRow + errorData.length;
}

/**
 * üìù Recent Activity
 */
function addRecentActivity(sheet, startRow) {
  sheet.getRange(startRow, 1).setValue('üìù Recent Activity (Last 10)')
    .setFontWeight('bold').setFontSize(14);
  startRow++;
  
  const perfSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Performance_Log');
  
  if (!perfSheet || perfSheet.getLastRow() <= 1) {
    sheet.getRange(startRow, 1).setValue('No activity data');
    return startRow + 1;
  }
  
  const lastRow = perfSheet.getLastRow();
  const startDataRow = Math.max(2, lastRow - 9); // ‡∏î‡∏∂‡∏á 10 ‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const numRows = lastRow - startDataRow + 1;
  
  const data = perfSheet.getRange(startDataRow, 1, numRows, 4).getValues();
  
  // Header
  sheet.getRange(startRow, 1, 1, 4).setValues([
    ['Time', 'Function', 'Duration', 'Status']
  ]);
  sheet.getRange(startRow, 1, 1, 4).setFontWeight('bold')
    .setBackground('#6366f1').setFontColor('white');
  startRow++;
  
  // Data (reverse ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
  const reversedData = data.reverse().map(function(row) {
    return [
      new Date(row[0]).toLocaleString('th-TH'),
      row[1],
      row[2] + ' ms',
      row[3]
    ];
  });
  
  sheet.getRange(startRow, 1, reversedData.length, 4).setValues(reversedData);
  
  return startRow + reversedData.length;
}

/**
 * üêå Slow Queries
 */
function addSlowQueries(sheet, startRow) {
  sheet.getRange(startRow, 1).setValue('üêå Slowest Queries (Top 10)')
    .setFontWeight('bold').setFontSize(14);
  startRow++;
  
  const perfSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Performance_Log');
  
  if (!perfSheet || perfSheet.getLastRow() <= 1) {
    sheet.getRange(startRow, 1).setValue('No performance data');
    return startRow + 1;
  }
  
  const data = perfSheet.getRange(2, 1, perfSheet.getLastRow() - 1, 3).getValues();
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° duration ‡∏°‡∏≤‡∏Å ‚Üí ‡∏ô‡πâ‡∏≠‡∏¢
  const sortedData = data.sort(function(a, b) {
    return parseFloat(b[2]) - parseFloat(a[2]);
  });
  
  // ‡πÄ‡∏≠‡∏≤ top 10
  const top10 = sortedData.slice(0, 10);
  
  // Header
  sheet.getRange(startRow, 1, 1, 3).setValues([
    ['Function', 'Duration', 'Time']
  ]);
  sheet.getRange(startRow, 1, 1, 3).setFontWeight('bold')
    .setBackground('#f59e0b').setFontColor('white');
  startRow++;
  
  // Data
  const slowData = top10.map(function(row) {
    return [
      row[1],
      row[2] + ' ms',
      new Date(row[0]).toLocaleString('th-TH')
    ];
  });
  
  sheet.getRange(startRow, 1, slowData.length, 3).setValues(slowData);
  
  // Highlight very slow (> 1000ms)
  slowData.forEach(function(row, index) {
    const duration = parseFloat(row[1]);
    if (duration > 1000) {
      sheet.getRange(startRow + index, 1, 1, 3).setBackground('#fee2e2');
    }
  });
  
  return startRow + slowData.length;
}

/**
 * üìà ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 */
function viewUsageStats() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Dashboard');
  if (sheet) {
    SpreadsheetApp.setActiveSheet(sheet);
  } else {
    createPerformanceDashboard();
  }
}
