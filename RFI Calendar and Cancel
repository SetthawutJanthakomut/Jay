// Version 2 - Simplified (No Postpone, No Storage)
// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ö‡∏ô‡∏™‡∏∏‡∏î (‡∏ñ‡∏±‡∏î‡∏à‡∏≤‡∏Å CALENDAR_ID)
const CALENDAR_ID = 'primary';
const SPREADSHEET_ID = '1Qp7vANQ4Pt7MiHqNqLHbDcqxOLri0qj6hTp0Ki-Rjnc'; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

// ====== CREATE SURVEY FROM RFI ======
function createSurveyFromRFI(uniqueId, rfiId, date, startTime, endTime, description, location, requesterName, requesterEmail, note, guest, SurveyEmail, Assigned_Inspector) {
  const rfiData = {
    uniqueId: uniqueId || '',
    rfiId: rfiId || '',
    date: date || '',
    startTime: startTime || '',
    endTime: endTime || '',
    description: description || '',
    location: location || '',
    requesterName: requesterName || '',
    requesterEmail: requesterEmail || '',
    note: note || '',
    guest: guest || '',
    surveyEmail: SurveyEmail || '',
    assignedInspector: Assigned_Inspector || ''
  };
  
  return processRFItoSurvey(rfiData);
}

function processRFItoSurvey(rfiData) {
  try {
    console.log('========== processRFItoSurvey START ==========');
    console.log('Received data:', JSON.stringify(rfiData));
    
    if (!rfiData || typeof rfiData !== 'object') {
      return createErrorResponse('INVALID_INPUT', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
    
    const surveyData = {
      uniqueId: rfiData.uniqueId || rfiData.unique_id || '',
      rfiId: rfiData.rfiId || rfiData.RFI_ID || rfiData.rfi_id || '',
      date: rfiData.date || rfiData.surveyDate || rfiData.survey_date || '',
      startTime: rfiData.startTime || rfiData.timeStart || rfiData.start_time || '',
      endTime: rfiData.endTime || rfiData.timeEnd || rfiData.end_time || '',
      description: rfiData.description || rfiData.workDescription || rfiData.work_description || '',
      location: rfiData.location || rfiData.workLocation || rfiData.work_location || '',
      requesterName: rfiData.requesterName || rfiData.contactName || rfiData.requester_name || '',
      requesterEmail: rfiData.requesterEmail || rfiData.contactEmail || rfiData.requester_email || '',
      note: rfiData.note || rfiData.notes || rfiData.additional_notes || '',
      guest: rfiData.guest || rfiData.guests || rfiData.guest_emails || '',
      surveyEmail: rfiData.surveyEmail || rfiData.survey_email || '',
      assignedInspector: rfiData.assignedInspector || rfiData.assigned_inspector || ''
    };
    
    console.log('Converted data:', JSON.stringify(surveyData));
    
    // Validate required fields
    const validation = validateSurveyData(surveyData);
    if (!validation.success) {
      return validation;
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á RFI Calendar Event
    const createResult = createRFICalendarOnly(surveyData);
    
    if (!createResult.success) {
      return createErrorResponse('CALENDAR_ERROR', createResult.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Calendar Event ‡πÑ‡∏î‡πâ');
    }
    
    console.log('========== SUCCESS: Calendar Event Created ==========');
    
    return {
      success: true,
      uniqueId: surveyData.uniqueId,
      rfiCalendarEventId: createResult.rfiCalendarEventId || '',
      message: '‡∏™‡∏£‡πâ‡∏≤‡∏á RFI Calendar Event ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      timestamp: new Date().toISOString(),
      data: {
        date: surveyData.date,
        time: surveyData.startTime + ' - ' + surveyData.endTime,
        location: surveyData.location,
        requester: surveyData.requesterName
      }
    };
    
  } catch (error) {
    console.error('‚ùå Error in processRFItoSurvey:', error);
    return createErrorResponse('SYSTEM_ERROR', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.toString());
  }
}

function validateSurveyData(data) {
  const required = {
    'uniqueId': 'ID',
    'date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
    'startTime': '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°',
    'endTime': '‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î',
    'description': '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô',
    'location': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà',
    'requesterName': '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≠'
  };
  
  const missing = [];
  
  for (var field in required) {
    if (!data[field] || String(data[field]).trim() === '') {
      missing.push(required[field]);
    }
  }
  
  if (missing.length > 0) {
    return createErrorResponse('MISSING_FIELDS', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö: ' + missing.join(', '));
  }
  
  // Validate date format (YYYY-MM-DD)
  if (!/^\d{4}-\d{2}-\d{2}$/.test(data.date)) {
    return createErrorResponse('INVALID_DATE', '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD)');
  }
  
  // Validate time format (HH:MM)
  if (!/^\d{2}:\d{2}$/.test(data.startTime)) {
    return createErrorResponse('INVALID_TIME', '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô HH:MM)');
  }
  
  if (!/^\d{2}:\d{2}$/.test(data.endTime)) {
    return createErrorResponse('INVALID_TIME', '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô HH:MM)');
  }
  
  const startMinutes = timeToMinutes(data.startTime);
  const endMinutes = timeToMinutes(data.endTime);
  
  if (endMinutes <= startMinutes) {
    return createErrorResponse('INVALID_TIME_RANGE', '‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°');
  }
  
  if (data.requesterEmail && data.requesterEmail.trim() !== '') {
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.requesterEmail)) {
      return createErrorResponse('INVALID_EMAIL', '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
  }
  
  return { success: true };
}

function createRFICalendarOnly(data) {
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á RFI Calendar Event (Primary Calendar)
    let rfiCalendarEventId = null;
    try {
      rfiCalendarEventId = createRFICalendarEvent(data);
      console.log('‚úÖ RFI Calendar Event created:', rfiCalendarEventId);
    } catch (calendarError) {
      console.error('Failed to create RFI calendar event:', calendarError);
      return {
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Calendar Event: ' + calendarError.toString()
      };
    }
    
    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏Ñ‡πà Survey Email (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    let emailSent = false;
    if (data.surveyEmail && String(data.surveyEmail).trim() !== '' && String(data.surveyEmail).includes('@')) {
      try {
        emailSent = sendWorkNotificationToSurveyEmail(data, rfiCalendarEventId);
      } catch (emailError) {
        console.error('Failed to send email:', emailError);
      }
    } else {
      console.log('‚ö†Ô∏è No Survey Email provided, skip sending notification');
    }
    
    return {
      success: true,
      rfiCalendarEventId: rfiCalendarEventId,
      emailSent: emailSent
    };
    
  } catch (error) {
    console.error('Error in createRFICalendarOnly:', error);
    return {
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.toString()
    };
  }
}

// ====== USER LOOKUP ======

function getDisplayNameFromEmail(email) {
  try {
    if (!email || email.trim() === '') {
      return '';
    }
    
    const cleanEmail = email.trim().toLowerCase();
    
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName('User');
    
    if (!sheet) {
      console.log('‚ö†Ô∏è User sheet not found');
      return email;
    }
    
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      console.log('‚ö†Ô∏è No data in User sheet');
      return email;
    }
    
    // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: Column B = UserEmail (2), Column C = DisplayName (3)
    const emailData = sheet.getRange(2, 2, lastRow - 1, 1).getValues();
    const displayNameData = sheet.getRange(2, 3, lastRow - 1, 1).getValues();
    
    for (let i = 0; i < emailData.length; i++) {
      const sheetEmail = String(emailData[i][0] || '').trim().toLowerCase();
      const displayName = String(displayNameData[i][0] || '').trim();
      
      if (sheetEmail === cleanEmail && displayName !== '') {
        console.log(`‚úÖ Found DisplayName for ${email}: ${displayName}`);
        return displayName;
      }
    }
    
    console.log(`‚ö†Ô∏è No DisplayName found for ${email}`);
    return email;
    
  } catch (error) {
    console.error('Error getting DisplayName:', error);
    return email;
  }
}

function getDisplayNamesFromEmails(emailString) {
  try {
    if (!emailString || emailString.trim() === '') {
      return '';
    }
    
    const emails = emailString
      .split(/[,;\n]/)
      .map(e => e.trim())
      .filter(e => e.length > 0 && e.includes('@'));
    
    if (emails.length === 0) {
      return '';
    }
    
    const displayNames = emails.map(email => getDisplayNameFromEmail(email));
    
    return displayNames.join(', ');
    
  } catch (error) {
    console.error('Error getting DisplayNames:', error);
    return emailString;
  }
}

// ====== TEAM COLORS ======

function getTeamColors(assignedInspector) {
  try {
    if (!assignedInspector || String(assignedInspector).trim() === '') {
      console.log('‚ö†Ô∏è No assigned inspector');
      return {};
    }
    
    const teamString = String(assignedInspector).trim();
    const requestedTeams = teamString.split(',').map(t => t.trim()).filter(t => t.length > 0);
    
    if (requestedTeams.length === 0) {
      console.log('‚ö†Ô∏è No valid teams in assigned inspector');
      return {};
    }
    
    console.log(`üîç Looking for colors for teams: ${requestedTeams.join(', ')}`);
    
    // ‚úÖ ‡πÅ‡∏Å‡πâ: ‡πÉ‡∏ä‡πâ openById ‡πÅ‡∏ó‡∏ô getActiveSpreadsheet
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName('Resources');
    
    if (!sheet) {
      console.log('‚ö†Ô∏è Resources sheet not found, using default colors');
      return {};
    }
    
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      console.log('‚ö†Ô∏è No data in Resources sheet');
      return {};
    }
    
    const teamData = sheet.getRange(2, 2, lastRow - 1, 1).getValues();
    const colorData = sheet.getRange(2, 8, lastRow - 1, 1).getValues();
    
    const teamColors = {};
    
    for (let i = 0; i < teamData.length; i++) {
      const teamName = String(teamData[i][0] || '').trim();
      const colorValue = String(colorData[i][0] || '').trim();
      
      if (requestedTeams.includes(teamName) && colorValue) {
        teamColors[teamName] = getCalendarColor(colorValue);
        console.log(`‚úÖ Team: ${teamName} ‚Üí Color: ${colorValue}`);
      }
    }
    
    requestedTeams.forEach(function(team) {
      if (!teamColors[team]) {
        console.log(`‚ö†Ô∏è Color not found for team: ${team} (using default BLUE)`);
        teamColors[team] = CalendarApp.EventColor.BLUE;
      }
    });
    
    console.log(`‚úÖ Loaded ${Object.keys(teamColors).length} team colors`);
    return teamColors;
    
  } catch (error) {
    console.error('Error loading team colors:', error);
    return {};
  }
}

function getCalendarColor(colorHex) {
  const colorNameMap = {
    'PALE_BLUE': CalendarApp.EventColor.PALE_BLUE,
    'PALE_GREEN': CalendarApp.EventColor.PALE_GREEN,
    'MAUVE': CalendarApp.EventColor.MAUVE,
    'PALE_RED': CalendarApp.EventColor.PALE_RED,
    'YELLOW': CalendarApp.EventColor.YELLOW,
    'ORANGE': CalendarApp.EventColor.ORANGE,
    'CYAN': CalendarApp.EventColor.CYAN,
    'GRAY': CalendarApp.EventColor.GRAY,
    'BLUE': CalendarApp.EventColor.BLUE,
    'GREEN': CalendarApp.EventColor.GREEN,
    'RED': CalendarApp.EventColor.RED
  };
  
  const colorUpper = String(colorHex).toUpperCase();
  if (colorNameMap[colorUpper]) {
    return colorNameMap[colorUpper];
  }
  
  if (colorHex && colorHex.toString().startsWith('#')) {
    return hexToCalendarColor(colorHex);
  }
  
  return CalendarApp.EventColor.BLUE;
}

function hexToRGB(hex) {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16)
  } : null;
}

function colorDistance(rgb1, rgb2) {
  return Math.sqrt(
    Math.pow(rgb1.r - rgb2.r, 2) +
    Math.pow(rgb1.g - rgb2.g, 2) +
    Math.pow(rgb1.b - rgb2.b, 2)
  );
}

function hexToCalendarColor(hexColor) {
  const inputRGB = hexToRGB(hexColor);
  if (!inputRGB) {
    console.log('‚ö†Ô∏è Invalid hex color:', hexColor);
    return CalendarApp.EventColor.BLUE;
  }
  
  const calendarColors = [
    { name: 'PALE_BLUE', color: CalendarApp.EventColor.PALE_BLUE, rgb: {r: 161, g: 194, b: 250} },
    { name: 'PALE_GREEN', color: CalendarApp.EventColor.PALE_GREEN, rgb: {r: 183, g: 225, b: 205} },
    { name: 'MAUVE', color: CalendarApp.EventColor.MAUVE, rgb: {r: 162, g: 137, b: 209} },
    { name: 'PALE_RED', color: CalendarApp.EventColor.PALE_RED, rgb: {r: 244, g: 164, b: 164} },
    { name: 'YELLOW', color: CalendarApp.EventColor.YELLOW, rgb: {r: 251, g: 233, b: 131} },
    { name: 'ORANGE', color: CalendarApp.EventColor.ORANGE, rgb: {r: 255, g: 183, b: 134} },
    { name: 'CYAN', color: CalendarApp.EventColor.CYAN, rgb: {r: 137, g: 218, b: 235} },
    { name: 'GRAY', color: CalendarApp.EventColor.GRAY, rgb: {r: 158, g: 158, b: 158} },
    { name: 'BLUE', color: CalendarApp.EventColor.BLUE, rgb: {r: 66, g: 133, b: 244} },
    { name: 'GREEN', color: CalendarApp.EventColor.GREEN, rgb: {r: 51, g: 182, b: 121} },
    { name: 'RED', color: CalendarApp.EventColor.RED, rgb: {r: 234, g: 67, b: 53} }
  ];
  
  let closestColor = calendarColors[0];
  let minDistance = colorDistance(inputRGB, calendarColors[0].rgb);
  
  for (let i = 1; i < calendarColors.length; i++) {
    const distance = colorDistance(inputRGB, calendarColors[i].rgb);
    if (distance < minDistance) {
      minDistance = distance;
      closestColor = calendarColors[i];
    }
  }
  
  console.log(`üé® ${hexColor} ‚Üí ${closestColor.name}`);
  return closestColor.color;
}

// ====== CREATE CALENDAR EVENT ======

function createRFICalendarEvent(data) {
  try {
    console.log('========== Creating RFI Calendar Event (Primary) ==========');
    console.log('Guest parameter:', data.guest);
    console.log('Requester email:', data.requesterEmail);
    console.log('Assigned Inspector:', data.assignedInspector);
    
    const startDateTime = new Date(data.date + 'T' + data.startTime + ':00');
    const endDateTime = new Date(data.date + 'T' + data.endTime + ':00');
    
    let title = data.rfiId ? 
      `üìã RFI #${data.rfiId} - ${data.description}` : 
      `üìã Survey Work - ${data.description}`;
    
    if (data.assignedInspector && String(data.assignedInspector).trim() !== '') {
      const teams = String(data.assignedInspector).trim().split(',').map(t => t.trim());
      const teamText = teams.join(', ');
      title += ` [${teamText}]`;
      console.log('‚úÖ Team added to title:', teamText);
    }
    
    let description = 'üìã ‡∏á‡∏≤‡∏ô RFI Work Requirement\n';
    description += 'üë§ ‡∏ú‡∏π‡πâ requirement: ' + data.requesterName + '\n';
    description += 'üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ' + data.description + '\n';
    description += 'üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ' + data.location + '\n';
    description += '‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ' + data.startTime + ' - ' + data.endTime + ' ‡∏ô.\n';
    
    if (data.assignedInspector && String(data.assignedInspector).trim() !== '') {
      description += 'üë• ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ' + data.assignedInspector + '\n';
      console.log('‚úÖ Team added to description');
    }
    
    if (data.note) {
      description += 'üìå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ' + data.note + '\n';
    }
    if (data.guest) {
      description += 'üë• Guests: ' + data.guest + '\n';
    }
    description += 'üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: ' + new Date().toLocaleString('th-TH');
    
    const calendar = CalendarApp.getCalendarById(CALENDAR_ID);
    if (!calendar) {
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Primary Calendar ‡πÑ‡∏î‡πâ');
    }
    
    const event = calendar.createEvent(title, startDateTime, endDateTime, {
      description: description,
      location: data.location || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
    });
    
    if (data.assignedInspector && String(data.assignedInspector).trim() !== '') {
      console.log('üé® Setting color for team:', data.assignedInspector);
      
      const teams = String(data.assignedInspector).trim().split(',').map(t => t.trim());
      const teamColors = getTeamColors(data.assignedInspector);
      
      if (teams.length > 0 && teamColors[teams[0]]) {
        event.setColor(teamColors[teams[0]]);
        console.log('‚úÖ Color set successfully for:', teams[0]);
      } else {
        console.log('‚ö†Ô∏è No color found, using default BLUE');
        event.setColor(CalendarApp.EventColor.BLUE);
      }
    } else {
      event.setColor(CalendarApp.EventColor.BLUE);
      console.log('‚ÑπÔ∏è No team assigned, using default BLUE');
    }
    
    const guestEmails = [];
    
    if (data.guest) {
      const guestString = String(data.guest).trim();
      if (guestString !== '' && guestString.toLowerCase() !== 'null') {
        const customGuests = guestString
          .split(/[,;\n]/)
          .map(e => e.trim())
          .filter(e => e.length > 0 && e.includes('@'));
        
        guestEmails.push(...customGuests);
      }
    }
    
    if (data.requesterEmail && String(data.requesterEmail).includes('@')) {
      const reqEmail = String(data.requesterEmail).trim();
      if (!guestEmails.includes(reqEmail)) {
        guestEmails.push(reqEmail);
      }
    }
    
    const uniqueGuests = [...new Set(guestEmails)];
    
    if (uniqueGuests.length > 0) {
      uniqueGuests.forEach(function(email) {
        try {
          event.addGuest(email);
          console.log('‚úî Added guest to RFI calendar:', email);
        } catch (guestAddError) {
          console.error('‚úó Failed to add guest:', email);
        }
      });
    }
    
    event.addEmailReminder(60);
    event.addEmailReminder(15);
    
    console.log('‚úÖ RFI Calendar event created:', event.getId());
    console.log('‚úÖ Title:', title);
    
    return event.getId();
    
  } catch (error) {
    console.error('Error creating RFI calendar event:', error);
    throw error;
  }
}

// ====== SEND EMAIL ======

function sendWorkNotificationToSurveyEmail(data, rfiEventId) {
  try {
    console.log('========== SEND EMAIL TO SURVEY EMAIL ==========');
    console.log('Survey Email:', data.surveyEmail);
    
    const quota = checkEmailQuota();
    console.log('üìä Current email quota:', quota);
    
    if (quota <= 1) {
      console.log('‚ùå Email quota too low');
      return false;
    }
    
    if (!data.surveyEmail || String(data.surveyEmail).trim() === '' || !String(data.surveyEmail).includes('@')) {
      console.log('‚ùå No valid Survey Email found');
      return false;
    }
    
    const surveyEmailClean = String(data.surveyEmail).trim();
    const subject = 'üìã ‡∏á‡∏≤‡∏ô Survey ‡πÉ‡∏´‡∏°‡πà';
    const emailBody = createSurveyEmailHTML(data, rfiEventId);
    
    console.log('üì§ Sending to Survey Email:', surveyEmailClean);
    
    const sent = safeSendEmail({
      to: surveyEmailClean,
      subject: subject,
      htmlBody: emailBody,
      name: 'Survey Work Requirement System'
    });
    
    if (sent) {
      console.log('‚úÖ Survey Email sent successfully');
    } else {
      console.log('‚ùå Email failed');
    }
    
    return sent;
    
  } catch (error) {
    console.error('‚ùå Error sending Survey Email:', error);
    return false;
  }
}

function createSurveyEmailHTML(data, rfiEventId) {
  // ‚úÖ ‡∏î‡∏∂‡∏á DisplayName ‡∏à‡∏≤‡∏Å Guest Emails
  const guestDisplayNames = data.guest ? getDisplayNamesFromEmails(data.guest) : '';
  
  const emailBody = `<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<style>
body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
h2 { color: #2c5aa0; }
table { border-collapse: collapse; width: 100%; margin: 10px 0; }
td, th { border: 1px solid #ddd; padding: 8px; text-align: left; }
th { background-color: #f2f2f2; font-weight: bold; }
</style>
</head>
<body>
<h2>üìã ‡πÅ‡∏à‡πâ‡∏á‡∏á‡∏≤‡∏ô Survey ‡πÉ‡∏´‡∏°‡πà</h2>
<p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô Survey Team</p>

<h3>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô</h3>
<table>
<tr><th>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th><th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th></tr>
${data.rfiId ? '<tr><th>RFI Number</th><td><strong>RFI #' + data.rfiId + '</strong></td></tr>' : ''}
<tr><th>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</th><td>${data.description}</td></tr>
<tr><th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th><td>${formatDateThai(data.date)}</td></tr>
<tr><th>‡πÄ‡∏ß‡∏•‡∏≤</th><td><strong>${data.startTime} - ${data.endTime} ‡∏ô.</strong></td></tr>
<tr><th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà</th><td>${data.location}</td></tr>
<tr><th>‡∏ú‡∏π‡πâ‡∏Ç‡∏≠</th><td>${data.requesterName}</td></tr>
${data.requesterEmail ? '<tr><th>‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏Ç‡∏≠</th><td>' + data.requesterEmail + '</td></tr>' : ''}
${data.assignedInspector ? '<tr><th>‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô</th><td>' + data.assignedInspector + '</td></tr>' : ''}
${guestDisplayNames ? '<tr><th>‡∏ú‡∏π‡πâ‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô</th><td>' + guestDisplayNames + '</td></tr>' : ''}
${data.note ? '<tr><th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th><td>' + data.note + '</td></tr>' : ''}
</table>

${rfiEventId ? '<p style="background-color: #f3e5f5; padding: 10px; border-radius: 5px;">üîó Calendar Event ID: ' + rfiEventId + '</p>' : ''}

<hr>
<p style="color: #666; font-size: 12px;">
  ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á Survey Team<br>
  ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á: ${new Date().toLocaleString('th-TH')}
</p>
</body>
</html>`;
  
  return emailBody;
}

// ====== CANCEL RFI INSPECTION ======

function cancelRFIInspection(
  rfiNumber,
  Description,
  cancelReason = '',
  requesterEmail = '',
  guestEmails = '',
  sendEmail = true,
  searchDays = 60
) {
  Logger.log(`üö´ Starting RFI cancellation for: ${rfiNumber}`);
  
  if (!rfiNumber || rfiNumber.trim() === '') {
    return {
      success: false,
      error: 'RFI Number is required',
      rfiNumber: rfiNumber,
      eventsFound: 0,
      eventsDeleted: 0,
      emailsSent: false
    };
  }

  const cleanRfiNumber = rfiNumber.trim();
  const cleanDescription = Description ? Description.trim() : '';
  
  let result = {
    success: false,
    rfiNumber: cleanRfiNumber,
    rfiDescription: cleanDescription,
    rfiEventsFound: 0,
    rfiEventsDeleted: 0,
    emailsSent: false,
    participants: [],
    deletedRFIEvents: [],
    error: null,
    message: ''
  };

  try {
    Logger.log("üë• Step 1: Preparing participant list...");
    const allParticipants = new Set();
    
    if (requesterEmail && String(requesterEmail).trim() !== '' && String(requesterEmail).includes('@')) {
      allParticipants.add(String(requesterEmail).trim());
    }
    
    if (guestEmails) {
      const guestString = String(guestEmails).trim();
      if (guestString !== '' && guestString.toLowerCase() !== 'null') {
        const guestList = guestString
          .split(/[,;\n]/)
          .map(email => email.trim())
          .filter(email => email.length > 0 && email.includes('@'));
        
        guestList.forEach(email => allParticipants.add(email));
      }
    }

    result.participants = Array.from(allParticipants);
    Logger.log(`üë• Total participants: ${result.participants.length}`);

    Logger.log("üîç Step 2: Searching Primary Calendar Events...");
    const rfiSearchResult = searchCalendarEventsByRFIAndDescription(cleanRfiNumber, cleanDescription, CALENDAR_ID, searchDays);
    
    if (rfiSearchResult.success && rfiSearchResult.events.length > 0) {
      result.rfiEventsFound = rfiSearchResult.events.length;
      Logger.log(`‚úÖ Found ${result.rfiEventsFound} calendar events`);
    } else {
      result.error = `No calendar events found for RFI: ${cleanRfiNumber} / ${cleanDescription}`;
      result.message = result.error;
      Logger.log(`‚ö†Ô∏è ${result.error}`);
      return result;
    }

    Logger.log("üóëÔ∏è Step 3: Deleting Primary Calendar Events...");
    
    for (let i = 0; i < rfiSearchResult.events.length; i++) {
      const eventInfo = rfiSearchResult.events[i];
      
      try {
        const deleteSuccess = deleteCalendarEvent(eventInfo, CALENDAR_ID);
        
        if (deleteSuccess.success) {
          result.rfiEventsDeleted++;
          result.deletedRFIEvents.push({
            eventId: eventInfo.eventId,
            title: eventInfo.title,
            calendarType: 'RFI'
          });
          Logger.log(`‚úÖ Event deleted: "${eventInfo.title}"`);
        }
        
      } catch (deleteError) {
        Logger.log(`‚ùå Error deleting event: ${deleteError.toString()}`);
      }
    }

    if (sendEmail && result.rfiEventsDeleted > 0 && result.participants.length > 0) {
      Logger.log("üìß Step 4: Sending cancellation notifications...");
      
      const emailResult = sendCancellationNotification(
        cleanRfiNumber,
        cleanDescription,
        cancelReason,
        result.deletedRFIEvents,
        requesterEmail,
        guestEmails
      );
      
      result.emailsSent = emailResult.success;
      Logger.log(`üìß Email: ${emailResult.success ? 'SENT' : 'FAILED'}`);
      Logger.log(`üìß Total recipients: ${emailResult.totalRecipients || 0}`);
    }

    result.success = result.rfiEventsDeleted > 0;
    
    if (result.success) {
      result.message = `‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å RFI ${cleanRfiNumber} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏•‡∏ö ${result.rfiEventsDeleted} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;
    } else {
      result.message = `‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RFI ${cleanRfiNumber}`;
    }

  } catch (error) {
    result.error = error.toString();
    result.message = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å RFI ${cleanRfiNumber}: ${result.error}`;
    Logger.log(`‚ùå Unexpected error: ${result.error}`);
  }

  Logger.log("\n" + "=".repeat(50));
  Logger.log("üö´ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å RFI:");
  Logger.log(`üÜî RFI Number: ${result.rfiNumber}`);
  Logger.log(`üóëÔ∏è ‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß: ${result.rfiEventsDeleted}/${result.rfiEventsFound}`);
  Logger.log(`üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${result.emailsSent ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`);
  Logger.log(`‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.success ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`);

  return result;
}

function searchCalendarEventsByRFIAndDescription(rfiNumber, description, calendarId, searchDays = 60) {
  Logger.log(`üîç Searching calendar "${calendarId}" for RFI Number: ${rfiNumber}`);
  
  try {
    const calendar = CalendarApp.getCalendarById(calendarId);
    if (!calendar) {
      throw new Error(`Cannot access calendar: ${calendarId}`);
    }

    const startDate = new Date();
    startDate.setDate(startDate.getDate() - searchDays);
    
    const endDate = new Date();
    endDate.setDate(endDate.getDate() + searchDays);
    
    const allEvents = calendar.getEvents(startDate, endDate);
    Logger.log(`üìä Total events in range: ${allEvents.length}`);
    
    if (allEvents.length === 0) {
      return { success: false, message: 'No events found in date range', events: [] };
    }

    const matchingEvents = [];
    
    const rfiSearchPatterns = [
      `RFI #${rfiNumber}`,
      `RFI-${rfiNumber}`,
      `#${rfiNumber}`,
      rfiNumber
    ];
    
    allEvents.forEach((event, index) => {
      try {
        const title = event.getTitle() || '';
        const eventDescription = event.getDescription() || '';
        const searchableText = (title + ' ' + eventDescription).toLowerCase();
        
        const rfiMatch = rfiSearchPatterns.some(pattern => 
          searchableText.includes(pattern.toLowerCase())
        );
        
        if (rfiMatch) {
          Logger.log(`‚úÖ Found matching event: "${title}"`);
          
          matchingEvents.push({
            event: event,
            eventId: event.getId(),
            title: title,
            description: eventDescription,
            startTime: event.getStartTime(),
            endTime: event.getEndTime(),
            location: event.getLocation() || '',
            created: event.getDateCreated(),
            lastUpdated: event.getLastUpdated()
          });
        }
        
      } catch (eventError) {
        Logger.log(`‚ö†Ô∏è Error processing event ${index + 1}: ${eventError.toString()}`);
      }
    });
    
    matchingEvents.sort((a, b) => b.created - a.created);
    
    return {
      success: matchingEvents.length > 0,
      message: `Found ${matchingEvents.length} events for RFI: ${rfiNumber}`,
      events: matchingEvents
    };
    
  } catch (error) {
    Logger.log(`‚ùå Error searching calendar events: ${error.toString()}`);
    return { success: false, error: error.toString(), events: [] };
  }
}

function deleteCalendarEvent(eventInfo, calendarId) {
  Logger.log(`üóëÔ∏è Deleting event from "${calendarId}": ${eventInfo.eventId}`);
  
  try {
    const calendar = CalendarApp.getCalendarById(calendarId);
    if (!calendar) {
      return { success: false, error: `Cannot access calendar: ${calendarId}` };
    }
    
    const event = calendar.getEventById(eventInfo.eventId);
    
    if (!event) {
      return { success: false, error: `Event not found: ${eventInfo.eventId}` };
    }

    event.deleteEvent();
    Logger.log(`‚úÖ Event deleted from ${calendarId}: "${eventInfo.title}"`);
    
    return {
      success: true,
      eventId: eventInfo.eventId,
      title: eventInfo.title
    };
    
  } catch (error) {
    Logger.log(`‚ùå Error deleting event: ${error.toString()}`);
    return {
      success: false,
      error: error.toString()
    };
  }
}

function sendCancellationNotification(rfiNumber, Description, cancelReason, deletedEvents, requesterEmail, guestEmails) {
  Logger.log(`üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° RFI`);
  
  try {
    const quota = checkEmailQuota();
    if (quota <= 0) {
      Logger.log('‚ùå Email quota exceeded');
      return { success: false, message: "Email quota exceeded" };
    }

    const allRecipients = new Set();
    
    if (requesterEmail && String(requesterEmail).trim() !== '' && String(requesterEmail).includes('@')) {
      allRecipients.add(String(requesterEmail).trim());
      Logger.log(`üìß Added requester: ${String(requesterEmail).trim()}`);
    }
    
    if (guestEmails) {
      const guestString = String(guestEmails).trim();
      if (guestString !== '' && guestString.toLowerCase() !== 'null') {
        const guestList = guestString
          .split(/[,;\n]/)
          .map(email => email.trim())
          .filter(email => email.length > 0 && email.includes('@'));
        
        guestList.forEach(email => {
          allRecipients.add(email);
          Logger.log(`üìß Added guest: ${email}`);
        });
      }
    }
    
    const finalRecipients = Array.from(allRecipients);
    
    if (finalRecipients.length === 0) {
      Logger.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö');
      return { success: false, message: "No recipients" };
    }
    
    Logger.log(`üìß ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${finalRecipients.length}`);

    const subject = `üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß - RFI #${rfiNumber} ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö`;
    
    let eventsList = '<ul>';
    deletedEvents.forEach(evt => {
      eventsList += `<li><strong>${evt.title}</strong></li>`;
    });
    eventsList += '</ul>';
    
    const htmlMessage = `<!DOCTYPE html>
<html>
<head><meta charset="UTF-8"><style>
body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
h2 { color: #dc3545; }
table { border-collapse: collapse; width: 100%; margin: 10px 0; }
td, th { border: 1px solid #ddd; padding: 8px; }
th { background-color: #f2f2f2; font-weight: bold; }
.alert-box { background-color: #f8d7da; border-left: 4px solid #dc3545; padding: 15px; margin: 15px 0; }
</style></head>
<body>
<h2>üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RFI</h2>

<div class="alert-box">
  <strong>‚ö†Ô∏è ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:</strong> ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å<strong>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</strong>‡πÅ‡∏•‡πâ‡∏ß
</div>

<h3>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î RFI:</h3>
<table>
<tr><th style="width: 30%;">RFI Number</th><td><strong>${rfiNumber}</strong></td></tr>
<tr><th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th><td>${Description}</td></tr>
${cancelReason ? `<tr><th>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</th><td>${cancelReason}</td></tr>` : ''}
</table>

<h3>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Calendar:</h3>
${eventsList}

<p style="margin-top: 20px;"><strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> Calendar Event ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß</p>

<hr>
<p style="color: #666; font-size: 12px;">
üì® <strong>‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö:</strong> ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° RFI<br>
ü§ñ ‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢: ‡∏£‡∏∞‡∏ö‡∏ö RFI - ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å<br>
üïê ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}
</p>
</body>
</html>`;
    
    const recipientList = finalRecipients.join(',');
    
    const sent = safeSendEmail({
      to: recipientList,
      subject: subject,
      htmlBody: htmlMessage,
      name: '‡∏£‡∏∞‡∏ö‡∏ö RFI - ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    });
    
    Logger.log(`üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å: ${sent ? '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}`);
    Logger.log(`üìß ‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á ${finalRecipients.length} ‡∏Ñ‡∏ô`);
    
    return {
      success: sent,
      totalSent: sent ? finalRecipients.length : 0,
      totalRecipients: finalRecipients.length
    };
    
  } catch (error) {
    Logger.log(`‚ùå Email error: ${error.toString()}`);
    return { success: false, error: error.toString() };
  }
}

// ====== UTILITY FUNCTIONS ======

function timeToMinutes(timeString) {
  if (!timeString) return 0;
  const parts = timeString.split(':');
  return parseInt(parts[0]) * 60 + parseInt(parts[1]);
}

function formatDateThai(dateString) {
  if (!dateString) return '';
  
  const months = [
    '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
    '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
  ];
  
  const date = new Date(dateString + 'T00:00:00');
  const day = date.getDate();
  const month = months[date.getMonth()];
  const year = date.getFullYear() + 543;
  
  return day + ' ' + month + ' ' + year;
}

function createErrorResponse(code, message) {
  return {
    success: false,
    error: code,
    message: message,
    timestamp: new Date().toISOString()
  };
}

function checkEmailQuota() {
  try {
    const remainingQuota = MailApp.getRemainingDailyQuota();
    console.log('Remaining email quota:', remainingQuota);
    return remainingQuota;
  } catch (error) {
    console.error('Error checking email quota:', error);
    return 0;
  }
}

function safeSendEmail(emailParams) {
  try {
    const quota = checkEmailQuota();
    if (quota <= 0) {
      console.log('Email quota exceeded, skipping email');
      return false;
    }
    
    MailApp.sendEmail(emailParams);
    return true;
  } catch (error) {
    console.error('Error sending email:', error);
    return false;
  }
}

// ====== TEST FUNCTIONS ======

function testIntegration() {
  const testData = {
    uniqueId: 'TEST-UNIQUE-001',
    rfiId: 'RFI-TEST-001',
    date: '2025-10-20',
    startTime: '10:00',
    endTime: '12:00',
    description: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Simplified',
    location: '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    requesterName: '‡∏ú‡∏π‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    requesterEmail: 'test@example.com',
    note: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö',
    guest: 'guest1@example.com, guest2@example.com',
    surveyEmail: 'survey@example.com',
    assignedInspector: 'Survey Team A'
  };
  
  const result = processRFItoSurvey(testData);
  console.log(JSON.stringify(result, null, 2));
  return result;
}

function testCancel() {
  const result = cancelRFIInspection(
    "RFI-TEST-001",
    "Test RFI Description",
    "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    "requester@test.com",
    "guest1@test.com,guest2@test.com",
    false,
    30
  );
  
  Logger.log(JSON.stringify(result, null, 2));
  return result;
}

function testDisplayName() {
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á DisplayName
  const email = 'surveymarine048@gmail.com';
  const displayName = getDisplayNameFromEmail(email);
  console.log(`Email: ${email} ‚Üí DisplayName: ${displayName}`);
  
  const emailList = 'surveymarine048@gmail.com, surveymarine049@gmail.com';
  const displayNames = getDisplayNamesFromEmails(emailList);
  console.log(`Email List: ${emailList}`);
  console.log(`DisplayNames: ${displayNames}`);
}
