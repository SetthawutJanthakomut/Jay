// Version 0 17/10/2025 13:41
// ใส่ Spreadsheet ID ของ Survey System
const SURVEY_SPREADSHEET_ID = '1rWMUNNDbbLbHljs2GsU6fzrJDjHsutS7nMvElGUNTQk';
const CALENDAR_ID = 'primary';

// ====== UPDATED: เพิ่ม uniqueId, SurveyEmail และ Assigned_Inspector parameter ======
function createSurveyFromRFI(uniqueId, rfiId, date, startTime, endTime, description, location, requesterName, requesterEmail, note, guest, SurveyEmail, Assigned_Inspector) {
  const rfiData = {
    uniqueId: uniqueId || '',
    rfiId: rfiId || '',
    date: date || '',
    startTime: startTime || '',
    endTime: endTime || '',
    description: description || '',
    location: location || '',
    requesterName: requesterName || '',
    requesterEmail: requesterEmail || '',
    note: note || '',
    guest: guest || '',
    surveyEmail: SurveyEmail || '',  // ✅ เพิ่ม Survey Email
    assignedInspector: Assigned_Inspector || ''  // ✅ เพิ่ม Assigned Inspector
  };
  
  return processRFItoSurvey(rfiData);
}

function processRFItoSurvey(rfiData) {
  try {
    console.log('========== processRFItoSurvey START ==========');
    console.log('Received data:', JSON.stringify(rfiData));
    
    if (!rfiData || typeof rfiData !== 'object') {
      return createErrorResponse('INVALID_INPUT', 'ข้อมูลไม่ถูกต้อง');
    }
    
    const surveyData = {
      uniqueId: rfiData.uniqueId || rfiData.unique_id || '',
      rfiId: rfiData.rfiId || rfiData.RFI_ID || rfiData.rfi_id || '',
      date: rfiData.date || rfiData.surveyDate || rfiData.survey_date || '',
      startTime: rfiData.startTime || rfiData.timeStart || rfiData.start_time || '',
      endTime: rfiData.endTime || rfiData.timeEnd || rfiData.end_time || '',
      description: rfiData.description || rfiData.workDescription || rfiData.work_description || '',
      location: rfiData.location || rfiData.workLocation || rfiData.work_location || '',
      requesterName: rfiData.requesterName || rfiData.contactName || rfiData.requester_name || '',
      requesterEmail: rfiData.requesterEmail || rfiData.contactEmail || rfiData.requester_email || '',
      note: rfiData.note || rfiData.notes || rfiData.additional_notes || '',
      guest: rfiData.guest || rfiData.guests || rfiData.guest_emails || '',
      surveyEmail: rfiData.surveyEmail || rfiData.survey_email || '',
      assignedInspector: rfiData.assignedInspector || rfiData.assigned_inspector || ''  // ✅ เพิ่ม Assigned Inspector
    };
    
    console.log('Converted data:', JSON.stringify(surveyData));
    
    // Validate required fields
    const validation = validateSurveyData(surveyData);
    if (!validation.success) {
      return validation;
    }
    
    // ตรวจสอบงานที่ซ้อนทับ
    const conflicts = findConflictingJobs(surveyData.date, surveyData.startTime, surveyData.endTime);
    const hasConflict = conflicts.length > 0;
    
    if (hasConflict) {
      console.log('⚠️ WARNING: Found ' + conflicts.length + ' conflicting jobs');
      conflicts.forEach(function(job) {
        console.log('   Conflict: Row ' + job.rowNumber + ' - ' + job.description);
      });
    }
    
    // บันทึกงาน Survey
    const saveResult = saveWorkRequirementFromRFI(surveyData, hasConflict, conflicts);
    
    if (!saveResult.success) {
      return createErrorResponse('SAVE_ERROR', saveResult.message || 'ไม่สามารถบันทึกงานได้');
    }
    
    // ไฮไลท์แถวถ้ามีความขัดแย้ง
    if (hasConflict) {
      highlightConflictingRow(saveResult.workId);
    }
    
    // บันทึก RFI mapping
    if (surveyData.rfiId) {
      saveRFIMapping(surveyData.rfiId, saveResult.workId);
    }
    
    console.log('========== SUCCESS: Work ID = ' + saveResult.workId + ' ==========');
    
    return {
      success: true,
      workId: saveResult.workId,
      uniqueId: surveyData.uniqueId,
      rfiCalendarEventId: saveResult.rfiCalendarEventId || '',
      hasConflict: hasConflict,
      conflictCount: conflicts.length,
      message: hasConflict ? 
        'สร้างงาน Survey สำเร็จ (⚠️ มีงานซ้อนทับ ' + conflicts.length + ' งาน - กรุณาตรวจสอบ)' : 
        'สร้างงาน Survey สำเร็จ',
      timestamp: new Date().toISOString(),
      conflicts: hasConflict ? formatConflictsForAppSheet(conflicts) : [],
      data: {
        date: surveyData.date,
        time: surveyData.startTime + ' - ' + surveyData.endTime,
        location: surveyData.location,
        requester: surveyData.requesterName
      }
    };
    
  } catch (error) {
    console.error('❌ Error in processRFItoSurvey:', error);
    return createErrorResponse('SYSTEM_ERROR', 'เกิดข้อผิดพลาด: ' + error.toString());
  }
}

function validateSurveyData(data) {
  const required = {
    'uniqueId': 'ID',
    'date': 'วันที่',
    'startTime': 'เวลาเริ่ม',
    'endTime': 'เวลาสิ้นสุด',
    'description': 'รายละเอียดงาน',
    'location': 'สถานที่',
    'requesterName': 'ชื่อผู้ขอ'
  };
  
  const missing = [];
  
  for (var field in required) {
    if (!data[field] || String(data[field]).trim() === '') {
      missing.push(required[field]);
    }
  }
  
  if (missing.length > 0) {
    return createErrorResponse('MISSING_FIELDS', 'ข้อมูลไม่ครบ: ' + missing.join(', '));
  }
  
  // Validate date format (YYYY-MM-DD)
  if (!/^\d{4}-\d{2}-\d{2}$/.test(data.date)) {
    return createErrorResponse('INVALID_DATE', 'รูปแบบวันที่ไม่ถูกต้อง (ต้องเป็น YYYY-MM-DD)');
  }
  
  // Validate time format (HH:MM)
  if (!/^\d{2}:\d{2}$/.test(data.startTime)) {
    return createErrorResponse('INVALID_TIME', 'รูปแบบเวลาเริ่มไม่ถูกต้อง (ต้องเป็น HH:MM)');
  }
  
  if (!/^\d{2}:\d{2}$/.test(data.endTime)) {
    return createErrorResponse('INVALID_TIME', 'รูปแบบเวลาสิ้นสุดไม่ถูกต้อง (ต้องเป็น HH:MM)');
  }
  
  const startMinutes = timeToMinutes(data.startTime);
  const endMinutes = timeToMinutes(data.endTime);
  
  if (endMinutes <= startMinutes) {
    return createErrorResponse('INVALID_TIME_RANGE', 'เวลาสิ้นสุดต้องมากกว่าเวลาเริ่ม');
  }
  
  if (data.requesterEmail && data.requesterEmail.trim() !== '') {
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.requesterEmail)) {
      return createErrorResponse('INVALID_EMAIL', 'รูปแบบอีเมลไม่ถูกต้อง');
    }
  }
  
  return { success: true };
}

function findConflictingJobs(date, startTime, endTime) {
  try {
    const sheet = SpreadsheetApp.openById(SURVEY_SPREADSHEET_ID).getSheetByName('requirement');
    if (!sheet) return [];
    
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) return [];
    
    const data = sheet.getRange(2, 2, lastRow - 1, 10).getValues();
    
    const newStartMinutes = timeToMinutes(startTime);
    const newEndMinutes = timeToMinutes(endTime);
    
    const conflicts = [];
    
    data.forEach(function(row, index) {
      if (!row[0] || !row[1] || !row[2]) return;
      
      const rowDate = formatDate(new Date(row[0]));
      const status = row[9] || 'รอดำเนินการ';
      
      if (status === 'ยกเลิก' || status === JOB_STATUS.CANCELLED) return;
      if (rowDate !== date) return;
      
      const existingStartMinutes = timeToMinutes(formatTime(row[1]));
      const existingEndMinutes = timeToMinutes(formatTime(row[2]));
      
      if (newStartMinutes < existingEndMinutes && newEndMinutes > existingStartMinutes) {
        conflicts.push({
          rowNumber: index + 2,
          description: row[3] || '',
          startTime: formatTime(row[1]),
          endTime: formatTime(row[2]),
          location: row[4] || '',
          requester: row[5] || '',
          status: status
        });
      }
    });
    
    return conflicts;
    
  } catch (error) {
    console.error('Error finding conflicts:', error);
    return [];
  }
}

// ✅ SIMPLIFIED: สร้างแค่ RFI Calendar เท่านั้น (Primary Calendar)
function saveWorkRequirementFromRFI(data, hasConflict) {
  try {
    let sheet = SpreadsheetApp.openById(SURVEY_SPREADSHEET_ID).getSheetByName('requirement');
    
    if (!sheet) {
      sheet = SpreadsheetApp.openById(SURVEY_SPREADSHEET_ID).insertSheet('requirement');
      sheet.getRange(1, 1, 1, 13).setValues([
        ['ID', 'วันที่', 'เวลาเริ่ม', 'เวลาจบ', 'คำอธิบายงาน', 'สถานที่', 'ชื่อผู้ requirement', 
         'เมล requirement', 'หมายเหตุ', 'ทีมงาน', 'สถานะ', 'Calendar Event ID', 'อัปเดตล่าสุด']
      ]);
      sheet.getRange(1, 1, 1, 13).setFontWeight('bold');
    }
    
    // ✅ สร้างแค่ RFI Calendar Event (Primary Calendar)
    let rfiCalendarEventId = null;
    try {
      rfiCalendarEventId = createRFICalendarEvent(data);
      console.log('✅ RFI Calendar Event created:', rfiCalendarEventId);
    } catch (calendarError) {
      console.error('Failed to create RFI calendar event:', calendarError);
    }
    
    const lastRow = sheet.getLastRow();
    const nextRow = lastRow + 1;
    const currentTime = new Date();
    
    // สร้าง note พร้อมรายละเอียดงานที่ซ้อน + หมายเลขแถว
    let noteText = data.note || '';
    
    if (hasConflict) {
      const conflicts = findConflictingJobs(data.date, data.startTime, data.endTime);
      
      let conflictDetails = `⚠️ งาน RFI #${data.rfiId || 'N/A'} มีงานซ้อนทับ ${conflicts.length} งาน:\n`;
      conflicts.forEach(function(job, index) {
        conflictDetails += (index + 1) + '. [แถว ' + job.rowNumber + '] "' + job.description + '" ';
        conflictDetails += '(' + job.startTime + '-' + job.endTime + ') ';
        conflictDetails += 'ผู้ขอ: ' + job.requester + '\n';
      });
      
      noteText = conflictDetails + '\n📋 จาก RFI System\n' + (noteText ? 'หมายเหตุเพิ่มเติม: ' + noteText : '');
    } else {
      noteText = `📋 จาก RFI System | RFI #${data.rfiId || 'N/A'}`;
      if (noteText && data.note) {
        noteText += ' | ' + data.note;
      }
    }
    
    const conflictsForEmail = hasConflict ? findConflictingJobs(data.date, data.startTime, data.endTime) : [];
    
    const fullDescription = data.rfiId ? 
      `RFI #${data.rfiId} - ${data.description}` : 
      data.description;
    
    // ✅ 13 columns
    const newRowData = [
      data.uniqueId,
      data.date,
      data.startTime,
      data.endTime,
      fullDescription,
      data.location || '',
      data.requesterName,
      data.requesterEmail || '',
      noteText,
      '',
      'รอดำเนินการ',
      rfiCalendarEventId || '',
      currentTime
    ];
    
    sheet.getRange(nextRow, 1, 1, 13).setValues([newRowData]);
    
    // ✅ ส่งอีเมลแค่ Survey Email (ไม่ส่งถึง RFI Participants)
    let emailSent = false;
    try {
      emailSent = sendWorkNotificationToSurveyEmail(data, rfiCalendarEventId, hasConflict, conflictsForEmail);
    } catch (emailError) {
      console.error('Failed to send email:', emailError);
    }
    
    return {
      success: true,
      workId: nextRow,
      rfiCalendarEventId: rfiCalendarEventId,
      emailSent: emailSent
    };
    
  } catch (error) {
    console.error('Error in saveWorkRequirementFromRFI:', error);
    return {
      success: false,
      message: 'เกิดข้อผิดพลาด: ' + error.toString()
    };
  }
}

// ✅ ดึงสีจาก Resources Sheet (เฉพาะทีมที่ระบุใน assignedInspector)
function getTeamColors(assignedInspector) {
  try {
    // ถ้าไม่มีทีม return ว่าง
    if (!assignedInspector || String(assignedInspector).trim() === '') {
      console.log('⚠️ No assigned inspector');
      return {};
    }
    
    // แยกทีมจาก assignedInspector
    const teamString = String(assignedInspector).trim();
    const requestedTeams = teamString.split(',').map(t => t.trim()).filter(t => t.length > 0);
    
    if (requestedTeams.length === 0) {
      console.log('⚠️ No valid teams in assigned inspector');
      return {};
    }
    
    console.log(`🔍 Looking for colors for teams: ${requestedTeams.join(', ')}`);
    
    const sheet = SpreadsheetApp.openById(SURVEY_SPREADSHEET_ID).getSheetByName('Resources');
    
    if (!sheet) {
      console.log('⚠️ Resources sheet not found, using default colors');
      return {};
    }
    
    const lastRow = sheet.getLastRow();
    if (lastRow <= 1) {
      console.log('⚠️ No data in Resources sheet');
      return {};
    }
    
    // อ่าน column B (Team Name) และ column H (Color)
    const teamData = sheet.getRange(2, 2, lastRow - 1, 1).getValues(); // Column B = 2
    const colorData = sheet.getRange(2, 8, lastRow - 1, 1).getValues(); // Column H = 8
    
    const teamColors = {};
    
    // ค้นหาเฉพาะทีมที่ต้องการ
    for (let i = 0; i < teamData.length; i++) {
      const teamName = String(teamData[i][0] || '').trim();
      const colorValue = String(colorData[i][0] || '').trim(); // ✅ เก็บเป็น Hex Code ตามที่เป็น
      
      // เช็คว่าทีมนี้อยู่ในรายการที่ต้องการหรือไม่
      if (requestedTeams.includes(teamName) && colorValue) {
        teamColors[teamName] = getCalendarColor(colorValue);
        console.log(`✅ Team: ${teamName} → Color: ${colorValue}`);
      }
    }
    
    // เช็คว่ามีทีมไหนหาไม่เจอ
    requestedTeams.forEach(function(team) {
      if (!teamColors[team]) {
        console.log(`⚠️ Color not found for team: ${team} (using default BLUE)`);
        teamColors[team] = CalendarApp.EventColor.BLUE;
      }
    });
    
    console.log(`✅ Loaded ${Object.keys(teamColors).length} team colors`);
    return teamColors;
    
  } catch (error) {
    console.error('Error loading team colors:', error);
    return {};
  }
}

// แปลง Hex Color Code เป็น CalendarApp.EventColor ที่ใกล้เคียงที่สุด
function getCalendarColor(colorHex) {
  // ถ้าเป็นชื่อสีแบบเดิม (สำหรับ backward compatibility)
  const colorNameMap = {
    'PALE_BLUE': CalendarApp.EventColor.PALE_BLUE,
    'PALE_GREEN': CalendarApp.EventColor.PALE_GREEN,
    'MAUVE': CalendarApp.EventColor.MAUVE,
    'PALE_RED': CalendarApp.EventColor.PALE_RED,
    'YELLOW': CalendarApp.EventColor.YELLOW,
    'ORANGE': CalendarApp.EventColor.ORANGE,
    'CYAN': CalendarApp.EventColor.CYAN,
    'GRAY': CalendarApp.EventColor.GRAY,
    'BLUE': CalendarApp.EventColor.BLUE,
    'GREEN': CalendarApp.EventColor.GREEN,
    'RED': CalendarApp.EventColor.RED
  };
  
  const colorUpper = String(colorHex).toUpperCase();
  if (colorNameMap[colorUpper]) {
    return colorNameMap[colorUpper];
  }
  
  // ถ้าเป็น Hex Color Code (#FF6B6B)
  if (colorHex && colorHex.toString().startsWith('#')) {
    return hexToCalendarColor(colorHex);
  }
  
  // Default
  return CalendarApp.EventColor.BLUE;
}

// แปลง Hex Color เป็น RGB
function hexToRGB(hex) {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16)
  } : null;
}

// คำนวณระยะห่างระหว่างสี (Color Distance)
function colorDistance(rgb1, rgb2) {
  return Math.sqrt(
    Math.pow(rgb1.r - rgb2.r, 2) +
    Math.pow(rgb1.g - rgb2.g, 2) +
    Math.pow(rgb1.b - rgb2.b, 2)
  );
}

// แปลง Hex Color เป็น CalendarApp.EventColor ที่ใกล้เคียงที่สุด
function hexToCalendarColor(hexColor) {
  const inputRGB = hexToRGB(hexColor);
  if (!inputRGB) {
    console.log('⚠️ Invalid hex color:', hexColor);
    return CalendarApp.EventColor.BLUE;
  }
  
  // Google Calendar สีที่มี (ค่าประมาณ RGB)
  const calendarColors = [
    { name: 'PALE_BLUE', color: CalendarApp.EventColor.PALE_BLUE, rgb: {r: 161, g: 194, b: 250} },
    { name: 'PALE_GREEN', color: CalendarApp.EventColor.PALE_GREEN, rgb: {r: 183, g: 225, b: 205} },
    { name: 'MAUVE', color: CalendarApp.EventColor.MAUVE, rgb: {r: 162, g: 137, b: 209} },
    { name: 'PALE_RED', color: CalendarApp.EventColor.PALE_RED, rgb: {r: 244, g: 164, b: 164} },
    { name: 'YELLOW', color: CalendarApp.EventColor.YELLOW, rgb: {r: 251, g: 233, b: 131} },
    { name: 'ORANGE', color: CalendarApp.EventColor.ORANGE, rgb: {r: 255, g: 183, b: 134} },
    { name: 'CYAN', color: CalendarApp.EventColor.CYAN, rgb: {r: 137, g: 218, b: 235} },
    { name: 'GRAY', color: CalendarApp.EventColor.GRAY, rgb: {r: 158, g: 158, b: 158} },
    { name: 'BLUE', color: CalendarApp.EventColor.BLUE, rgb: {r: 66, g: 133, b: 244} },
    { name: 'GREEN', color: CalendarApp.EventColor.GREEN, rgb: {r: 51, g: 182, b: 121} },
    { name: 'RED', color: CalendarApp.EventColor.RED, rgb: {r: 234, g: 67, b: 53} }
  ];
  
  // หาสีที่ใกล้เคียงที่สุด
  let closestColor = calendarColors[0];
  let minDistance = colorDistance(inputRGB, calendarColors[0].rgb);
  
  for (let i = 1; i < calendarColors.length; i++) {
    const distance = colorDistance(inputRGB, calendarColors[i].rgb);
    if (distance < minDistance) {
      minDistance = distance;
      closestColor = calendarColors[i];
    }
  }
  
  console.log(`🎨 ${hexColor} → ${closestColor.name}`);
  return closestColor.color;
}

// ✅ FIXED: สร้าง RFI Calendar Event พร้อมสีและชื่อทีม
// ✅ FIXED: สร้าง RFI Calendar Event พร้อมสีและชื่อทีม
function createRFICalendarEvent(data) {
  try {
    console.log('========== Creating RFI Calendar Event (Primary) ==========');
    console.log('Guest parameter:', data.guest);
    console.log('Requester email:', data.requesterEmail);
    console.log('Assigned Inspector:', data.assignedInspector); // ✅ เพิ่ม log
    
    const startDateTime = new Date(data.date + 'T' + data.startTime + ':00');
    const endDateTime = new Date(data.date + 'T' + data.endTime + ':00');
    
    // ✅ สร้าง Title พร้อมชื่อทีม
    let title = data.rfiId ? 
      `📋 RFI #${data.rfiId} - ${data.description}` : 
      `📋 Survey Work - ${data.description}`;
    
    // ✅ เพิ่มชื่อทีมใน Title
    if (data.assignedInspector && String(data.assignedInspector).trim() !== '') {
      const teams = String(data.assignedInspector).trim().split(',').map(t => t.trim());
      const teamText = teams.join(', ');
      title += ` [${teamText}]`;
      console.log('✅ Team added to title:', teamText);
    }
    
    let description = '📋 งาน RFI Work Requirement\n';
    description += '👤 ผู้ requirement: ' + data.requesterName + '\n';
    description += '📝 รายละเอียด: ' + data.description + '\n';
    description += '📍 สถานที่: ' + data.location + '\n';
    description += '⏰ เวลา: ' + data.startTime + ' - ' + data.endTime + ' น.\n';
    
    // ✅ เพิ่มชื่อทีมใน Description
    if (data.assignedInspector && String(data.assignedInspector).trim() !== '') {
      description += '👥 ทีมงานตรวจสอบ: ' + data.assignedInspector + '\n';
      console.log('✅ Team added to description');
    }
    
    if (data.note) {
      description += '📌 หมายเหตุ: ' + data.note + '\n';
    }
    if (data.guest) {
      description += '👥 Guests: ' + data.guest + '\n';
    }
    description += '📅 วันที่สร้าง: ' + new Date().toLocaleString('th-TH');
    
    const calendar = CalendarApp.getCalendarById(CALENDAR_ID);
    if (!calendar) {
      throw new Error('ไม่สามารถเข้าถึง Primary Calendar ได้');
    }
    
    const event = calendar.createEvent(title, startDateTime, endDateTime, {
      description: description,
      location: data.location || 'ไม่ระบุ'
    });
    
    // ✅ ตั้งสีตามทีม
    if (data.assignedInspector && String(data.assignedInspector).trim() !== '') {
      console.log('🎨 Setting color for team:', data.assignedInspector);
      
      const teams = String(data.assignedInspector).trim().split(',').map(t => t.trim());
      const teamColors = getTeamColors(data.assignedInspector);
      
      // ใช้สีของทีมแรกที่พบ
      if (teams.length > 0 && teamColors[teams[0]]) {
        event.setColor(teamColors[teams[0]]);
        console.log('✅ Color set successfully for:', teams[0]);
      } else {
        console.log('⚠️ No color found, using default BLUE');
        event.setColor(CalendarApp.EventColor.BLUE);
      }
    } else {
      // ถ้าไม่มีทีม ใช้สีน้ำเงินเป็น default
      event.setColor(CalendarApp.EventColor.BLUE);
      console.log('ℹ️ No team assigned, using default BLUE');
    }
    
    // เพิ่ม Guests
    const guestEmails = [];
    
    if (data.guest) {
      const guestString = String(data.guest).trim();
      if (guestString !== '' && guestString.toLowerCase() !== 'null') {
        const customGuests = guestString
          .split(/[,;\n]/)
          .map(e => e.trim())
          .filter(e => e.length > 0 && e.includes('@'));
        
        guestEmails.push(...customGuests);
      }
    }
    
    if (data.requesterEmail && String(data.requesterEmail).includes('@')) {
      const reqEmail = String(data.requesterEmail).trim();
      if (!guestEmails.includes(reqEmail)) {
        guestEmails.push(reqEmail);
      }
    }
    
    const uniqueGuests = [...new Set(guestEmails)];
    
    if (uniqueGuests.length > 0) {
      uniqueGuests.forEach(function(email) {
        try {
          event.addGuest(email);
          console.log('✔ Added guest to RFI calendar:', email);
        } catch (guestAddError) {
          console.error('✗ Failed to add guest:', email);
        }
      });
    }
    
    event.addEmailReminder(60);
    event.addEmailReminder(15);
    
    console.log('✅ RFI Calendar event created:', event.getId());
    console.log('✅ Title:', title);
    
    return event.getId();
    
  } catch (error) {
    console.error('Error creating RFI calendar event:', error);
    throw error;
  }
}

// ✅ ส่งอีเมลแค่ Survey Email (parameter SurveyEmail เท่านั้น)
function sendWorkNotificationToSurveyEmail(data, rfiEventId, hasConflict, conflicts) {
  try {
    console.log('========== SEND EMAIL TO SURVEY EMAIL ==========');
    console.log('Survey Email:', data.surveyEmail);
    
    const quota = checkEmailQuota();
    console.log('📊 Current email quota:', quota);
    
    if (quota <= 1) {
      console.log('❌ Email quota too low');
      return false;
    }
    
    // ✅ ตรวจสอบว่ามี Survey Email หรือไม่
    if (!data.surveyEmail || String(data.surveyEmail).trim() === '' || !String(data.surveyEmail).includes('@')) {
      console.log('❌ No valid Survey Email found');
      return false;
    }
    
    const surveyEmailClean = String(data.surveyEmail).trim();
    
    const subject = hasConflict ? 
      '⚠️ งาน Survey ใหม่ (มีงานซ้อนทับ ' + conflicts.length + ' งาน)' : 
      '📋 งาน Survey ใหม่';
    
    const emailBody = createSurveyEmailHTML(data, rfiEventId, hasConflict, conflicts);
    
    console.log('📤 Sending to Survey Email:', surveyEmailClean);
    
    const sent = safeSendEmail({
      to: surveyEmailClean,
      subject: subject,
      htmlBody: emailBody,
      name: 'Survey Work Requirement System',
      replyTo: getAdminEmail()
    });
    
    if (sent) {
      console.log('✅ Survey Email sent successfully');
    } else {
      console.log('❌ Email failed');
    }
    
    return sent;
    
  } catch (error) {
    console.error('❌ Error sending Survey Email:', error);
    return false;
  }
}

function createSurveyEmailHTML(data, rfiEventId, hasConflict, conflicts) {
  let conflictWarning = '';
  
  if (hasConflict && conflicts && conflicts.length > 0) {
    let conflictTable = '<table style="width: 100%; border-collapse: collapse; margin: 10px 0;">';
    conflictTable += '<tr style="background-color: #ffe5cc;">';
    conflictTable += '<th style="border: 1px solid #ff9800; padding: 8px;">แถวที่</th>';
    conflictTable += '<th style="border: 1px solid #ff9800; padding: 8px;">งานที่ซ้อนทับ</th>';
    conflictTable += '<th style="border: 1px solid #ff9800; padding: 8px;">เวลา</th>';
    conflictTable += '<th style="border: 1px solid #ff9800; padding: 8px;">สถานที่</th>';
    conflictTable += '<th style="border: 1px solid #ff9800; padding: 8px;">ผู้ขอ</th>';
    conflictTable += '</tr>';
    
    conflicts.forEach(function(job) {
      conflictTable += '<tr>';
      conflictTable += '<td style="border: 1px solid #ddd; padding: 8px; text-align: center;">' + job.rowNumber + '</td>';
      conflictTable += '<td style="border: 1px solid #ddd; padding: 8px;">' + job.description + '</td>';
      conflictTable += '<td style="border: 1px solid #ddd; padding: 8px;">' + job.startTime + ' - ' + job.endTime + '</td>';
      conflictTable += '<td style="border: 1px solid #ddd; padding: 8px;">' + job.location + '</td>';
      conflictTable += '<td style="border: 1px solid #ddd; padding: 8px;">' + job.requester + '</td>';
      conflictTable += '</tr>';
    });
    
    conflictTable += '</table>';
    
    conflictWarning = `
    <div style="background-color: #fff3cd; border-left: 4px solid #ff9800; padding: 15px; margin: 20px 0;">
      <h3 style="color: #ff6b35; margin-top: 0;">⚠️ คำเตือน: มีงานซ้อนทับ ${conflicts.length} งาน</h3>
      <p>กรุณาตรวจสอบและดำเนินการ</p>
      ${conflictTable}
    </div>`;
  }
  
  const emailBody = `<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<style>
body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
h2 { color: ${hasConflict ? '#ff6b35' : '#2c5aa0'}; }
table { border-collapse: collapse; width: 100%; margin: 10px 0; }
td, th { border: 1px solid #ddd; padding: 8px; text-align: left; }
th { background-color: #f2f2f2; font-weight: bold; }
</style>
</head>
<body>
<h2>📋 แจ้งงาน Survey ใหม่</h2>
<p>เรียน Survey Team</p>
${conflictWarning}
<h3>รายละเอียดงาน</h3>
<table>
<tr><th>รายการ</th><th>รายละเอียด</th></tr>
${data.rfiId ? '<tr><th>RFI Number</th><td><strong>RFI #' + data.rfiId + '</strong></td></tr>' : ''}
<tr><th>คำอธิบายงาน</th><td>${data.description}</td></tr>
<tr><th>วันที่</th><td>${formatDateThai(data.date)}</td></tr>
<tr><th>เวลา</th><td><strong>${data.startTime} - ${data.endTime} น.</strong></td></tr>
<tr><th>สถานที่</th><td>${data.location}</td></tr>
<tr><th>ผู้ขอ</th><td>${data.requesterName}</td></tr>
${data.requesterEmail ? '<tr><th>อีเมลผู้ขอ</th><td>' + data.requesterEmail + '</td></tr>' : ''}
${data.guest ? '<tr><th>ผู้ร่วมงาน</th><td>' + data.guest + '</td></tr>' : ''}
${data.note ? '<tr><th>หมายเหตุ</th><td>' + data.note + '</td></tr>' : ''}
</table>

${rfiEventId ? '<p style="background-color: #f3e5f5; padding: 10px; border-radius: 5px;">🔗 Calendar Event ID: ' + rfiEventId + '</p>' : ''}

<hr>
<p style="color: #666; font-size: 12px;">
  อีเมลนี้ส่งถึง Survey Team<br>
  เวลาที่ส่ง: ${new Date().toLocaleString('th-TH')}
</p>
</body>
</html>`;
  
  return emailBody;
}

function highlightConflictingRow(rowIndex) {
  try {
    const sheet = SpreadsheetApp.openById(SURVEY_SPREADSHEET_ID).getSheetByName('requirement');
    if (!sheet || !rowIndex) return false;
    
    sheet.getRange(rowIndex, 1, 1, 13).setBackground('#FFE5CC');
    
    const noteCell = sheet.getRange(rowIndex, 9);
    noteCell.setFontColor('#CC0000');
    noteCell.setFontWeight('bold');
    
    console.log('✅ Highlighted conflicting row:', rowIndex);
    return true;
    
  } catch (error) {
    console.error('Error highlighting row:', error);
    return false;
  }
}

function saveRFIMapping(rfiId, workId) {
  try {
    let sheet = SpreadsheetApp.openById(SURVEY_SPREADSHEET_ID).getSheetByName('RFI_Survey_Mapping');
    
    if (!sheet) {
      sheet = SpreadsheetApp.openById(SURVEY_SPREADSHEET_ID).insertSheet('RFI_Survey_Mapping');
      sheet.getRange(1, 1, 1, 4).setValues([
        ['RFI ID', 'Survey Work ID', 'Created Date', 'Status']
      ]);
      sheet.getRange(1, 1, 1, 4).setFontWeight('bold').setBackground('#f0f0f0');
    }
    
    const lastRow = sheet.getLastRow();
    sheet.getRange(lastRow + 1, 1, 1, 4).setValues([[
      rfiId,
      workId,
      new Date(),
      'Active'
    ]]);
    
    console.log('RFI mapping saved:', rfiId, '->', workId);
    return true;
  } catch (error) {
    console.error('Error saving mapping:', error);
    return false;
  }
}

function formatConflictsForAppSheet(conflicts) {
  if (!conflicts || conflicts.length === 0) return [];
  
  return conflicts.map(function(job) {
    return {
      row: job.rowNumber,
      description: job.description,
      time: job.startTime + ' - ' + job.endTime,
      location: job.location,
      requester: job.requester,
      status: job.status
    };
  });
}

// ===== POSTPONE RFI INSPECTION (SIMPLIFIED - Primary Calendar เท่านั้น) =====

function postponeRFIInspection(
  rfiNumber, 
  Description, 
  newDate, 
  newStartTime, 
  newEndTime, 
  postponeReason = '', 
  requesterEmail = '',
  guestEmails = '',
  newLocation = '', 
  Assigned_Inspector = '',  // ✅ เพิ่ม parameter
  sendEmail = true, 
  searchDays = 60
) {
  Logger.log(`📅 [SIMPLIFIED] Starting RFI postponement for: ${rfiNumber}`);
  Logger.log(`👥 Assigned Inspector: ${Assigned_Inspector}`);
  
  const validation = validatePostponeInputs(rfiNumber, Description, newDate, newStartTime, newEndTime);
  if (!validation.valid) {
    Logger.log(`❌ Validation failed: ${validation.error}`);
    return {
      success: false,
      error: validation.error,
      rfiNumber: rfiNumber,
      rfiDescription: Description,
      eventsFound: 0,
      eventsUpdated: 0,
      emailsSent: false
    };
  }

  const cleanRfiNumber = rfiNumber.trim();
  const cleanDescription = Description ? Description.trim() : '';
  
  let result = {
    success: false,
    rfiNumber: cleanRfiNumber,
    rfiDescription: cleanDescription,
    rfiEventsFound: 0,
    rfiEventsUpdated: 0,
    emailsSent: false,
    participants: [],
    updatedRFIEvents: [],
    error: null,
    message: '',
    originalDate: null,
    newDate: newDate,
    newStartTime: newStartTime,
    newEndTime: newEndTime
  };

  try {
    // Step 1: ค้นหา Calendar Events ใน Primary Calendar
    Logger.log("🔍 Step 1: Searching Primary Calendar Events...");
    const rfiSearchResult = searchCalendarEventsByRFIAndDescription(cleanRfiNumber, cleanDescription, CALENDAR_ID, searchDays);
    
    if (rfiSearchResult.success && rfiSearchResult.events.length > 0) {
      result.rfiEventsFound = rfiSearchResult.events.length;
      result.originalDate = rfiSearchResult.events[0].startTime.toDateString();
      Logger.log(`✅ Found ${result.rfiEventsFound} RFI calendar events`);
    } else {
      result.error = `No calendar events found for RFI: ${cleanRfiNumber} / ${cleanDescription}`;
      result.message = result.error;
      Logger.log(`⚠️ ${result.error}`);
      return result;
    }

    // Step 2: สร้างวันที่และเวลาใหม่
    Logger.log("⏰ Step 2: Creating new date/time...");
    const newDateTime = createNewDateTime(newDate, newStartTime, newEndTime);
    
    if (!newDateTime.valid) {
      result.error = newDateTime.error;
      result.message = result.error;
      return result;
    }

    // Step 3: สร้างรายชื่อผู้รับจาก Parameters
    Logger.log("👥 Step 3: Preparing participant list...");
    const allParticipants = new Set();

    if (requesterEmail && String(requesterEmail).trim() !== '' && String(requesterEmail).includes('@')) {
      allParticipants.add(String(requesterEmail).trim());
    }

    if (guestEmails) {
      const guestString = String(guestEmails).trim();
      if (guestString !== '' && guestString.toLowerCase() !== 'null') {
        const guestList = guestString
          .split(/[,;\n]/)
          .map(email => email.trim())
          .filter(email => email.length > 0 && email.includes('@'));
        
        guestList.forEach(email => allParticipants.add(email));
      }
    }

    result.participants = Array.from(allParticipants);
    Logger.log(`👥 Total participants: ${result.participants.length}`);

    // Step 4: อัปเดต Primary Calendar Events
    Logger.log("📝 Step 4: Updating Primary Calendar Events...");
    
    for (let i = 0; i < rfiSearchResult.events.length; i++) {
      const eventInfo = rfiSearchResult.events[i];
      
      try {
        const updateSuccess = updateCalendarEventV2(
          eventInfo,
          CALENDAR_ID,
          newDateTime.startTime,
          newDateTime.endTime,
          postponeReason,
          newLocation,
          Assigned_Inspector  // ✅ ส่ง Assigned_Inspector
        );
        
        if (updateSuccess.success) {
          result.rfiEventsUpdated++;
          result.updatedRFIEvents.push({
            eventId: eventInfo.eventId,
            title: updateSuccess.newTitle,
            calendarType: 'RFI'
          });
          Logger.log(`✅ Event updated: "${eventInfo.title}"`);
        }
        
      } catch (updateError) {
        Logger.log(`❌ Error updating event: ${updateError.toString()}`);
      }
    }

    // Step 5: ส่งอีเมลแจ้งการเลื่อนนัด (ถึง RFI Participants เท่านั้น)
    if (sendEmail && result.rfiEventsUpdated > 0) {
      Logger.log("📧 Step 5: Sending postponement notifications...");
      
      const emailResult = sendPostponementNotification(
        cleanRfiNumber,
        cleanDescription,
        postponeReason,
        result.updatedRFIEvents,
        requesterEmail,
        guestEmails
      );
      
      result.emailsSent = emailResult.success;
      Logger.log(`📧 Email: ${emailResult.success ? 'SENT' : 'FAILED'}`);
      Logger.log(`📧 Total recipients: ${emailResult.totalRecipients || 0}`);
    }

    // กำหนดผลลัพธ์
    result.success = result.rfiEventsUpdated > 0;
    
    if (result.success) {
      result.message = `Postponed ${result.rfiEventsUpdated} event(s) to ${newDate} ${newStartTime}-${newEndTime}`;
    } else {
      result.message = `No appointments were postponed for RFI ${cleanRfiNumber}`;
    }

  } catch (error) {
    result.error = error.toString();
    result.message = `Error postponing RFI ${cleanRfiNumber}: ${result.error}`;
    Logger.log(`❌ Unexpected error: ${result.error}`);
  }

  // แสดงสรุปผล
  Logger.log("\n" + "=".repeat(50));
  Logger.log("📅 RFI POSTPONEMENT SUMMARY (SIMPLIFIED):");
  Logger.log(`🆔 RFI Number: ${result.rfiNumber}`);
  Logger.log(`📅 New Date: ${result.newDate} ${result.newStartTime}-${result.newEndTime}`);
  Logger.log(`📅 Events Updated: ${result.rfiEventsUpdated}/${result.rfiEventsFound}`);
  Logger.log(`📧 Emails Sent: ${result.emailsSent ? 'YES' : 'NO'}`);
  Logger.log(`✅ Overall Success: ${result.success ? 'YES' : 'NO'}`);

  return result;
}

// ===== CANCEL RFI INSPECTION (SIMPLIFIED - Primary Calendar เท่านั้น) =====

function cancelRFIInspection(
  rfiNumber,
  Description,
  cancelReason = '',
  requesterEmail = '',
  guestEmails = '',
  sendEmail = true,
  searchDays = 60
) {
  Logger.log(`🚫 [SIMPLIFIED] Starting RFI cancellation for: ${rfiNumber}`);
  
  if (!rfiNumber || rfiNumber.trim() === '') {
    return {
      success: false,
      error: 'RFI Number is required',
      rfiNumber: rfiNumber,
      eventsFound: 0,
      eventsDeleted: 0,
      emailsSent: false
    };
  }

  const cleanRfiNumber = rfiNumber.trim();
  const cleanDescription = Description ? Description.trim() : '';
  
  let result = {
    success: false,
    rfiNumber: cleanRfiNumber,
    rfiDescription: cleanDescription,
    rfiEventsFound: 0,
    rfiEventsDeleted: 0,
    emailsSent: false,
    participants: [],
    deletedRFIEvents: [],
    error: null,
    message: ''
  };

  try {
    // Step 1: สร้างรายชื่อผู้รับอีเมล
    Logger.log("👥 Step 1: Preparing participant list...");
    const allParticipants = new Set();
    
    if (requesterEmail && String(requesterEmail).trim() !== '' && String(requesterEmail).includes('@')) {
      allParticipants.add(String(requesterEmail).trim());
    }
    
    if (guestEmails) {
      const guestString = String(guestEmails).trim();
      if (guestString !== '' && guestString.toLowerCase() !== 'null') {
        const guestList = guestString
          .split(/[,;\n]/)
          .map(email => email.trim())
          .filter(email => email.length > 0 && email.includes('@'));
        
        guestList.forEach(email => allParticipants.add(email));
      }
    }

    result.participants = Array.from(allParticipants);
    Logger.log(`👥 Total participants: ${result.participants.length}`);

    // Step 2: ค้นหา Primary Calendar Events
    Logger.log("🔍 Step 2: Searching Primary Calendar Events...");
    const rfiSearchResult = searchCalendarEventsByRFIAndDescription(cleanRfiNumber, cleanDescription, CALENDAR_ID, searchDays);
    
    if (rfiSearchResult.success && rfiSearchResult.events.length > 0) {
      result.rfiEventsFound = rfiSearchResult.events.length;
      Logger.log(`✅ Found ${result.rfiEventsFound} calendar events`);
    } else {
      result.error = `No calendar events found for RFI: ${cleanRfiNumber} / ${cleanDescription}`;
      result.message = result.error;
      Logger.log(`⚠️ ${result.error}`);
      return result;
    }

    // Step 3: ลบ Primary Calendar Events
    Logger.log("🗑️ Step 3: Deleting Primary Calendar Events...");
    
    for (let i = 0; i < rfiSearchResult.events.length; i++) {
      const eventInfo = rfiSearchResult.events[i];
      
      try {
        const deleteSuccess = deleteCalendarEventV2(eventInfo, CALENDAR_ID);
        
        if (deleteSuccess.success) {
          result.rfiEventsDeleted++;
          result.deletedRFIEvents.push({
            eventId: eventInfo.eventId,
            title: eventInfo.title,
            calendarType: 'RFI'
          });
          Logger.log(`✅ Event deleted: "${eventInfo.title}"`);
        }
        
      } catch (deleteError) {
        Logger.log(`❌ Error deleting event: ${deleteError.toString()}`);
      }
    }

    // Step 4: ส่งอีเมลแจ้งการยกเลิก (ถึง RFI Participants เท่านั้น)
    if (sendEmail && result.rfiEventsDeleted > 0) {
      Logger.log("📧 Step 4: Sending cancellation notifications...");
      
      const emailResult = sendCancellationNotification(
        cleanRfiNumber,
        cleanDescription,
        cancelReason,
        result.deletedRFIEvents,
        requesterEmail,
        guestEmails
      );
      
      result.emailsSent = emailResult.success;
      Logger.log(`📧 Email: ${emailResult.success ? 'SENT' : 'FAILED'}`);
      Logger.log(`📧 Total recipients: ${emailResult.totalRecipients || 0}`);
    }

    // กำหนดผลลัพธ์
    result.success = result.rfiEventsDeleted > 0;
    
    if (result.success) {
      result.message = `Cancelled RFI ${cleanRfiNumber}: ${result.rfiEventsDeleted} event(s) deleted`;
    } else {
      result.message = `No changes made for RFI ${cleanRfiNumber}`;
    }

  } catch (error) {
    result.error = error.toString();
    result.message = `Error cancelling RFI ${cleanRfiNumber}: ${result.error}`;
    Logger.log(`❌ Unexpected error: ${result.error}`);
  }

  // แสดงสรุปผล
  Logger.log("\n" + "=".repeat(50));
  Logger.log("🚫 RFI CANCELLATION SUMMARY (SIMPLIFIED):");
  Logger.log(`🆔 RFI Number: ${result.rfiNumber}`);
  Logger.log(`🗑️ Events Deleted: ${result.rfiEventsDeleted}/${result.rfiEventsFound}`);
  Logger.log(`📧 Emails Sent: ${result.emailsSent ? 'YES' : 'NO'}`);
  Logger.log(`✅ Overall Success: ${result.success ? 'YES' : 'NO'}`);

  return result;
}

// ===== HELPER FUNCTIONS =====

function searchCalendarEventsByRFIAndDescription(rfiNumber, description, calendarId, searchDays = 60) {
  Logger.log(`🔍 Searching calendar "${calendarId}" for RFI Number: ${rfiNumber}`);
  
  try {
    const calendar = CalendarApp.getCalendarById(calendarId);
    if (!calendar) {
      throw new Error(`Cannot access calendar: ${calendarId}`);
    }

    const startDate = new Date();
    startDate.setDate(startDate.getDate() - searchDays);
    
    const endDate = new Date();
    endDate.setDate(endDate.getDate() + searchDays);
    
    const allEvents = calendar.getEvents(startDate, endDate);
    Logger.log(`📊 Total events in range: ${allEvents.length}`);
    
    if (allEvents.length === 0) {
      return { success: false, message: 'No events found in date range', events: [] };
    }

    const matchingEvents = [];
    
    const rfiSearchPatterns = [
      `RFI #${rfiNumber}`,
      `RFI-${rfiNumber}`,
      `#${rfiNumber}`,
      rfiNumber
    ];
    
    allEvents.forEach((event, index) => {
      try {
        const title = event.getTitle() || '';
        const eventDescription = event.getDescription() || '';
        const searchableText = (title + ' ' + eventDescription).toLowerCase();
        
        const rfiMatch = rfiSearchPatterns.some(pattern => 
          searchableText.includes(pattern.toLowerCase())
        );
        
        if (rfiMatch) {
          Logger.log(`✅ Found matching event: "${title}"`);
          
          matchingEvents.push({
            event: event,
            eventId: event.getId(),
            title: title,
            description: eventDescription,
            startTime: event.getStartTime(),
            endTime: event.getEndTime(),
            location: event.getLocation() || '',
            created: event.getDateCreated(),
            lastUpdated: event.getLastUpdated()
          });
        }
        
      } catch (eventError) {
        Logger.log(`⚠️ Error processing event ${index + 1}: ${eventError.toString()}`);
      }
    });
    
    matchingEvents.sort((a, b) => b.created - a.created);
    
    return {
      success: matchingEvents.length > 0,
      message: `Found ${matchingEvents.length} events for RFI: ${rfiNumber}`,
      events: matchingEvents
    };
    
  } catch (error) {
    Logger.log(`❌ Error searching calendar events: ${error.toString()}`);
    return { success: false, error: error.toString(), events: [] };
  }
}

function updateCalendarEventV2(eventInfo, calendarId, newStartTime, newEndTime, postponeReason, newLocation, assignedInspector) {
  Logger.log(`📝 Updating event in "${calendarId}": ${eventInfo.eventId}`);
  
  try {
    const calendar = CalendarApp.getCalendarById(calendarId);
    if (!calendar) {
      return { success: false, error: `Cannot access calendar: ${calendarId}` };
    }
    
    const event = calendar.getEventById(eventInfo.eventId);
    
    if (!event) {
      return { success: false, error: `Event not found: ${eventInfo.eventId}` };
    }

    const originalStartTime = event.getStartTime();
    const originalEndTime = event.getEndTime();
    const originalLocation = event.getLocation();
    const originalDescription = event.getDescription() || '';
    
    event.setTime(newStartTime, newEndTime);
    Logger.log(`✅ Updated time: ${newStartTime} - ${newEndTime}`);
    
    const finalLocation = newLocation && newLocation.trim() !== '' ? newLocation.trim() : originalLocation;
    if (finalLocation) {
      event.setLocation(finalLocation);
      Logger.log(`📍 Updated location: ${finalLocation}`);
    }
    
    const currentTitle = event.getTitle();
    let newTitle = currentTitle;
    
    if (!currentTitle.includes('📅 POSTPONED')) {
      newTitle = `📅 POSTPONED - ${currentTitle}`;
      event.setTitle(newTitle);
      Logger.log(`🏷️ Updated title: ${newTitle}`);
    }
    
    // ✅ ดึงทีมงานจาก title เดิม (ถ้ามี [Team Name])
    const teamMatch = currentTitle.match(/\[([^\]]+)\]$/);
    const currentTeam = teamMatch ? teamMatch[1] : null;
    
    // ✅ อัปเดตสีถ้ามีทีมงานใหม่
    if (assignedInspector && String(assignedInspector).trim() !== '') {
      const teams = String(assignedInspector).trim().split(',').map(t => t.trim());
      const teamColors = getTeamColors(assignedInspector);  // ✅ ส่ง assignedInspector
      
      // ถ้า event นี้มีทีมเดิม ให้อัปเดตสีตามทีมเดิม
      if (currentTeam && teams.includes(currentTeam) && teamColors[currentTeam]) {
        event.setColor(teamColors[currentTeam]);
        Logger.log(`🎨 Updated color for team: ${currentTeam}`);
      } else if (teams.length > 0 && teamColors[teams[0]]) {
        // ถ้าไม่มีทีมเดิม ใช้สีของทีมแรก
        event.setColor(teamColors[teams[0]]);
        Logger.log(`🎨 Set color for team: ${teams[0]}`);
      }
    }
    
    const postponementRecord = `
┌─────────────────────────────────────┐
📅 INSPECTION POSTPONED
└─────────────────────────────────────┘

⏰ Original Schedule:
   📅 ${originalStartTime.toLocaleDateString('th-TH', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
   })}
   🕒 ${originalStartTime.toLocaleTimeString('th-TH', { 
      hour: '2-digit', 
      minute: '2-digit' 
   })} - ${originalEndTime.toLocaleTimeString('th-TH', { 
      hour: '2-digit', 
      minute: '2-digit' 
   })}
   📍 ${originalLocation || 'No location'}

🔄 New Schedule:
   📅 ${newStartTime.toLocaleDateString('th-TH', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
   })}
   🕒 ${newStartTime.toLocaleTimeString('th-TH', { 
      hour: '2-digit', 
      minute: '2-digit' 
   })} - ${newEndTime.toLocaleTimeString('th-TH', { 
      hour: '2-digit', 
      minute: '2-digit' 
   })}
   📍 ${finalLocation || 'No location'}

${assignedInspector && String(assignedInspector).trim() !== '' ? `👥 ทีมงานตรวจ: ${assignedInspector}\n` : ''}
${postponeReason ? `💬 Reason:\n   ${postponeReason}\n` : ''}
📌 Postponed on: ${new Date().toLocaleString('th-TH')}
🤖 Updated by: AppSheet RFI System (Simplified)

┌─────────────────────────────────────┐
`;
    
    const newDescription = postponementRecord + '\n' + originalDescription;
    event.setDescription(newDescription);
    
    Logger.log(`✅ Event updated successfully in ${calendarId}`);
    
    return {
      success: true,
      newTitle: newTitle,
      newLocation: finalLocation
    };
    
  } catch (error) {
    Logger.log(`❌ Error updating event: ${error.toString()}`);
    return {
      success: false,
      error: error.toString()
    };
  }
}

function deleteCalendarEventV2(eventInfo, calendarId) {
  Logger.log(`🗑️ Deleting event from "${calendarId}": ${eventInfo.eventId}`);
  
  try {
    const calendar = CalendarApp.getCalendarById(calendarId);
    if (!calendar) {
      return { success: false, error: `Cannot access calendar: ${calendarId}` };
    }
    
    const event = calendar.getEventById(eventInfo.eventId);
    
    if (!event) {
      return { success: false, error: `Event not found: ${eventInfo.eventId}` };
    }

    event.deleteEvent();
    Logger.log(`✅ Event deleted from ${calendarId}: "${eventInfo.title}"`);
    
    return {
      success: true,
      eventId: eventInfo.eventId,
      title: eventInfo.title
    };
    
  } catch (error) {
    Logger.log(`❌ Error deleting event: ${error.toString()}`);
    return {
      success: false,
      error: error.toString()
    };
  }
}

function sendPostponementNotification(rfiNumber, Description, postponeReason, updatedEvents, requesterEmail, guestEmails) {
  Logger.log(`📧 Sending postponement notification to RFI Participants`);
  
  try {
    const quota = checkEmailQuota();
    if (quota <= 0) {
      Logger.log('❌ Email quota exceeded');
      return { success: false, message: "Email quota exceeded" };
    }

    const allRecipients = new Set();
    
    if (requesterEmail && String(requesterEmail).trim() !== '' && String(requesterEmail).includes('@')) {
      allRecipients.add(String(requesterEmail).trim());
      Logger.log(`📧 Added requester: ${String(requesterEmail).trim()}`);
    }
    
    if (guestEmails) {
      const guestString = String(guestEmails).trim();
      if (guestString !== '' && guestString.toLowerCase() !== 'null') {
        const guestList = guestString
          .split(/[,;\n]/)
          .map(email => email.trim())
          .filter(email => email.length > 0 && email.includes('@'));
        
        guestList.forEach(email => {
          allRecipients.add(email);
          Logger.log(`📧 Added guest: ${email}`);
        });
      }
    }
    
    const finalRecipients = Array.from(allRecipients);
    
    if (finalRecipients.length === 0) {
      Logger.log('❌ No recipients found');
      return { success: false, message: "No recipients" };
    }
    
    Logger.log(`📧 Total recipients: ${finalRecipients.length}`);

    const subject = `📅 POSTPONED - RFI #${rfiNumber} Inspection Rescheduled`;
    
    let eventsList = '<ul>';
    updatedEvents.forEach(evt => {
      eventsList += `<li><strong>${evt.title}</strong></li>`;
    });
    eventsList += '</ul>';
    
    const htmlMessage = `<!DOCTYPE html>
<html>
<head><meta charset="UTF-8"><style>
body { font-family: Arial, sans-serif; margin: 20px; }
h2 { color: #ff6b35; }
table { border-collapse: collapse; width: 100%; margin: 10px 0; }
td, th { border: 1px solid #ddd; padding: 8px; }
th { background-color: #f2f2f2; }
.info-box { background-color: #fff3cd; border-left: 4px solid #ffc107; padding: 15px; margin: 15px 0; }
</style></head>
<body>
<h2>📅 RFI Inspection Postponed</h2>

<div class="info-box">
  <strong>⚠️ Important Notice:</strong> The scheduled inspection has been postponed.
</div>

<h3>RFI Details:</h3>
<table>
<tr><th style="width: 30%;">RFI Number</th><td><strong>${rfiNumber}</strong></td></tr>
<tr><th>Description</th><td>${Description}</td></tr>
${postponeReason ? `<tr><th>Reason for Postponement</th><td>${postponeReason}</td></tr>` : ''}
</table>

<h3>Updated Calendar Events:</h3>
${eventsList}

<p style="margin-top: 20px;"><strong>Note:</strong> Please check your calendar for the new schedule details.</p>

<hr>
<p style="color: #666; font-size: 12px;">
📨 <strong>Recipients:</strong> RFI Participants<br>
🤖 Sent by: RFI System (Simplified) - Postponement Notification<br>
🕐 Time: ${new Date().toLocaleString('th-TH')}
</p>
</body>
</html>`;
    
    const recipientList = finalRecipients.join(',');
    
    const sent = safeSendEmail({
      to: recipientList,
      subject: subject,
      htmlBody: htmlMessage,
      name: 'RFI System - Postponement Notification'
    });
    
    Logger.log(`📧 Postponement email: ${sent ? 'SENT' : 'FAILED'}`);
    Logger.log(`📧 Sent to ${finalRecipients.length} recipients`);
    
    return {
      success: sent,
      totalSent: sent ? finalRecipients.length : 0,
      totalRecipients: finalRecipients.length
    };
    
  } catch (error) {
    Logger.log(`❌ Email error: ${error.toString()}`);
    return { success: false, error: error.toString() };
  }
}

function sendCancellationNotification(rfiNumber, Description, cancelReason, deletedEvents, requesterEmail, guestEmails) {
  Logger.log(`📧 Sending cancellation notification to RFI Participants`);
  
  try {
    const quota = checkEmailQuota();
    if (quota <= 0) {
      Logger.log('❌ Email quota exceeded');
      return { success: false, message: "Email quota exceeded" };
    }

    const allRecipients = new Set();
    
    if (requesterEmail && String(requesterEmail).trim() !== '' && String(requesterEmail).includes('@')) {
      allRecipients.add(String(requesterEmail).trim());
      Logger.log(`📧 Added requester: ${String(requesterEmail).trim()}`);
    }
    
    if (guestEmails) {
      const guestString = String(guestEmails).trim();
      if (guestString !== '' && guestString.toLowerCase() !== 'null') {
        const guestList = guestString
          .split(/[,;\n]/)
          .map(email => email.trim())
          .filter(email => email.length > 0 && email.includes('@'));
        
        guestList.forEach(email => {
          allRecipients.add(email);
          Logger.log(`📧 Added guest: ${email}`);
        });
      }
    }
    
    const finalRecipients = Array.from(allRecipients);
    
    if (finalRecipients.length === 0) {
      Logger.log('❌ No recipients found');
      return { success: false, message: "No recipients" };
    }
    
    Logger.log(`📧 Total recipients: ${finalRecipients.length}`);

    const subject = `🚫 CANCELLED - RFI #${rfiNumber} Inspection Cancelled`;
    
    let eventsList = '<ul>';
    deletedEvents.forEach(evt => {
      eventsList += `<li><strong>${evt.title}</strong></li>`;
    });
    eventsList += '</ul>';
    
    const htmlMessage = `<!DOCTYPE html>
<html>
<head><meta charset="UTF-8"><style>
body { font-family: Arial, sans-serif; margin: 20px; }
h2 { color: #dc3545; }
table { border-collapse: collapse; width: 100%; margin: 10px 0; }
td, th { border: 1px solid #ddd; padding: 8px; }
th { background-color: #f2f2f2; }
.alert-box { background-color: #f8d7da; border-left: 4px solid #dc3545; padding: 15px; margin: 15px 0; }
</style></head>
<body>
<h2>🚫 RFI Inspection Cancelled</h2>

<div class="alert-box">
  <strong>⚠️ Important Notice:</strong> The scheduled inspection has been <strong>cancelled</strong>.
</div>

<h3>RFI Details:</h3>
<table>
<tr><th style="width: 30%;">RFI Number</th><td><strong>${rfiNumber}</strong></td></tr>
<tr><th>Description</th><td>${Description}</td></tr>
${cancelReason ? `<tr><th>Reason for Cancellation</th><td>${cancelReason}</td></tr>` : ''}
</table>

<h3>Deleted Calendar Events:</h3>
${eventsList}

<p style="margin-top: 20px;"><strong>Note:</strong> All related calendar events have been removed.</p>

<hr>
<p style="color: #666; font-size: 12px;">
📨 <strong>Recipients:</strong> RFI Participants<br>
🤖 Sent by: RFI System (Simplified) - Cancellation Notification<br>
🕐 Time: ${new Date().toLocaleString('th-TH')}
</p>
</body>
</html>`;
    
    const recipientList = finalRecipients.join(',');
    
    const sent = safeSendEmail({
      to: recipientList,
      subject: subject,
      htmlBody: htmlMessage,
      name: 'RFI System - Cancellation Notification'
    });
    
    Logger.log(`📧 Cancellation email: ${sent ? 'SENT' : 'FAILED'}`);
    Logger.log(`📧 Sent to ${finalRecipients.length} recipients`);
    
    return {
      success: sent,
      totalSent: sent ? finalRecipients.length : 0,
      totalRecipients: finalRecipients.length
    };
    
  } catch (error) {
    Logger.log(`❌ Email error: ${error.toString()}`);
    return { success: false, error: error.toString() };
  }
}

// ===== VALIDATION & UTILITY FUNCTIONS =====

function validatePostponeInputs(rfiNumber, Description, newDate, newStartTime, newEndTime) {
  if (!rfiNumber || rfiNumber.trim() === '') {
    return { valid: false, error: "RFI Number is required" };
  }

  if (!Description || Description.trim() === '') {
    return { valid: false, error: "RFI Description is required" };
  }

  if (!newDate || newDate.trim() === '') {
    return { valid: false, error: "New date is required" };
  }

  const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
  if (!dateRegex.test(newDate)) {
    return { valid: false, error: "Date must be in YYYY-MM-DD format" };
  }

  const inputDate = new Date(newDate);
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  
  if (inputDate < today) {
    return { valid: false, error: "New date cannot be in the past" };
  }

  const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
  
  if (!newStartTime || !timeRegex.test(newStartTime)) {
    return { valid: false, error: "Start time must be in HH:MM format" };
  }
  
  if (!newEndTime || !timeRegex.test(newEndTime)) {
    return { valid: false, error: "End time must be in HH:MM format" };
  }

  const startMinutes = timeToMinutes(newStartTime);
  const endMinutes = timeToMinutes(newEndTime);
  
  if (startMinutes >= endMinutes) {
    return { valid: false, error: "Start time must be before end time" };
  }

  return { valid: true };
}

function createNewDateTime(dateStr, startTimeStr, endTimeStr) {
  try {
    const startDate = new Date(dateStr + 'T00:00:00+07:00');
    const [startHours, startMinutes] = startTimeStr.split(':').map(Number);
    startDate.setHours(startHours, startMinutes, 0, 0);
    
    const endDate = new Date(dateStr + 'T00:00:00+07:00');
    const [endHours, endMinutes] = endTimeStr.split(':').map(Number);
    endDate.setHours(endHours, endMinutes, 0, 0);
    
    return {
      valid: true,
      startTime: startDate,
      endTime: endDate
    };
    
  } catch (error) {
    return {
      valid: false,
      error: `Invalid date/time format: ${error.toString()}`
    };
  }
}

function timeToMinutes(timeString) {
  if (!timeString) return 0;
  const parts = timeString.split(':');
  return parseInt(parts[0]) * 60 + parseInt(parts[1]);
}

function formatDate(date) {
  if (!date) return '';
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  return year + '-' + month + '-' + day;
}

function formatTime(timeValue) {
  if (!timeValue) return '';
  
  if (typeof timeValue === 'string') {
    return timeValue;
  }
  
  if (timeValue instanceof Date) {
    const hours = String(timeValue.getHours()).padStart(2, '0');
    const minutes = String(timeValue.getMinutes()).padStart(2, '0');
    return hours + ':' + minutes;
  }
  
  if (typeof timeValue === 'number') {
    const totalMinutes = Math.round(timeValue * 24 * 60);
    const hours = Math.floor(totalMinutes / 60);
    const minutes = totalMinutes % 60;
    return String(hours).padStart(2, '0') + ':' + String(minutes).padStart(2, '0');
  }
  
  return timeValue.toString();
}

function formatDateThai(dateString) {
  if (!dateString) return '';
  
  const months = [
    'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน',
    'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'
  ];
  
  const date = new Date(dateString + 'T00:00:00');
  const day = date.getDate();
  const month = months[date.getMonth()];
  const year = date.getFullYear() + 543;
  
  return day + ' ' + month + ' ' + year;
}

function createErrorResponse(code, message) {
  return {
    success: false,
    error: code,
    message: message,
    timestamp: new Date().toISOString()
  };
}

function getEmailList() {
  try {
    let emailSheet = SpreadsheetApp.openById(SURVEY_SPREADSHEET_ID).getSheetByName('Email');
    
    if (!emailSheet) {
      emailSheet = SpreadsheetApp.openById(SURVEY_SPREADSHEET_ID).insertSheet('Email');
      emailSheet.getRange(1, 1, 1, 3).setValues([
        ['Email', 'Role', 'Name']
      ]);
      emailSheet.getRange(1, 1, 1, 3).setFontWeight('bold');
      
      return [{
        email: 'surveymarine048@gmail.com',
        role: 'Admin', 
        name: 'ผู้ดูแลระบบ'
      }];
    }
    
    const lastRow = emailSheet.getLastRow();
    if (lastRow <= 1) {
      return [{
        email: 'surveymarine048@gmail.com',
        role: 'Admin', 
        name: 'ผู้ดูแลระบบ'
      }];
    }
    
    const emailData = emailSheet.getRange(2, 1, lastRow - 1, 3).getValues();
    const emailList = [];
    
    for (let i = 0; i < emailData.length; i++) {
      const email = String(emailData[i][0] || '').trim();
      const role = String(emailData[i][1] || '').trim();
      const name = String(emailData[i][2] || '').trim();
      
      if (email && email.includes('@') && email.length > 5) {
        emailList.push({
          email: email,
          role: role,
          name: name
        });
      }
    }
    
    if (emailList.length === 0) {
      return [{
        email: 'surveymarine048@gmail.com',
        role: 'Admin', 
        name: 'ผู้ดูแลระบบ'
      }];
    }
    
    return emailList;
    
  } catch (error) {
    console.error('Error getting email list:', error);
    return [{
      email: 'surveymarine048@gmail.com',
      role: 'Admin', 
      name: 'ผู้ดูแลระบบ'
    }];
  }
}

function getAdminEmail() {
  try {
    const emailList = getEmailList();
    const admin = emailList.find(emailInfo => emailInfo.role === 'Admin');
    
    if (admin && admin.email) {
      return admin.email;
    }
    
    if (emailList.length > 0 && emailList[0].email) {
      return emailList[0].email;
    }
    
    return 'surveymarine048@gmail.com';
    
  } catch (error) {
    console.error('Error getting admin email:', error);
    return 'surveymarine048@gmail.com';
  }
}

function checkEmailQuota() {
  try {
    const remainingQuota = MailApp.getRemainingDailyQuota();
    console.log('Remaining email quota:', remainingQuota);
    return remainingQuota;
  } catch (error) {
    console.error('Error checking email quota:', error);
    return 0;
  }
}

function safeSendEmail(emailParams) {
  try {
    const quota = checkEmailQuota();
    if (quota <= 0) {
      console.log('Email quota exceeded, skipping email');
      return false;
    }
    
    MailApp.sendEmail(emailParams);
    return true;
  } catch (error) {
    console.error('Error sending email:', error);
    return false;
  }
}

const JOB_STATUS = {
  PENDING: 'รอดำเนินการ',
  ASSIGNED: 'มอบหมายทีมแล้ว',
  IN_PROGRESS: 'กำลังดำเนินการ',
  COMPLETED: 'เสร็จสิ้น',
  CANCELLED: 'ยกเลิก'
};

// ===== TEST FUNCTIONS =====

function testIntegration() {
  const testData = {
    uniqueId: 'TEST-UNIQUE-001',
    rfiId: 'RFI-TEST-001',
    date: '2025-01-20',
    startTime: '10:00',
    endTime: '12:00',
    description: 'ทดสอบระบบ Integration Simplified',
    location: 'สำนักงานทดสอบ',
    requesterName: 'ผู้ทดสอบ',
    requesterEmail: 'test@example.com',
    note: 'ทดสอบส่งอีเมลแค่ Survey Email และแยกสีตามทีม',
    guest: 'guest1@example.com, guest2@example.com',
    surveyEmail: 'survey@example.com',
    assignedInspector: 'Survey Team A,Lab Team B'  // ✅ ทดสอบหลายทีม
  };
  
  const result = processRFItoSurvey(testData);
  console.log(JSON.stringify(result, null, 2));
  return result;
}

function testPostpone() {
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  const tomorrowStr = tomorrow.toISOString().split('T')[0];
  
  const result = postponeRFIInspection(
    "RFI-TEST-001",
    "Test RFI Description",
    tomorrowStr,
    "14:00",
    "16:00",
    "Testing simplified postponement",
    "requester@test.com",
    "guest1@test.com,guest2@test.com",
    "New Test Location",
    "Survey Team A,Lab Team B",  // ✅ ทดสอบหลายทีม
    false,
    30
  );
  
  Logger.log(JSON.stringify(result, null, 2));
  return result;
}

function testCancel() {
  const result = cancelRFIInspection(
    "RFI-TEST-001",
    "Test RFI Description",
    "Testing simplified cancellation",
    "requester@test.com",
    "guest1@test.com,guest2@test.com",
    false,
    30
  );
  
  Logger.log(JSON.stringify(result, null, 2));
  return result;
}

function testCalendarAccess() {
  try {
    const cal1 = CalendarApp.getCalendarById('primary');
    Logger.log('Primary Calendar: ' + (cal1 ? 'OK' : 'FAIL'));
    
    if (cal1) {
      Logger.log('Primary Calendar Name: ' + cal1.getName());
    }
  } catch (error) {
    Logger.log('Error: ' + error.toString());
  }
}

// ✅ ทดสอบการแปลงสี Hex เป็น Calendar Color
function testColorConversion() {
  const testColors = [
    '#FF6B6B',  // สีแดง
    '#4ECDC4',  // สีเขียวมิ้นต์
    '#45B7D1',  // สีฟ้า
    '#FFA07A',  // สีส้ม
    '#FFD93D',  // สีเหลือง
    '#95E1D3',  // สีเขียวอ่อน
    '#A29BFE',  // สีม่วง
    '#DFE6E9',  // สีเทา
    '#6C5CE7',  // สีม่วงเข้ม
    '#00B894',  // สีเขียว
    '#E74C3C'   // สีแดงเข้ม
  ];
  
  Logger.log('========== COLOR CONVERSION TEST ==========');
  testColors.forEach(function(hex) {
    const rgb = hexToRGB(hex);
    Logger.log(`${hex} → RGB(${rgb.r}, ${rgb.g}, ${rgb.b})`);
    hexToCalendarColor(hex); // จะแสดง console.log ด้านใน
  });
  Logger.log('========== TEST COMPLETE ==========');
}
