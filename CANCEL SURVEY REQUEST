// ====== CANCEL SURVEY REQUEST ======

function cancelSurveyRequest(
  uniqueId,
  description = '',
  cancelReason = '',
  requesterEmail = '',
  guestEmails = '',
  surveyEmail = '',
  sendEmail = true,
  searchDays = 60
) {
  Logger.log(`üö´ Starting Survey cancellation for: ${uniqueId}`);
  
  if (!uniqueId || uniqueId.trim() === '') {
    return {
      success: false,
      error: 'Unique ID is required',
      uniqueId: uniqueId,
      eventsFound: 0,
      eventsDeleted: 0,
      emailsSent: false
    };
  }

  const cleanUniqueId = uniqueId.trim();
  const cleanDescription = description ? description.trim() : '';
  
  let result = {
    success: false,
    uniqueId: cleanUniqueId,
    surveyDescription: cleanDescription,
    surveyEventsFound: 0,
    surveyEventsDeleted: 0,
    emailsSent: false,
    participants: [],
    deletedSurveyEvents: [],
    error: null,
    message: ''
  };

  try {
    Logger.log("üë• Step 1: Preparing participant list...");
    const allParticipants = new Set();
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Requester Email
    if (requesterEmail && String(requesterEmail).trim() !== '' && String(requesterEmail).includes('@')) {
      allParticipants.add(String(requesterEmail).trim());
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Guest Emails
    if (guestEmails) {
      const guestString = String(guestEmails).trim();
      if (guestString !== '' && guestString.toLowerCase() !== 'null') {
        const guestList = guestString
          .split(/[,;\n]/)
          .map(email => email.trim())
          .filter(email => email.length > 0 && email.includes('@'));
        
        guestList.forEach(email => allParticipants.add(email));
      }
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Survey Email
    if (surveyEmail && String(surveyEmail).trim() !== '' && String(surveyEmail).includes('@')) {
      allParticipants.add(String(surveyEmail).trim());
    }

    result.participants = Array.from(allParticipants);
    Logger.log(`üë• Total participants: ${result.participants.length}`);

    Logger.log("üîç Step 2: Searching Calendar Events...");
    const surveySearchResult = searchCalendarEventsByUniqueId(cleanUniqueId, cleanDescription, CALENDAR_ID, searchDays);
    
    if (surveySearchResult.success && surveySearchResult.events.length > 0) {
      result.surveyEventsFound = surveySearchResult.events.length;
      Logger.log(`‚úÖ Found ${result.surveyEventsFound} calendar events`);
    } else {
      result.error = `No calendar events found for Survey: ${cleanUniqueId} / ${cleanDescription}`;
      result.message = result.error;
      Logger.log(`‚ö†Ô∏è ${result.error}`);
      return result;
    }

    Logger.log("üóëÔ∏è Step 3: Deleting Calendar Events...");
    
    for (let i = 0; i < surveySearchResult.events.length; i++) {
      const eventInfo = surveySearchResult.events[i];
      
      try {
        const deleteSuccess = deleteCalendarEvent(eventInfo, CALENDAR_ID);
        
        if (deleteSuccess.success) {
          result.surveyEventsDeleted++;
          result.deletedSurveyEvents.push({
            eventId: eventInfo.eventId,
            title: eventInfo.title,
            calendarType: 'Survey'
          });
          Logger.log(`‚úÖ Event deleted: "${eventInfo.title}"`);
        }
        
      } catch (deleteError) {
        Logger.log(`‚ùå Error deleting event: ${deleteError.toString()}`);
      }
    }

    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
    if (sendEmail && result.surveyEventsDeleted > 0 && result.participants.length > 0) {
      Logger.log("üìß Step 4: Sending cancellation notifications...");
      
      const emailResult = sendSurveyCancellationNotification(
        cleanUniqueId,
        cleanDescription,
        cancelReason,
        result.deletedSurveyEvents,
        result.participants
      );
      
      result.emailsSent = emailResult.success;
      Logger.log(`üìß Email: ${emailResult.success ? 'SENT' : 'FAILED'}`);
      Logger.log(`üìß Total recipients: ${emailResult.totalRecipients || 0}`);
    }

    result.success = result.surveyEventsDeleted > 0;
    
    if (result.success) {
      result.message = `‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Survey ${cleanUniqueId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏•‡∏ö ${result.surveyEventsDeleted} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;
    } else {
      result.message = `‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Survey ${cleanUniqueId}`;
    }

  } catch (error) {
    result.error = error.toString();
    result.message = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Survey ${cleanUniqueId}: ${result.error}`;
    Logger.log(`‚ùå Unexpected error: ${result.error}`);
  }

  Logger.log("\n" + "=".repeat(50));
  Logger.log("üö´ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Survey:");
  Logger.log(`üÜî Unique ID: ${result.uniqueId}`);
  Logger.log(`üóëÔ∏è ‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß: ${result.surveyEventsDeleted}/${result.surveyEventsFound}`);
  Logger.log(`üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${result.emailsSent ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`);
  Logger.log(`‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.success ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`);

  return result;
}

// ===== CONFIG: ‡πÉ‡∏™‡πà Calendar ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà =====
// ‡∏ß‡∏¥‡∏ò‡∏µ‡∏´‡∏≤ Calendar ID:
// 1. ‡πÄ‡∏õ‡∏¥‡∏î Google Calendar
// 2. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏° 3 ‡∏à‡∏∏‡∏î‡∏Ç‡πâ‡∏≤‡∏á Calendar ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
// 3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Settings and sharing"
// 4. ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏´‡∏≤ "Calendar ID" (‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô xxx@group.calendar.google.com)

// Calendar ‡∏´‡∏•‡∏±‡∏Å
const CALENDAR_ID = "developeritd75@gmail.com";

// Calendar ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏•‡∏≤‡∏¢ Calendar):
const SURVEY_WORK_CALENDAR = "8ef1934c9a71220a0f47c1d5227bb6ca26b8bed6d5e54c568036b54117f51620@group.calendar.google.com";
const SURVEY_WORK_CENTRAL_CALENDAR = "6cbf6620e2630d70b763e8fe7f04d40b59d13da14a4c39cbb17687c69778b135@group.calendar.google.com";

// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Calendar Events ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Unique ID ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
function searchCalendarEventsByUniqueId(uniqueId, description, calendarId, searchDays = 60) {
  Logger.log(`üîç Searching calendar "${calendarId}" for Unique ID: ${uniqueId}`);
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö calendarId
    if (!calendarId || calendarId.trim() === '' || calendarId === 'your-calendar-id@group.calendar.google.com') {
      Logger.log('‚ùå CALENDAR_ID is not configured!');
      Logger.log('üìù Please set CALENDAR_ID at the top of the script');
      return { 
        success: false, 
        message: 'CALENDAR_ID is not configured. Please set it in the script.', 
        events: [] 
      };
    }
    
    const calendar = CalendarApp.getCalendarById(calendarId);
    if (!calendar) {
      Logger.log(`‚ùå Cannot access calendar: ${calendarId}`);
      Logger.log('üìù Possible reasons:');
      Logger.log('   1. Calendar ID is incorrect');
      Logger.log('   2. Calendar does not exist');
      Logger.log('   3. You do not have permission to access this calendar');
      throw new Error(`Cannot access calendar: ${calendarId}`);
    }

    const startDate = new Date();
    startDate.setDate(startDate.getDate() - searchDays);
    
    const endDate = new Date();
    endDate.setDate(endDate.getDate() + searchDays);
    
    const allEvents = calendar.getEvents(startDate, endDate);
    Logger.log(`üìä Total events in range: ${allEvents.length}`);
    
    if (allEvents.length === 0) {
      return { success: false, message: 'No events found in date range', events: [] };
    }

    const matchingEvents = [];
    const cleanUniqueId = uniqueId.toLowerCase().trim();
    const cleanDescription = description ? description.toLowerCase().trim() : '';
    
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ uniqueId ‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
    const uniqueIdSearchPatterns = [
      cleanUniqueId,                    // ‡∏ï‡∏±‡∏ß ID ‡πÄ‡∏ï‡πá‡∏°‡πÜ
      `id: ${cleanUniqueId}`,          // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ID: xxx
      `(${cleanUniqueId})`,            // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏ô‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö
      `[${cleanUniqueId}]`,            // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏ô‡∏ß‡∏á‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
      `id:${cleanUniqueId}`,           // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ
      `- ${cleanUniqueId}`,            // ‡∏°‡∏µ dash ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤
      `${cleanUniqueId} -`,            // ‡∏°‡∏µ dash ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
    ];
    
    allEvents.forEach((event, index) => {
      try {
        const title = event.getTitle() || '';
        const eventDescription = event.getDescription() || '';
        const searchableText = (title + ' ' + eventDescription).toLowerCase();
        
        // ‚úÖ ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å uniqueId ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
        let uniqueIdMatch = false;
        let matchedPattern = '';
        
        for (const pattern of uniqueIdSearchPatterns) {
          if (searchableText.includes(pattern)) {
            uniqueIdMatch = true;
            matchedPattern = pattern;
            break;
          }
        }
        
        // ‡∏ñ‡πâ‡∏≤ uniqueId ‡∏ï‡∏£‡∏á
        if (uniqueIdMatch) {
          // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ description ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° (optional filter)
          if (cleanDescription && !searchableText.includes(cleanDescription)) {
            Logger.log(`‚ö†Ô∏è UniqueId match but description mismatch: "${title}"`);
            Logger.log(`   Looking for description: "${cleanDescription}"`);
            // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ strict ‡πÉ‡∏´‡πâ skip ‡∏î‡πâ‡∏ß‡∏¢ return
            // return; 
            // ‡πÅ‡∏ï‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ uniqueId ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏Å
          }
          
          Logger.log(`‚úÖ Found matching event: "${title}"`);
          Logger.log(`   Matched pattern: "${matchedPattern}"`);
          
          matchingEvents.push({
            event: event,
            eventId: event.getId(),
            title: title,
            description: eventDescription,
            startTime: event.getStartTime(),
            endTime: event.getEndTime(),
            location: event.getLocation() || '',
            created: event.getDateCreated(),
            lastUpdated: event.getLastUpdated()
          });
        }
        
      } catch (eventError) {
        Logger.log(`‚ö†Ô∏è Error processing event ${index + 1}: ${eventError.toString()}`);
      }
    });
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á (‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
    matchingEvents.sort((a, b) => b.created - a.created);
    
    if (matchingEvents.length === 0) {
      Logger.log(`‚ùå No events found for uniqueId: ${uniqueId}`);
      Logger.log(`   Searched patterns: ${uniqueIdSearchPatterns.join(', ')}`);
    }
    
    return {
      success: matchingEvents.length > 0,
      message: `Found ${matchingEvents.length} events for Unique ID: ${uniqueId}`,
      events: matchingEvents
    };
    
  } catch (error) {
    Logger.log(`‚ùå Error searching calendar events: ${error.toString()}`);
    return { success: false, error: error.toString(), events: [] };
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Debug: ‡πÅ‡∏™‡∏î‡∏á Event ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° uniqueId ‡∏ó‡∏µ‡πà‡∏û‡∏ö
function debugListAllEventsWithUniqueIds(calendarId = CALENDAR_ID, searchDays = 30) {
  Logger.log("üîç DEBUG: Listing all events with potential uniqueIds...\n");
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö calendarId
    if (!calendarId || calendarId.trim() === '' || calendarId === 'your-calendar-id@group.calendar.google.com') {
      Logger.log('‚ùå CALENDAR_ID is not configured!');
      Logger.log('üìù Please set CALENDAR_ID at the top of the script');
      return;
    }
    
    const calendar = CalendarApp.getCalendarById(calendarId);
    
    if (!calendar) {
      Logger.log(`‚ùå Cannot access calendar: ${calendarId}`);
      Logger.log('\nüìù How to get your Calendar ID:');
      Logger.log('   1. Open Google Calendar (calendar.google.com)');
      Logger.log('   2. Find your calendar in the left sidebar');
      Logger.log('   3. Click the 3-dot menu next to it');
      Logger.log('   4. Select "Settings and sharing"');
      Logger.log('   5. Scroll down to find "Calendar ID"');
      Logger.log('   6. Copy it (format: xxx@group.calendar.google.com or xxx@gmail.com)');
      Logger.log('\nüí° Or use your primary calendar: "primary"');
      return;
    }
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - searchDays);
    
    const endDate = new Date();
    endDate.setDate(endDate.getDate() + searchDays);
    
    const allEvents = calendar.getEvents(startDate, endDate);
    Logger.log(`üìä Total events found: ${allEvents.length}\n`);
    
    allEvents.forEach((event, index) => {
      const title = event.getTitle() || '';
      const desc = event.getDescription() || '';
      
      Logger.log(`--- Event ${index + 1} ---`);
      Logger.log(`Title: ${title}`);
      Logger.log(`Description: ${desc.substring(0, 100)}...`);
      Logger.log(`Start: ${event.getStartTime()}`);
      
      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏¢‡∏Å uniqueId ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
      const idPatterns = [
        /ID:\s*([^\s\)]+)/i,           // ID: xxx
        /\(([A-Z0-9-]+)\)/,            // (XXX-123)
        /\[([A-Z0-9-]+)\]/,            // [XXX-123]
      ];
      
      let foundId = null;
      for (const pattern of idPatterns) {
        const match = (title + ' ' + desc).match(pattern);
        if (match) {
          foundId = match[1];
          break;
        }
      }
      
      if (foundId) {
        Logger.log(`üÜî Detected UniqueId: ${foundId}`);
      }
      
      Logger.log('');
    });
    
  } catch (error) {
    Logger.log(`‚ùå Error: ${error.toString()}`);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
function testSearchWithUniqueId() {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CALENDAR_ID ‡∏Å‡πà‡∏≠‡∏ô
  if (!CALENDAR_ID || CALENDAR_ID === 'your-calendar-id@group.calendar.google.com') {
    Logger.log('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CALENDAR_ID ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!');
    Logger.log('üìù ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤ CALENDAR_ID ‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á script');
    return;
  }
  
  // ‡πÉ‡∏ä‡πâ UniqueId ‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏à‡∏≤‡∏Å debugListAllEventsWithUniqueIds)
  const testCases = [
    { uniqueId: "SW-0001", description: "" },
    { uniqueId: "SW-0002", description: "" },
    { uniqueId: "SW-0003", description: "" },
    { uniqueId: "SW-0012", description: "" },
  ];
  
  testCases.forEach(test => {
    Logger.log(`\n${'='.repeat(50)}`);
    Logger.log(`Testing: ${test.uniqueId}`);
    Logger.log('='.repeat(50));
    
    const result = searchCalendarEventsByUniqueId(
      test.uniqueId,
      test.description,
      CALENDAR_ID,
      60
    );
    
    Logger.log(`Result: ${result.success ? '‚úÖ FOUND' : '‚ùå NOT FOUND'}`);
    Logger.log(`Events: ${result.events.length}`);
    
    if (result.success) {
      result.events.forEach((evt, idx) => {
        Logger.log(`  ${idx + 1}. ${evt.title}`);
      });
    }
  });
}

// ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Calendar ID =====
function testCalendarAccess() {
  Logger.log('üß™ Testing Calendar Access...\n');
  
  if (!CALENDAR_ID || CALENDAR_ID === 'your-calendar-id@group.calendar.google.com') {
    Logger.log('‚ùå CALENDAR_ID is not configured!');
    Logger.log('üìù Please set CALENDAR_ID at the top of the script\n');
    
    // ‡πÅ‡∏™‡∏î‡∏á Calendar ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ
    Logger.log('üìã Available Calendars:');
    const calendars = CalendarApp.getAllCalendars();
    calendars.forEach((cal, index) => {
      Logger.log(`   ${index + 1}. ${cal.getName()}`);
      Logger.log(`      ID: ${cal.getId()}`);
      Logger.log('');
    });
    return;
  }
  
  try {
    const calendar = CalendarApp.getCalendarById(CALENDAR_ID);
    
    if (calendar) {
      Logger.log(`‚úÖ Successfully connected to: ${calendar.getName()}`);
      Logger.log(`üìÖ Calendar ID: ${CALENDAR_ID}`);
      Logger.log(`üé® Color: ${calendar.getColor()}`);
      Logger.log(`üìù Description: ${calendar.getDescription() || 'N/A'}`);
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô events
      const now = new Date();
      const oneMonthAgo = new Date();
      oneMonthAgo.setDate(now.getDate() - 30);
      
      const events = calendar.getEvents(oneMonthAgo, now);
      Logger.log(`üìä Events in last 30 days: ${events.length}`);
      
    } else {
      Logger.log('‚ùå Cannot access calendar');
      Logger.log(`üìù Calendar ID used: ${CALENDAR_ID}`);
    }
    
  } catch (error) {
    Logger.log(`‚ùå Error: ${error.toString()}`);
  }
}
// ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Survey
function sendSurveyCancellationNotification(uniqueId, description, cancelReason, deletedEvents, participants) {
  Logger.log(`üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Survey`);
  
  try {
    const quota = checkEmailQuota();
    if (quota <= 0) {
      Logger.log('‚ùå Email quota exceeded');
      return { success: false, message: "Email quota exceeded" };
    }

    if (participants.length === 0) {
      Logger.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö');
      return { success: false, message: "No recipients" };
    }
    
    Logger.log(`üìß ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${participants.length}`);

    const subject = `üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß - Survey Work ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (ID: ${uniqueId})`;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Events ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
    let eventsList = '<ul>';
    deletedEvents.forEach(evt => {
      eventsList += `<li><strong>${evt.title}</strong></li>`;
    });
    eventsList += '</ul>';
    
    const htmlMessage = `<!DOCTYPE html>
<html>
<head><meta charset="UTF-8"><style>
body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
h2 { color: #dc3545; }
table { border-collapse: collapse; width: 100%; margin: 10px 0; }
td, th { border: 1px solid #ddd; padding: 8px; }
th { background-color: #f2f2f2; font-weight: bold; }
.alert-box { background-color: #f8d7da; border-left: 4px solid #dc3545; padding: 15px; margin: 15px 0; }
</style></head>
<body>
<h2>üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô Survey</h2>

<div class="alert-box">
  <strong>‚ö†Ô∏è ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:</strong> ‡∏á‡∏≤‡∏ô Survey ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å<strong>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</strong>‡πÅ‡∏•‡πâ‡∏ß
</div>

<h3>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Survey:</h3>
<table>
<tr><th style="width: 30%;">Unique ID</th><td><strong>${uniqueId}</strong></td></tr>
<tr><th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th><td>${description || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</td></tr>
${cancelReason ? `<tr><th>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</th><td>${cancelReason}</td></tr>` : ''}
</table>

<h3>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Calendar:</h3>
${eventsList}

<p style="margin-top: 20px;"><strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> Calendar Event ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß</p>

<hr>
<p style="color: #666; font-size: 12px;">
üì® <strong>‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö:</strong> ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô Survey<br>
ü§ñ ‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢: ‡∏£‡∏∞‡∏ö‡∏ö Survey Work - ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å<br>
üïê ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}
</p>
</body>
</html>`;
    
    const recipientList = participants.join(',');
    
    const sent = safeSendEmail({
      to: recipientList,
      subject: subject,
      htmlBody: htmlMessage,
      name: '‡∏£‡∏∞‡∏ö‡∏ö Survey Work - ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    });
    
    Logger.log(`üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å: ${sent ? '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}`);
    Logger.log(`üìß ‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á ${participants.length} ‡∏Ñ‡∏ô`);
    
    return {
      success: sent,
      totalSent: sent ? participants.length : 0,
      totalRecipients: participants.length
    };
    
  } catch (error) {
    Logger.log(`‚ùå Email error: ${error.toString()}`);
    return { success: false, error: error.toString() };
  }
}

// ====== DELETE CALENDAR EVENT ======

function deleteCalendarEvent(eventInfo, calendarId) {
  Logger.log(`üóëÔ∏è Attempting to delete event: ${eventInfo.title}`);
  
  try {
    const calendar = CalendarApp.getCalendarById(calendarId);
    
    if (!calendar) {
      throw new Error(`Cannot access calendar: ${calendarId}`);
    }
    
    // ‡∏î‡∏∂‡∏á event ‡∏à‡∏≤‡∏Å calendar ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ eventId
    const event = calendar.getEventById(eventInfo.eventId);
    
    if (!event) {
      Logger.log(`‚ö†Ô∏è Event not found: ${eventInfo.eventId}`);
      return {
        success: false,
        error: 'Event not found',
        eventId: eventInfo.eventId
      };
    }
    
    // ‡∏•‡∏ö event
    event.deleteEvent();
    
    Logger.log(`‚úÖ Event deleted successfully: ${eventInfo.title}`);
    
    return {
      success: true,
      eventId: eventInfo.eventId,
      title: eventInfo.title
    };
    
  } catch (error) {
    Logger.log(`‚ùå Error deleting event: ${error.toString()}`);
    return {
      success: false,
      error: error.toString(),
      eventId: eventInfo.eventId
    };
  }
}

// ====== CHECK EMAIL QUOTA ======

function checkEmailQuota() {
  try {
    const quota = MailApp.getRemainingDailyQuota();
    Logger.log(`üìß Email quota remaining: ${quota}`);
    return quota;
  } catch (error) {
    Logger.log(`‚ö†Ô∏è Cannot check email quota: ${error.toString()}`);
    return 100; // ‡∏Ñ‡πà‡∏≤ default
  }
}

// ====== SAFE SEND EMAIL ======

function safeSendEmail(options) {
  try {
    if (!options.to || options.to.trim() === '') {
      Logger.log('‚ùå No recipient email provided');
      return false;
    }
    
    const params = {
      to: options.to,
      subject: options.subject || 'No Subject',
      htmlBody: options.htmlBody || options.body || '',
    };
    
    if (options.name) {
      params.name = options.name;
    }
    
    if (options.cc) {
      params.cc = options.cc;
    }
    
    if (options.bcc) {
      params.bcc = options.bcc;
    }
    
    MailApp.sendEmail(params);
    Logger.log(`‚úÖ Email sent to: ${options.to}`);
    
    return true;
    
  } catch (error) {
    Logger.log(`‚ùå Error sending email: ${error.toString()}`);
    return false;
  }
}
