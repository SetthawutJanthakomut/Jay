// ===== CANCEL WORK - SEND NOTIFICATION ONLY (‡πÑ‡∏°‡πà‡∏•‡∏ö Events) =====

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏•‡∏ö Calendar Events)
 * @param {Array|string} emailList - ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (Array ‡∏´‡∏£‡∏∑‡∏≠ comma-separated string)
 * @param {string} workDescription - ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏á‡∏≤‡∏ô / ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô
 * @param {boolean} sendEmail - ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (default: true)
 * @returns {Object} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
 */
function cancelWorkNotification(emailList, workDescription = '', sendEmail = true) {
  Logger.log(`üìß [AppSheet] Starting work cancellation notification`);
  
  // Validate Email List
  if (!emailList || (Array.isArray(emailList) && emailList.length === 0) || 
      (typeof emailList === 'string' && emailList.trim() === '')) {
    const error = "Email list is required";
    Logger.log(`‚ùå ${error}`);
    return {
      success: false,
      error: error,
      emailsSent: false,
      recipients: []
    };
  }

  let result = {
    success: false,
    emailsSent: false,
    recipients: [],
    quotaUsed: 0,
    error: null,
    message: ''
  };

  try {
    // ‡πÅ‡∏õ‡∏•‡∏á emailList ‡πÄ‡∏õ‡πá‡∏ô Array
    let recipientList = [];
    if (typeof emailList === 'string') {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏´‡πâ‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ comma, semicolon ‡∏´‡∏£‡∏∑‡∏≠ newline
      recipientList = emailList.split(/[,;\n]/)
        .map(email => email.trim())
        .filter(email => email !== '' && isValidEmail(email));
    } else if (Array.isArray(emailList)) {
      recipientList = emailList
        .map(email => email.trim())
        .filter(email => email !== '' && isValidEmail(email));
    }

    // ‡∏•‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥
    recipientList = [...new Set(recipientList)];

    if (recipientList.length === 0) {
      result.error = "No valid email addresses found";
      result.message = result.error;
      Logger.log(`‚ùå ${result.error}`);
      return result;
    }

    result.recipients = recipientList;
    Logger.log(`üë• Found ${recipientList.length} valid recipients`);

    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
    if (sendEmail) {
      Logger.log("üìß Sending cancellation notification email...");
      
      const emailResult = sendCancellationEmail(
        recipientList,
        workDescription
      );
      
      result.emailsSent = emailResult.success;
      result.quotaUsed = emailResult.quotaUsed || 0;
      
      if (emailResult.success) {
        result.success = true;
        result.message = `Cancellation notification sent successfully to ${recipientList.length} recipient(s)`;
        Logger.log(`‚úÖ ${result.message}`);
      } else {
        result.error = emailResult.error || "Failed to send email";
        result.message = result.error;
        Logger.log(`‚ùå ${result.error}`);
      }
      
    } else {
      result.message = `Email sending disabled. Would notify ${recipientList.length} recipient(s)`;
      Logger.log(`‚ö†Ô∏è ${result.message}`);
    }

  } catch (error) {
    result.error = error.toString();
    result.message = `Error sending cancellation notification: ${result.error}`;
    Logger.log(`‚ùå Unexpected error: ${result.error}`);
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
  Logger.log("\n" + "=".repeat(50));
  Logger.log("üìß WORK CANCELLATION NOTIFICATION SUMMARY:");
  Logger.log(`üìß Emails Sent: ${result.emailsSent ? 'YES' : 'NO'}`);
  Logger.log(`üë• Recipients: ${result.recipients.length}`);
  Logger.log(`üìä Quota Used: ${result.quotaUsed}`);
  Logger.log(`‚úÖ Overall Success: ${result.success ? 'YES' : 'NO'}`);
  Logger.log("=".repeat(50));

  return result;
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô
 * @param {Array} recipients - ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
 * @param {string} workDescription - ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏á‡∏≤‡∏ô / ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô
 * @returns {Object} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
 */
function sendCancellationEmail(recipients, workDescription) {
  Logger.log(`üìß Preparing cancellation email`);
  
  if (!recipients || recipients.length === 0) {
    Logger.log("‚ö†Ô∏è No recipients to notify");
    return { success: false, error: "No recipients to notify" };
  }

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö quota
    const quota = checkEmailQuota();
    Logger.log(`üìä Current email quota: ${quota}`);
    
    if (quota <= 0) {
      Logger.log('‚ùå Email quota exceeded');
      return { success: false, error: "Email quota exceeded" };
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á recipient list (BCC ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß)
    const recipientList = recipients.join(',');
    
    const subject = `RFI Request - ${workDescription || 'Work Appointment'}`;
    
    const currentDate = new Date().toLocaleString('th-TH', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
    
    const htmlMessage = `
      <div style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; max-width: 600px; margin: 0 auto; color: #333;">
        
        <!-- Header -->
        <div style="background: linear-gradient(135deg, #dc3545 0%, #c82333 100%); color: white; padding: 30px; border-radius: 8px 8px 0 0; text-align: center;">
          <h1 style="margin: 0; font-size: 28px; font-weight: 300;">üö´ Appointment Cancelled</h1>
          <p style="margin: 10px 0 0 0; font-size: 14px; opacity: 0.9;">RFI Management System Notification</p>
        </div>
        
        <!-- Main Content -->
        <div style="background: white; padding: 30px; border-radius: 0 0 8px 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
          
          <!-- Alert Box -->
          <div style="background: #fff3cd; border-left: 4px solid #ffc107; padding: 20px; border-radius: 4px; margin-bottom: 25px;">
            <h2 style="margin: 0 0 10px 0; color: #856404; font-size: 20px;">‚ö†Ô∏è Important Notification</h2>
            <p style="margin: 0; color: #856404; font-size: 16px;">The following work appointment has been cancelled</p>
          </div>
          
          <!-- Work Info -->
          <div style="background: #f8f9fa; border: 2px solid #dee2e6; padding: 20px; border-radius: 6px; margin-bottom: 25px;">
            <h3 style="margin: 0 0 15px 0; color: #495057; font-size: 18px;">üìã Work Details</h3>
            <table style="width: 100%; border-collapse: collapse;">
              ${workDescription ? `
              <tr>
                <td style="padding: 8px 0; color: #6c757d; font-weight: 500; vertical-align: top;">Work Description:</td>
                <td style="padding: 8px 0; color: #212529; line-height: 1.6; font-weight: 600;">${workDescription}</td>
              </tr>
              ` : ''}
              <tr>
                <td style="padding: 8px 0; color: #6c757d; font-weight: 500;">Status:</td>
                <td style="padding: 8px 0;">
                  <span style="background: #dc3545; color: white; padding: 4px 12px; border-radius: 4px; font-weight: 600; font-size: 14px;">
                    CANCELLED
                  </span>
                </td>
              </tr>
              <tr>
                <td style="padding: 8px 0; color: #6c757d; font-weight: 500;">Cancelled on:</td>
                <td style="padding: 8px 0; color: #212529;">${currentDate}</td>
              </tr>
            </table>
          </div>
          
          <!-- Action Items -->
          <div style="background: #d1ecf1; border: 1px solid #bee5eb; padding: 20px; border-radius: 6px; margin-bottom: 25px;">
            <h3 style="margin: 0 0 15px 0; color: #0c5460; font-size: 16px;">‚úÖ What You Need to Know</h3>
            <ul style="margin: 0; padding-left: 20px; color: #0c5460; line-height: 1.8;">
              <li><strong>All related appointments have been cancelled</strong></li>
              <li>Please remove any corresponding events from your calendar</li>
              <li>No further action is required from you at this time</li>
              <li>You will be notified if new appointments are scheduled</li>
              <li>Contact the project team if you have any questions</li>
            </ul>
          </div>
          
          <!-- Contact Info -->
          <div style="text-align: center; padding: 20px; background: #f8f9fa; border-radius: 6px;">
            <p style="margin: 0 0 10px 0; font-size: 16px; color: #495057; font-weight: 500;">
              üì± Need Assistance?
            </p>
            <p style="margin: 0; font-size: 14px; color: #6c757d; line-height: 1.6;">
              Please contact the project team for any questions or concerns<br>
              regarding this cancellation
            </p>
          </div>
          
        </div>
        
        <!-- Footer -->
        <div style="text-align: center; padding: 20px; color: #6c757d; font-size: 12px; line-height: 1.6;">
          <p style="margin: 0 0 5px 0;">üìß This is an automated notification from the Work Management System</p>
          <p style="margin: 0;">Generated by AppSheet Integration ‚Ä¢ ${currentDate}</p>
        </div>
        
      </div>
    `;
    
    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡πÉ‡∏ä‡πâ To)
    const sent = safeSendEmail({
      to: recipientList,
      subject: subject,
      htmlBody: htmlMessage,
      name: 'Work Management System - Cancellation Notification'
    });

    if (sent) {
      Logger.log(`‚úÖ Email sent successfully to ${recipients.length} recipient(s)`);
      Logger.log(`üìä Email quota used: 1`);
    } else {
      Logger.log('‚ùå Failed to send email');
    }

    return {
      success: sent,
      totalSent: sent ? recipients.length : 0,
      quotaUsed: sent ? 1 : 0,
      recipients: recipients
    };

  } catch (error) {
    Logger.log(`‚ùå Error sending email: ${error.toString()}`);
    return {
      success: false,
      error: error.toString(),
      totalSent: 0,
      quotaUsed: 0
    };
  }
}

// ===== HELPER FUNCTIONS =====

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
 */
function isValidEmail(email) {
  if (!email || typeof email !== 'string') return false;
  
  // Basic email validation
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email.trim());
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Email Quota
 */
function checkEmailQuota() {
  try {
    const remainingQuota = MailApp.getRemainingDailyQuota();
    Logger.log(`üìä Remaining email quota: ${remainingQuota}`);
    return remainingQuota;
  } catch (error) {
    Logger.log(`‚ö†Ô∏è Error checking email quota: ${error}`);
    return 0;
  }
}

/**
 * ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö quota)
 */
function safeSendEmail(emailParams) {
  try {
    const quota = checkEmailQuota();
    if (quota <= 0) {
      Logger.log('‚ùå Email quota exceeded, skipping email');
      return false;
    }
    
    MailApp.sendEmail(emailParams);
    return true;
  } catch (error) {
    Logger.log(`‚ùå Error sending email: ${error}`);
    return false;
  }
}

// ===== TEST FUNCTIONS =====

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• - ‡πÅ‡∏ö‡∏ö Array
 */
function testCancelNotificationArray() {
  Logger.log("üß™ Testing Cancel Work Notification (Array)...");
  
  const result = cancelWorkNotification(
    ["test1@example.com", "test2@example.com", "test3@example.com"],
    "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ä‡∏±‡πâ‡∏ô 3 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ A",
    false // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á
  );
  
  Logger.log(JSON.stringify(result, null, 2));
  return result;
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• - ‡πÅ‡∏ö‡∏ö String (comma-separated)
 */
function testCancelNotificationString() {
  Logger.log("üß™ Testing Cancel Work Notification (String)...");
  
  const result = cancelWorkNotification(
    "test1@example.com, test2@example.com, test3@example.com",
    "‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡∏ó‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏õ‡∏≤‡∏ä‡∏±‡πâ‡∏ô 2",
    false // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á
  );
  
  Logger.log(JSON.stringify(result, null, 2));
  return result;
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• - ‡∏à‡∏≤‡∏Å AppSheet (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
 */
function testFromAppSheet() {
  Logger.log("üß™ Testing from AppSheet...");
  
  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á parameters ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å AppSheet
  const emailList = "john@example.com,mary@example.com,bob@example.com";
  const workDescription = "‡∏á‡∏≤‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡∏ä‡∏±‡πâ‡∏ô 5-7 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ B";
  
  const result = cancelWorkNotification(
    emailList,
    workDescription,
    false // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á
  );
  
  Logger.log(JSON.stringify(result, null, 2));
  return result;
}
